
Stepper_Library.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008200  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d0  08008310  08008310  00009310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000024  080083e0  080083e0  000093e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .ARM          000000d0  08008404  08008404  00009404  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080084d4  080084d4  0000a060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080084d4  080084d4  000094d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080084d8  080084d8  000094d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000060  20000000  080084dc  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001c2c  20000060  0800853c  0000a060  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001c8c  0800853c  0000ac8c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000a060  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001735f  00000000  00000000  0000a089  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d8e  00000000  00000000  000213e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000015a8  00000000  00000000  00025178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000010c4  00000000  00000000  00026720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001e0ad  00000000  00000000  000277e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018e4b  00000000  00000000  00045891  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00097974  00000000  00000000  0005e6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f6050  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000650c  00000000  00000000  000f6094  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000007b  00000000  00000000  000fc5a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000060 	.word	0x20000060
 800012c:	00000000 	.word	0x00000000
 8000130:	080082f8 	.word	0x080082f8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000064 	.word	0x20000064
 800014c:	080082f8 	.word	0x080082f8

08000150 <__aeabi_frsub>:
 8000150:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__addsf3>
 8000156:	bf00      	nop

08000158 <__aeabi_fsub>:
 8000158:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

0800015c <__addsf3>:
 800015c:	0042      	lsls	r2, r0, #1
 800015e:	bf1f      	itttt	ne
 8000160:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000164:	ea92 0f03 	teqne	r2, r3
 8000168:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 800016c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000170:	d06a      	beq.n	8000248 <__addsf3+0xec>
 8000172:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000176:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 800017a:	bfc1      	itttt	gt
 800017c:	18d2      	addgt	r2, r2, r3
 800017e:	4041      	eorgt	r1, r0
 8000180:	4048      	eorgt	r0, r1
 8000182:	4041      	eorgt	r1, r0
 8000184:	bfb8      	it	lt
 8000186:	425b      	neglt	r3, r3
 8000188:	2b19      	cmp	r3, #25
 800018a:	bf88      	it	hi
 800018c:	4770      	bxhi	lr
 800018e:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000192:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000196:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 800019a:	bf18      	it	ne
 800019c:	4240      	negne	r0, r0
 800019e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001a2:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80001a6:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80001aa:	bf18      	it	ne
 80001ac:	4249      	negne	r1, r1
 80001ae:	ea92 0f03 	teq	r2, r3
 80001b2:	d03f      	beq.n	8000234 <__addsf3+0xd8>
 80001b4:	f1a2 0201 	sub.w	r2, r2, #1
 80001b8:	fa41 fc03 	asr.w	ip, r1, r3
 80001bc:	eb10 000c 	adds.w	r0, r0, ip
 80001c0:	f1c3 0320 	rsb	r3, r3, #32
 80001c4:	fa01 f103 	lsl.w	r1, r1, r3
 80001c8:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 80001cc:	d502      	bpl.n	80001d4 <__addsf3+0x78>
 80001ce:	4249      	negs	r1, r1
 80001d0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 80001d4:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 80001d8:	d313      	bcc.n	8000202 <__addsf3+0xa6>
 80001da:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 80001de:	d306      	bcc.n	80001ee <__addsf3+0x92>
 80001e0:	0840      	lsrs	r0, r0, #1
 80001e2:	ea4f 0131 	mov.w	r1, r1, rrx
 80001e6:	f102 0201 	add.w	r2, r2, #1
 80001ea:	2afe      	cmp	r2, #254	@ 0xfe
 80001ec:	d251      	bcs.n	8000292 <__addsf3+0x136>
 80001ee:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 80001f2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001f6:	bf08      	it	eq
 80001f8:	f020 0001 	biceq.w	r0, r0, #1
 80001fc:	ea40 0003 	orr.w	r0, r0, r3
 8000200:	4770      	bx	lr
 8000202:	0049      	lsls	r1, r1, #1
 8000204:	eb40 0000 	adc.w	r0, r0, r0
 8000208:	3a01      	subs	r2, #1
 800020a:	bf28      	it	cs
 800020c:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000210:	d2ed      	bcs.n	80001ee <__addsf3+0x92>
 8000212:	fab0 fc80 	clz	ip, r0
 8000216:	f1ac 0c08 	sub.w	ip, ip, #8
 800021a:	ebb2 020c 	subs.w	r2, r2, ip
 800021e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000222:	bfaa      	itet	ge
 8000224:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000228:	4252      	neglt	r2, r2
 800022a:	4318      	orrge	r0, r3
 800022c:	bfbc      	itt	lt
 800022e:	40d0      	lsrlt	r0, r2
 8000230:	4318      	orrlt	r0, r3
 8000232:	4770      	bx	lr
 8000234:	f092 0f00 	teq	r2, #0
 8000238:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 800023c:	bf06      	itte	eq
 800023e:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000242:	3201      	addeq	r2, #1
 8000244:	3b01      	subne	r3, #1
 8000246:	e7b5      	b.n	80001b4 <__addsf3+0x58>
 8000248:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800024c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000250:	bf18      	it	ne
 8000252:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000256:	d021      	beq.n	800029c <__addsf3+0x140>
 8000258:	ea92 0f03 	teq	r2, r3
 800025c:	d004      	beq.n	8000268 <__addsf3+0x10c>
 800025e:	f092 0f00 	teq	r2, #0
 8000262:	bf08      	it	eq
 8000264:	4608      	moveq	r0, r1
 8000266:	4770      	bx	lr
 8000268:	ea90 0f01 	teq	r0, r1
 800026c:	bf1c      	itt	ne
 800026e:	2000      	movne	r0, #0
 8000270:	4770      	bxne	lr
 8000272:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000276:	d104      	bne.n	8000282 <__addsf3+0x126>
 8000278:	0040      	lsls	r0, r0, #1
 800027a:	bf28      	it	cs
 800027c:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000280:	4770      	bx	lr
 8000282:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000286:	bf3c      	itt	cc
 8000288:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 800028c:	4770      	bxcc	lr
 800028e:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000292:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000296:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800029a:	4770      	bx	lr
 800029c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 80002a0:	bf16      	itet	ne
 80002a2:	4608      	movne	r0, r1
 80002a4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 80002a8:	4601      	movne	r1, r0
 80002aa:	0242      	lsls	r2, r0, #9
 80002ac:	bf06      	itte	eq
 80002ae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 80002b2:	ea90 0f01 	teqeq	r0, r1
 80002b6:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 80002ba:	4770      	bx	lr

080002bc <__aeabi_ui2f>:
 80002bc:	f04f 0300 	mov.w	r3, #0
 80002c0:	e004      	b.n	80002cc <__aeabi_i2f+0x8>
 80002c2:	bf00      	nop

080002c4 <__aeabi_i2f>:
 80002c4:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 80002c8:	bf48      	it	mi
 80002ca:	4240      	negmi	r0, r0
 80002cc:	ea5f 0c00 	movs.w	ip, r0
 80002d0:	bf08      	it	eq
 80002d2:	4770      	bxeq	lr
 80002d4:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 80002d8:	4601      	mov	r1, r0
 80002da:	f04f 0000 	mov.w	r0, #0
 80002de:	e01c      	b.n	800031a <__aeabi_l2f+0x2a>

080002e0 <__aeabi_ul2f>:
 80002e0:	ea50 0201 	orrs.w	r2, r0, r1
 80002e4:	bf08      	it	eq
 80002e6:	4770      	bxeq	lr
 80002e8:	f04f 0300 	mov.w	r3, #0
 80002ec:	e00a      	b.n	8000304 <__aeabi_l2f+0x14>
 80002ee:	bf00      	nop

080002f0 <__aeabi_l2f>:
 80002f0:	ea50 0201 	orrs.w	r2, r0, r1
 80002f4:	bf08      	it	eq
 80002f6:	4770      	bxeq	lr
 80002f8:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 80002fc:	d502      	bpl.n	8000304 <__aeabi_l2f+0x14>
 80002fe:	4240      	negs	r0, r0
 8000300:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000304:	ea5f 0c01 	movs.w	ip, r1
 8000308:	bf02      	ittt	eq
 800030a:	4684      	moveq	ip, r0
 800030c:	4601      	moveq	r1, r0
 800030e:	2000      	moveq	r0, #0
 8000310:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000314:	bf08      	it	eq
 8000316:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 800031a:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 800031e:	fabc f28c 	clz	r2, ip
 8000322:	3a08      	subs	r2, #8
 8000324:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000328:	db10      	blt.n	800034c <__aeabi_l2f+0x5c>
 800032a:	fa01 fc02 	lsl.w	ip, r1, r2
 800032e:	4463      	add	r3, ip
 8000330:	fa00 fc02 	lsl.w	ip, r0, r2
 8000334:	f1c2 0220 	rsb	r2, r2, #32
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800033c:	fa20 f202 	lsr.w	r2, r0, r2
 8000340:	eb43 0002 	adc.w	r0, r3, r2
 8000344:	bf08      	it	eq
 8000346:	f020 0001 	biceq.w	r0, r0, #1
 800034a:	4770      	bx	lr
 800034c:	f102 0220 	add.w	r2, r2, #32
 8000350:	fa01 fc02 	lsl.w	ip, r1, r2
 8000354:	f1c2 0220 	rsb	r2, r2, #32
 8000358:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 800035c:	fa21 f202 	lsr.w	r2, r1, r2
 8000360:	eb43 0002 	adc.w	r0, r3, r2
 8000364:	bf08      	it	eq
 8000366:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 800036a:	4770      	bx	lr

0800036c <__aeabi_fmul>:
 800036c:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000370:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000374:	bf1e      	ittt	ne
 8000376:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800037a:	ea92 0f0c 	teqne	r2, ip
 800037e:	ea93 0f0c 	teqne	r3, ip
 8000382:	d06f      	beq.n	8000464 <__aeabi_fmul+0xf8>
 8000384:	441a      	add	r2, r3
 8000386:	ea80 0c01 	eor.w	ip, r0, r1
 800038a:	0240      	lsls	r0, r0, #9
 800038c:	bf18      	it	ne
 800038e:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000392:	d01e      	beq.n	80003d2 <__aeabi_fmul+0x66>
 8000394:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000398:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 800039c:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 80003a0:	fba0 3101 	umull	r3, r1, r0, r1
 80003a4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 80003a8:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80003ac:	bf3e      	ittt	cc
 80003ae:	0049      	lslcc	r1, r1, #1
 80003b0:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80003b4:	005b      	lslcc	r3, r3, #1
 80003b6:	ea40 0001 	orr.w	r0, r0, r1
 80003ba:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 80003be:	2afd      	cmp	r2, #253	@ 0xfd
 80003c0:	d81d      	bhi.n	80003fe <__aeabi_fmul+0x92>
 80003c2:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80003c6:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80003ca:	bf08      	it	eq
 80003cc:	f020 0001 	biceq.w	r0, r0, #1
 80003d0:	4770      	bx	lr
 80003d2:	f090 0f00 	teq	r0, #0
 80003d6:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 80003da:	bf08      	it	eq
 80003dc:	0249      	lsleq	r1, r1, #9
 80003de:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80003e2:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80003e6:	3a7f      	subs	r2, #127	@ 0x7f
 80003e8:	bfc2      	ittt	gt
 80003ea:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 80003ee:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80003f2:	4770      	bxgt	lr
 80003f4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80003f8:	f04f 0300 	mov.w	r3, #0
 80003fc:	3a01      	subs	r2, #1
 80003fe:	dc5d      	bgt.n	80004bc <__aeabi_fmul+0x150>
 8000400:	f112 0f19 	cmn.w	r2, #25
 8000404:	bfdc      	itt	le
 8000406:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 800040a:	4770      	bxle	lr
 800040c:	f1c2 0200 	rsb	r2, r2, #0
 8000410:	0041      	lsls	r1, r0, #1
 8000412:	fa21 f102 	lsr.w	r1, r1, r2
 8000416:	f1c2 0220 	rsb	r2, r2, #32
 800041a:	fa00 fc02 	lsl.w	ip, r0, r2
 800041e:	ea5f 0031 	movs.w	r0, r1, rrx
 8000422:	f140 0000 	adc.w	r0, r0, #0
 8000426:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800042a:	bf08      	it	eq
 800042c:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000430:	4770      	bx	lr
 8000432:	f092 0f00 	teq	r2, #0
 8000436:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 800043a:	bf02      	ittt	eq
 800043c:	0040      	lsleq	r0, r0, #1
 800043e:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000442:	3a01      	subeq	r2, #1
 8000444:	d0f9      	beq.n	800043a <__aeabi_fmul+0xce>
 8000446:	ea40 000c 	orr.w	r0, r0, ip
 800044a:	f093 0f00 	teq	r3, #0
 800044e:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000452:	bf02      	ittt	eq
 8000454:	0049      	lsleq	r1, r1, #1
 8000456:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 800045a:	3b01      	subeq	r3, #1
 800045c:	d0f9      	beq.n	8000452 <__aeabi_fmul+0xe6>
 800045e:	ea41 010c 	orr.w	r1, r1, ip
 8000462:	e78f      	b.n	8000384 <__aeabi_fmul+0x18>
 8000464:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000468:	ea92 0f0c 	teq	r2, ip
 800046c:	bf18      	it	ne
 800046e:	ea93 0f0c 	teqne	r3, ip
 8000472:	d00a      	beq.n	800048a <__aeabi_fmul+0x11e>
 8000474:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000478:	bf18      	it	ne
 800047a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 800047e:	d1d8      	bne.n	8000432 <__aeabi_fmul+0xc6>
 8000480:	ea80 0001 	eor.w	r0, r0, r1
 8000484:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000488:	4770      	bx	lr
 800048a:	f090 0f00 	teq	r0, #0
 800048e:	bf17      	itett	ne
 8000490:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000494:	4608      	moveq	r0, r1
 8000496:	f091 0f00 	teqne	r1, #0
 800049a:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 800049e:	d014      	beq.n	80004ca <__aeabi_fmul+0x15e>
 80004a0:	ea92 0f0c 	teq	r2, ip
 80004a4:	d101      	bne.n	80004aa <__aeabi_fmul+0x13e>
 80004a6:	0242      	lsls	r2, r0, #9
 80004a8:	d10f      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004aa:	ea93 0f0c 	teq	r3, ip
 80004ae:	d103      	bne.n	80004b8 <__aeabi_fmul+0x14c>
 80004b0:	024b      	lsls	r3, r1, #9
 80004b2:	bf18      	it	ne
 80004b4:	4608      	movne	r0, r1
 80004b6:	d108      	bne.n	80004ca <__aeabi_fmul+0x15e>
 80004b8:	ea80 0001 	eor.w	r0, r0, r1
 80004bc:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 80004c0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004c4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80004c8:	4770      	bx	lr
 80004ca:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 80004ce:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 80004d2:	4770      	bx	lr

080004d4 <__aeabi_fdiv>:
 80004d4:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004d8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 80004dc:	bf1e      	ittt	ne
 80004de:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 80004e2:	ea92 0f0c 	teqne	r2, ip
 80004e6:	ea93 0f0c 	teqne	r3, ip
 80004ea:	d069      	beq.n	80005c0 <__aeabi_fdiv+0xec>
 80004ec:	eba2 0203 	sub.w	r2, r2, r3
 80004f0:	ea80 0c01 	eor.w	ip, r0, r1
 80004f4:	0249      	lsls	r1, r1, #9
 80004f6:	ea4f 2040 	mov.w	r0, r0, lsl #9
 80004fa:	d037      	beq.n	800056c <__aeabi_fdiv+0x98>
 80004fc:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000500:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000504:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000508:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 800050c:	428b      	cmp	r3, r1
 800050e:	bf38      	it	cc
 8000510:	005b      	lslcc	r3, r3, #1
 8000512:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000516:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 800051a:	428b      	cmp	r3, r1
 800051c:	bf24      	itt	cs
 800051e:	1a5b      	subcs	r3, r3, r1
 8000520:	ea40 000c 	orrcs.w	r0, r0, ip
 8000524:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000528:	bf24      	itt	cs
 800052a:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 800052e:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000532:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000536:	bf24      	itt	cs
 8000538:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 800053c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000540:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000544:	bf24      	itt	cs
 8000546:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 800054a:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800054e:	011b      	lsls	r3, r3, #4
 8000550:	bf18      	it	ne
 8000552:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000556:	d1e0      	bne.n	800051a <__aeabi_fdiv+0x46>
 8000558:	2afd      	cmp	r2, #253	@ 0xfd
 800055a:	f63f af50 	bhi.w	80003fe <__aeabi_fmul+0x92>
 800055e:	428b      	cmp	r3, r1
 8000560:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000564:	bf08      	it	eq
 8000566:	f020 0001 	biceq.w	r0, r0, #1
 800056a:	4770      	bx	lr
 800056c:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000570:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000574:	327f      	adds	r2, #127	@ 0x7f
 8000576:	bfc2      	ittt	gt
 8000578:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 800057c:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000580:	4770      	bxgt	lr
 8000582:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000586:	f04f 0300 	mov.w	r3, #0
 800058a:	3a01      	subs	r2, #1
 800058c:	e737      	b.n	80003fe <__aeabi_fmul+0x92>
 800058e:	f092 0f00 	teq	r2, #0
 8000592:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000596:	bf02      	ittt	eq
 8000598:	0040      	lsleq	r0, r0, #1
 800059a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 800059e:	3a01      	subeq	r2, #1
 80005a0:	d0f9      	beq.n	8000596 <__aeabi_fdiv+0xc2>
 80005a2:	ea40 000c 	orr.w	r0, r0, ip
 80005a6:	f093 0f00 	teq	r3, #0
 80005aa:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 80005ae:	bf02      	ittt	eq
 80005b0:	0049      	lsleq	r1, r1, #1
 80005b2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 80005b6:	3b01      	subeq	r3, #1
 80005b8:	d0f9      	beq.n	80005ae <__aeabi_fdiv+0xda>
 80005ba:	ea41 010c 	orr.w	r1, r1, ip
 80005be:	e795      	b.n	80004ec <__aeabi_fdiv+0x18>
 80005c0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 80005c4:	ea92 0f0c 	teq	r2, ip
 80005c8:	d108      	bne.n	80005dc <__aeabi_fdiv+0x108>
 80005ca:	0242      	lsls	r2, r0, #9
 80005cc:	f47f af7d 	bne.w	80004ca <__aeabi_fmul+0x15e>
 80005d0:	ea93 0f0c 	teq	r3, ip
 80005d4:	f47f af70 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 80005d8:	4608      	mov	r0, r1
 80005da:	e776      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005dc:	ea93 0f0c 	teq	r3, ip
 80005e0:	d104      	bne.n	80005ec <__aeabi_fdiv+0x118>
 80005e2:	024b      	lsls	r3, r1, #9
 80005e4:	f43f af4c 	beq.w	8000480 <__aeabi_fmul+0x114>
 80005e8:	4608      	mov	r0, r1
 80005ea:	e76e      	b.n	80004ca <__aeabi_fmul+0x15e>
 80005ec:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 80005f0:	bf18      	it	ne
 80005f2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 80005f6:	d1ca      	bne.n	800058e <__aeabi_fdiv+0xba>
 80005f8:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 80005fc:	f47f af5c 	bne.w	80004b8 <__aeabi_fmul+0x14c>
 8000600:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000604:	f47f af3c 	bne.w	8000480 <__aeabi_fmul+0x114>
 8000608:	e75f      	b.n	80004ca <__aeabi_fmul+0x15e>
 800060a:	bf00      	nop

0800060c <__gesf2>:
 800060c:	f04f 3cff 	mov.w	ip, #4294967295
 8000610:	e006      	b.n	8000620 <__cmpsf2+0x4>
 8000612:	bf00      	nop

08000614 <__lesf2>:
 8000614:	f04f 0c01 	mov.w	ip, #1
 8000618:	e002      	b.n	8000620 <__cmpsf2+0x4>
 800061a:	bf00      	nop

0800061c <__cmpsf2>:
 800061c:	f04f 0c01 	mov.w	ip, #1
 8000620:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000624:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000628:	ea4f 0341 	mov.w	r3, r1, lsl #1
 800062c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000630:	bf18      	it	ne
 8000632:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000636:	d011      	beq.n	800065c <__cmpsf2+0x40>
 8000638:	b001      	add	sp, #4
 800063a:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 800063e:	bf18      	it	ne
 8000640:	ea90 0f01 	teqne	r0, r1
 8000644:	bf58      	it	pl
 8000646:	ebb2 0003 	subspl.w	r0, r2, r3
 800064a:	bf88      	it	hi
 800064c:	17c8      	asrhi	r0, r1, #31
 800064e:	bf38      	it	cc
 8000650:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000654:	bf18      	it	ne
 8000656:	f040 0001 	orrne.w	r0, r0, #1
 800065a:	4770      	bx	lr
 800065c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000660:	d102      	bne.n	8000668 <__cmpsf2+0x4c>
 8000662:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8000666:	d105      	bne.n	8000674 <__cmpsf2+0x58>
 8000668:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 800066c:	d1e4      	bne.n	8000638 <__cmpsf2+0x1c>
 800066e:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 8000672:	d0e1      	beq.n	8000638 <__cmpsf2+0x1c>
 8000674:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000678:	4770      	bx	lr
 800067a:	bf00      	nop

0800067c <__aeabi_cfrcmple>:
 800067c:	4684      	mov	ip, r0
 800067e:	4608      	mov	r0, r1
 8000680:	4661      	mov	r1, ip
 8000682:	e7ff      	b.n	8000684 <__aeabi_cfcmpeq>

08000684 <__aeabi_cfcmpeq>:
 8000684:	b50f      	push	{r0, r1, r2, r3, lr}
 8000686:	f7ff ffc9 	bl	800061c <__cmpsf2>
 800068a:	2800      	cmp	r0, #0
 800068c:	bf48      	it	mi
 800068e:	f110 0f00 	cmnmi.w	r0, #0
 8000692:	bd0f      	pop	{r0, r1, r2, r3, pc}

08000694 <__aeabi_fcmpeq>:
 8000694:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000698:	f7ff fff4 	bl	8000684 <__aeabi_cfcmpeq>
 800069c:	bf0c      	ite	eq
 800069e:	2001      	moveq	r0, #1
 80006a0:	2000      	movne	r0, #0
 80006a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006a6:	bf00      	nop

080006a8 <__aeabi_fcmplt>:
 80006a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006ac:	f7ff ffea 	bl	8000684 <__aeabi_cfcmpeq>
 80006b0:	bf34      	ite	cc
 80006b2:	2001      	movcc	r0, #1
 80006b4:	2000      	movcs	r0, #0
 80006b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ba:	bf00      	nop

080006bc <__aeabi_fcmple>:
 80006bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006c0:	f7ff ffe0 	bl	8000684 <__aeabi_cfcmpeq>
 80006c4:	bf94      	ite	ls
 80006c6:	2001      	movls	r0, #1
 80006c8:	2000      	movhi	r0, #0
 80006ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80006ce:	bf00      	nop

080006d0 <__aeabi_fcmpge>:
 80006d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006d4:	f7ff ffd2 	bl	800067c <__aeabi_cfrcmple>
 80006d8:	bf94      	ite	ls
 80006da:	2001      	movls	r0, #1
 80006dc:	2000      	movhi	r0, #0
 80006de:	f85d fb08 	ldr.w	pc, [sp], #8
 80006e2:	bf00      	nop

080006e4 <__aeabi_fcmpgt>:
 80006e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80006e8:	f7ff ffc8 	bl	800067c <__aeabi_cfrcmple>
 80006ec:	bf34      	ite	cc
 80006ee:	2001      	movcc	r0, #1
 80006f0:	2000      	movcs	r0, #0
 80006f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80006f6:	bf00      	nop

080006f8 <__aeabi_f2uiz>:
 80006f8:	0042      	lsls	r2, r0, #1
 80006fa:	d20e      	bcs.n	800071a <__aeabi_f2uiz+0x22>
 80006fc:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000700:	d30b      	bcc.n	800071a <__aeabi_f2uiz+0x22>
 8000702:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000706:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800070a:	d409      	bmi.n	8000720 <__aeabi_f2uiz+0x28>
 800070c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000710:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000714:	fa23 f002 	lsr.w	r0, r3, r2
 8000718:	4770      	bx	lr
 800071a:	f04f 0000 	mov.w	r0, #0
 800071e:	4770      	bx	lr
 8000720:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000724:	d101      	bne.n	800072a <__aeabi_f2uiz+0x32>
 8000726:	0242      	lsls	r2, r0, #9
 8000728:	d102      	bne.n	8000730 <__aeabi_f2uiz+0x38>
 800072a:	f04f 30ff 	mov.w	r0, #4294967295
 800072e:	4770      	bx	lr
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop

08000738 <selfrel_offset31>:
 8000738:	6803      	ldr	r3, [r0, #0]
 800073a:	005a      	lsls	r2, r3, #1
 800073c:	bf4c      	ite	mi
 800073e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 8000742:	f023 4300 	bicpl.w	r3, r3, #2147483648	@ 0x80000000
 8000746:	4418      	add	r0, r3
 8000748:	4770      	bx	lr
 800074a:	bf00      	nop

0800074c <search_EIT_table>:
 800074c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000750:	b341      	cbz	r1, 80007a4 <search_EIT_table+0x58>
 8000752:	f101 38ff 	add.w	r8, r1, #4294967295
 8000756:	4605      	mov	r5, r0
 8000758:	4616      	mov	r6, r2
 800075a:	4647      	mov	r7, r8
 800075c:	2400      	movs	r4, #0
 800075e:	19e1      	adds	r1, r4, r7
 8000760:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
 8000764:	1049      	asrs	r1, r1, #1
 8000766:	eb05 0ac1 	add.w	sl, r5, r1, lsl #3
 800076a:	4650      	mov	r0, sl
 800076c:	f7ff ffe4 	bl	8000738 <selfrel_offset31>
 8000770:	4588      	cmp	r8, r1
 8000772:	4603      	mov	r3, r0
 8000774:	ea4f 09c1 	mov.w	r9, r1, lsl #3
 8000778:	d00e      	beq.n	8000798 <search_EIT_table+0x4c>
 800077a:	f109 0008 	add.w	r0, r9, #8
 800077e:	42b3      	cmp	r3, r6
 8000780:	4428      	add	r0, r5
 8000782:	d80b      	bhi.n	800079c <search_EIT_table+0x50>
 8000784:	f7ff ffd8 	bl	8000738 <selfrel_offset31>
 8000788:	3801      	subs	r0, #1
 800078a:	42b0      	cmp	r0, r6
 800078c:	f101 0401 	add.w	r4, r1, #1
 8000790:	d3e5      	bcc.n	800075e <search_EIT_table+0x12>
 8000792:	4650      	mov	r0, sl
 8000794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000798:	42b0      	cmp	r0, r6
 800079a:	d9fa      	bls.n	8000792 <search_EIT_table+0x46>
 800079c:	428c      	cmp	r4, r1
 800079e:	d001      	beq.n	80007a4 <search_EIT_table+0x58>
 80007a0:	1e4f      	subs	r7, r1, #1
 80007a2:	e7dc      	b.n	800075e <search_EIT_table+0x12>
 80007a4:	f04f 0a00 	mov.w	sl, #0
 80007a8:	4650      	mov	r0, sl
 80007aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007ae:	bf00      	nop

080007b0 <__gnu_unwind_get_pr_addr>:
 80007b0:	2801      	cmp	r0, #1
 80007b2:	d009      	beq.n	80007c8 <__gnu_unwind_get_pr_addr+0x18>
 80007b4:	2802      	cmp	r0, #2
 80007b6:	d005      	beq.n	80007c4 <__gnu_unwind_get_pr_addr+0x14>
 80007b8:	4b04      	ldr	r3, [pc, #16]	@ (80007cc <__gnu_unwind_get_pr_addr+0x1c>)
 80007ba:	2800      	cmp	r0, #0
 80007bc:	bf0c      	ite	eq
 80007be:	4618      	moveq	r0, r3
 80007c0:	2000      	movne	r0, #0
 80007c2:	4770      	bx	lr
 80007c4:	4802      	ldr	r0, [pc, #8]	@ (80007d0 <__gnu_unwind_get_pr_addr+0x20>)
 80007c6:	4770      	bx	lr
 80007c8:	4802      	ldr	r0, [pc, #8]	@ (80007d4 <__gnu_unwind_get_pr_addr+0x24>)
 80007ca:	4770      	bx	lr
 80007cc:	08000ea9 	.word	0x08000ea9
 80007d0:	08000eb1 	.word	0x08000eb1
 80007d4:	08000ead 	.word	0x08000ead

080007d8 <get_eit_entry>:
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	4b22      	ldr	r3, [pc, #136]	@ (8000864 <get_eit_entry+0x8c>)
 80007dc:	4604      	mov	r4, r0
 80007de:	b083      	sub	sp, #12
 80007e0:	1e8d      	subs	r5, r1, #2
 80007e2:	b33b      	cbz	r3, 8000834 <get_eit_entry+0x5c>
 80007e4:	4628      	mov	r0, r5
 80007e6:	a901      	add	r1, sp, #4
 80007e8:	f3af 8000 	nop.w
 80007ec:	b1e8      	cbz	r0, 800082a <get_eit_entry+0x52>
 80007ee:	9901      	ldr	r1, [sp, #4]
 80007f0:	462a      	mov	r2, r5
 80007f2:	f7ff ffab 	bl	800074c <search_EIT_table>
 80007f6:	4601      	mov	r1, r0
 80007f8:	b1b8      	cbz	r0, 800082a <get_eit_entry+0x52>
 80007fa:	f7ff ff9d 	bl	8000738 <selfrel_offset31>
 80007fe:	684b      	ldr	r3, [r1, #4]
 8000800:	64a0      	str	r0, [r4, #72]	@ 0x48
 8000802:	2b01      	cmp	r3, #1
 8000804:	d02b      	beq.n	800085e <get_eit_entry+0x86>
 8000806:	2b00      	cmp	r3, #0
 8000808:	db26      	blt.n	8000858 <get_eit_entry+0x80>
 800080a:	1d08      	adds	r0, r1, #4
 800080c:	f7ff ff94 	bl	8000738 <selfrel_offset31>
 8000810:	2300      	movs	r3, #0
 8000812:	6523      	str	r3, [r4, #80]	@ 0x50
 8000814:	6803      	ldr	r3, [r0, #0]
 8000816:	64e0      	str	r0, [r4, #76]	@ 0x4c
 8000818:	2b00      	cmp	r3, #0
 800081a:	db12      	blt.n	8000842 <get_eit_entry+0x6a>
 800081c:	f7ff ff8c 	bl	8000738 <selfrel_offset31>
 8000820:	4603      	mov	r3, r0
 8000822:	2000      	movs	r0, #0
 8000824:	6123      	str	r3, [r4, #16]
 8000826:	b003      	add	sp, #12
 8000828:	bd30      	pop	{r4, r5, pc}
 800082a:	2300      	movs	r3, #0
 800082c:	2009      	movs	r0, #9
 800082e:	6123      	str	r3, [r4, #16]
 8000830:	b003      	add	sp, #12
 8000832:	bd30      	pop	{r4, r5, pc}
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <get_eit_entry+0x90>)
 8000836:	490d      	ldr	r1, [pc, #52]	@ (800086c <get_eit_entry+0x94>)
 8000838:	4618      	mov	r0, r3
 800083a:	1ac9      	subs	r1, r1, r3
 800083c:	10c9      	asrs	r1, r1, #3
 800083e:	9101      	str	r1, [sp, #4]
 8000840:	e7d6      	b.n	80007f0 <get_eit_entry+0x18>
 8000842:	f3c3 6003 	ubfx	r0, r3, #24, #4
 8000846:	f7ff ffb3 	bl	80007b0 <__gnu_unwind_get_pr_addr>
 800084a:	1e03      	subs	r3, r0, #0
 800084c:	bf0c      	ite	eq
 800084e:	2009      	moveq	r0, #9
 8000850:	2000      	movne	r0, #0
 8000852:	6123      	str	r3, [r4, #16]
 8000854:	b003      	add	sp, #12
 8000856:	bd30      	pop	{r4, r5, pc}
 8000858:	2301      	movs	r3, #1
 800085a:	1d08      	adds	r0, r1, #4
 800085c:	e7d9      	b.n	8000812 <get_eit_entry+0x3a>
 800085e:	2300      	movs	r3, #0
 8000860:	2005      	movs	r0, #5
 8000862:	e7df      	b.n	8000824 <get_eit_entry+0x4c>
 8000864:	00000000 	.word	0x00000000
 8000868:	08008404 	.word	0x08008404
 800086c:	080084d4 	.word	0x080084d4

08000870 <restore_non_core_regs>:
 8000870:	6803      	ldr	r3, [r0, #0]
 8000872:	b510      	push	{r4, lr}
 8000874:	07da      	lsls	r2, r3, #31
 8000876:	4604      	mov	r4, r0
 8000878:	d406      	bmi.n	8000888 <restore_non_core_regs+0x18>
 800087a:	079b      	lsls	r3, r3, #30
 800087c:	f100 0050 	add.w	r0, r0, #80	@ 0x50
 8000880:	d509      	bpl.n	8000896 <restore_non_core_regs+0x26>
 8000882:	f000 fc97 	bl	80011b4 <__gnu_Unwind_Restore_VFP_D>
 8000886:	6823      	ldr	r3, [r4, #0]
 8000888:	0759      	lsls	r1, r3, #29
 800088a:	d509      	bpl.n	80008a0 <restore_non_core_regs+0x30>
 800088c:	071a      	lsls	r2, r3, #28
 800088e:	d50e      	bpl.n	80008ae <restore_non_core_regs+0x3e>
 8000890:	06db      	lsls	r3, r3, #27
 8000892:	d513      	bpl.n	80008bc <restore_non_core_regs+0x4c>
 8000894:	bd10      	pop	{r4, pc}
 8000896:	f000 fc85 	bl	80011a4 <__gnu_Unwind_Restore_VFP>
 800089a:	6823      	ldr	r3, [r4, #0]
 800089c:	0759      	lsls	r1, r3, #29
 800089e:	d4f5      	bmi.n	800088c <restore_non_core_regs+0x1c>
 80008a0:	f104 00d8 	add.w	r0, r4, #216	@ 0xd8
 80008a4:	f000 fc8e 	bl	80011c4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 80008a8:	6823      	ldr	r3, [r4, #0]
 80008aa:	071a      	lsls	r2, r3, #28
 80008ac:	d4f0      	bmi.n	8000890 <restore_non_core_regs+0x20>
 80008ae:	f504 70ac 	add.w	r0, r4, #344	@ 0x158
 80008b2:	f000 fc8f 	bl	80011d4 <__gnu_Unwind_Restore_WMMXD>
 80008b6:	6823      	ldr	r3, [r4, #0]
 80008b8:	06db      	lsls	r3, r3, #27
 80008ba:	d4eb      	bmi.n	8000894 <restore_non_core_regs+0x24>
 80008bc:	f504 70ec 	add.w	r0, r4, #472	@ 0x1d8
 80008c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80008c4:	f000 bcca 	b.w	800125c <__gnu_Unwind_Restore_WMMXC>

080008c8 <_Unwind_decode_typeinfo_ptr.constprop.0>:
 80008c8:	4603      	mov	r3, r0
 80008ca:	6800      	ldr	r0, [r0, #0]
 80008cc:	b100      	cbz	r0, 80008d0 <_Unwind_decode_typeinfo_ptr.constprop.0+0x8>
 80008ce:	4418      	add	r0, r3
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop

080008d4 <__gnu_unwind_24bit.isra.0>:
 80008d4:	2009      	movs	r0, #9
 80008d6:	4770      	bx	lr

080008d8 <_Unwind_DebugHook>:
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop

080008dc <unwind_phase2>:
 80008dc:	b570      	push	{r4, r5, r6, lr}
 80008de:	4604      	mov	r4, r0
 80008e0:	460e      	mov	r6, r1
 80008e2:	4620      	mov	r0, r4
 80008e4:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 80008e6:	f7ff ff77 	bl	80007d8 <get_eit_entry>
 80008ea:	4605      	mov	r5, r0
 80008ec:	b998      	cbnz	r0, 8000916 <unwind_phase2+0x3a>
 80008ee:	f8d6 c040 	ldr.w	ip, [r6, #64]	@ 0x40
 80008f2:	4632      	mov	r2, r6
 80008f4:	4621      	mov	r1, r4
 80008f6:	2001      	movs	r0, #1
 80008f8:	6923      	ldr	r3, [r4, #16]
 80008fa:	f8c4 c014 	str.w	ip, [r4, #20]
 80008fe:	4798      	blx	r3
 8000900:	2808      	cmp	r0, #8
 8000902:	d0ee      	beq.n	80008e2 <unwind_phase2+0x6>
 8000904:	2807      	cmp	r0, #7
 8000906:	d106      	bne.n	8000916 <unwind_phase2+0x3a>
 8000908:	4628      	mov	r0, r5
 800090a:	6c31      	ldr	r1, [r6, #64]	@ 0x40
 800090c:	f7ff ffe4 	bl	80008d8 <_Unwind_DebugHook>
 8000910:	1d30      	adds	r0, r6, #4
 8000912:	f000 fc3b 	bl	800118c <__restore_core_regs>
 8000916:	f007 fca3 	bl	8008260 <abort>
 800091a:	bf00      	nop

0800091c <unwind_phase2_forced>:
 800091c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000920:	f04f 0a00 	mov.w	sl, #0
 8000924:	f5ad 7d76 	sub.w	sp, sp, #984	@ 0x3d8
 8000928:	f10d 0e0c 	add.w	lr, sp, #12
 800092c:	f101 0c04 	add.w	ip, r1, #4
 8000930:	68c7      	ldr	r7, [r0, #12]
 8000932:	f8d0 8018 	ldr.w	r8, [r0, #24]
 8000936:	4606      	mov	r6, r0
 8000938:	4614      	mov	r4, r2
 800093a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800093e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000942:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000946:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 800094a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 800094e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000952:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000956:	ad02      	add	r5, sp, #8
 8000958:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 800095c:	f8c5 a000 	str.w	sl, [r5]
 8000960:	e021      	b.n	80009a6 <unwind_phase2_forced+0x8a>
 8000962:	6c2b      	ldr	r3, [r5, #64]	@ 0x40
 8000964:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8000968:	4629      	mov	r1, r5
 800096a:	6173      	str	r3, [r6, #20]
 800096c:	a87c      	add	r0, sp, #496	@ 0x1f0
 800096e:	f007 f837 	bl	80079e0 <memcpy>
 8000972:	4631      	mov	r1, r6
 8000974:	4650      	mov	r0, sl
 8000976:	6933      	ldr	r3, [r6, #16]
 8000978:	aa7c      	add	r2, sp, #496	@ 0x1f0
 800097a:	4798      	blx	r3
 800097c:	9c8a      	ldr	r4, [sp, #552]	@ 0x228
 800097e:	4682      	mov	sl, r0
 8000980:	64ac      	str	r4, [r5, #72]	@ 0x48
 8000982:	2001      	movs	r0, #1
 8000984:	4633      	mov	r3, r6
 8000986:	4632      	mov	r2, r6
 8000988:	4649      	mov	r1, r9
 800098a:	e9cd 5800 	strd	r5, r8, [sp]
 800098e:	47b8      	blx	r7
 8000990:	4604      	mov	r4, r0
 8000992:	bb30      	cbnz	r0, 80009e2 <unwind_phase2_forced+0xc6>
 8000994:	f44f 72f4 	mov.w	r2, #488	@ 0x1e8
 8000998:	4628      	mov	r0, r5
 800099a:	a97c      	add	r1, sp, #496	@ 0x1f0
 800099c:	f007 f820 	bl	80079e0 <memcpy>
 80009a0:	f1ba 0f08 	cmp.w	sl, #8
 80009a4:	d11a      	bne.n	80009dc <unwind_phase2_forced+0xc0>
 80009a6:	4630      	mov	r0, r6
 80009a8:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80009aa:	f7ff ff15 	bl	80007d8 <get_eit_entry>
 80009ae:	f104 0909 	add.w	r9, r4, #9
 80009b2:	fa5f fa89 	uxtb.w	sl, r9
 80009b6:	4604      	mov	r4, r0
 80009b8:	2800      	cmp	r0, #0
 80009ba:	d0d2      	beq.n	8000962 <unwind_phase2_forced+0x46>
 80009bc:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 80009be:	4633      	mov	r3, r6
 80009c0:	64a9      	str	r1, [r5, #72]	@ 0x48
 80009c2:	4632      	mov	r2, r6
 80009c4:	2001      	movs	r0, #1
 80009c6:	e9cd 5800 	strd	r5, r8, [sp]
 80009ca:	f04a 0110 	orr.w	r1, sl, #16
 80009ce:	47b8      	blx	r7
 80009d0:	b938      	cbnz	r0, 80009e2 <unwind_phase2_forced+0xc6>
 80009d2:	4620      	mov	r0, r4
 80009d4:	f50d 7d76 	add.w	sp, sp, #984	@ 0x3d8
 80009d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009dc:	f1ba 0f07 	cmp.w	sl, #7
 80009e0:	d005      	beq.n	80009ee <unwind_phase2_forced+0xd2>
 80009e2:	2409      	movs	r4, #9
 80009e4:	4620      	mov	r0, r4
 80009e6:	f50d 7d76 	add.w	sp, sp, #984	@ 0x3d8
 80009ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80009ee:	4620      	mov	r0, r4
 80009f0:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 80009f2:	f7ff ff71 	bl	80008d8 <_Unwind_DebugHook>
 80009f6:	a803      	add	r0, sp, #12
 80009f8:	f000 fbc8 	bl	800118c <__restore_core_regs>

080009fc <_Unwind_GetCFA>:
 80009fc:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80009fe:	4770      	bx	lr

08000a00 <__gnu_Unwind_RaiseException>:
 8000a00:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a02:	f04f 37ff 	mov.w	r7, #4294967295
 8000a06:	6bcb      	ldr	r3, [r1, #60]	@ 0x3c
 8000a08:	b0fb      	sub	sp, #492	@ 0x1ec
 8000a0a:	ac01      	add	r4, sp, #4
 8000a0c:	640b      	str	r3, [r1, #64]	@ 0x40
 8000a0e:	f101 0c04 	add.w	ip, r1, #4
 8000a12:	460e      	mov	r6, r1
 8000a14:	4605      	mov	r5, r0
 8000a16:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a1c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000a20:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a22:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000a26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a28:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000a2c:	9700      	str	r7, [sp, #0]
 8000a2e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000a32:	e006      	b.n	8000a42 <__gnu_Unwind_RaiseException+0x42>
 8000a34:	466a      	mov	r2, sp
 8000a36:	4629      	mov	r1, r5
 8000a38:	692b      	ldr	r3, [r5, #16]
 8000a3a:	4798      	blx	r3
 8000a3c:	2808      	cmp	r0, #8
 8000a3e:	4604      	mov	r4, r0
 8000a40:	d108      	bne.n	8000a54 <__gnu_Unwind_RaiseException+0x54>
 8000a42:	4628      	mov	r0, r5
 8000a44:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8000a46:	f7ff fec7 	bl	80007d8 <get_eit_entry>
 8000a4a:	2800      	cmp	r0, #0
 8000a4c:	d0f2      	beq.n	8000a34 <__gnu_Unwind_RaiseException+0x34>
 8000a4e:	2009      	movs	r0, #9
 8000a50:	b07b      	add	sp, #492	@ 0x1ec
 8000a52:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000a54:	4668      	mov	r0, sp
 8000a56:	f7ff ff0b 	bl	8000870 <restore_non_core_regs>
 8000a5a:	2c06      	cmp	r4, #6
 8000a5c:	d1f7      	bne.n	8000a4e <__gnu_Unwind_RaiseException+0x4e>
 8000a5e:	4631      	mov	r1, r6
 8000a60:	4628      	mov	r0, r5
 8000a62:	f7ff ff3b 	bl	80008dc <unwind_phase2>
 8000a66:	bf00      	nop

08000a68 <__gnu_Unwind_ForcedUnwind>:
 8000a68:	b410      	push	{r4}
 8000a6a:	4614      	mov	r4, r2
 8000a6c:	6184      	str	r4, [r0, #24]
 8000a6e:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 8000a70:	60c1      	str	r1, [r0, #12]
 8000a72:	2200      	movs	r2, #0
 8000a74:	641c      	str	r4, [r3, #64]	@ 0x40
 8000a76:	4619      	mov	r1, r3
 8000a78:	bc10      	pop	{r4}
 8000a7a:	e74f      	b.n	800091c <unwind_phase2_forced>

08000a7c <__gnu_Unwind_Resume>:
 8000a7c:	b570      	push	{r4, r5, r6, lr}
 8000a7e:	6943      	ldr	r3, [r0, #20]
 8000a80:	68c6      	ldr	r6, [r0, #12]
 8000a82:	640b      	str	r3, [r1, #64]	@ 0x40
 8000a84:	b9ae      	cbnz	r6, 8000ab2 <__gnu_Unwind_Resume+0x36>
 8000a86:	460a      	mov	r2, r1
 8000a88:	6903      	ldr	r3, [r0, #16]
 8000a8a:	4604      	mov	r4, r0
 8000a8c:	460d      	mov	r5, r1
 8000a8e:	4601      	mov	r1, r0
 8000a90:	2002      	movs	r0, #2
 8000a92:	4798      	blx	r3
 8000a94:	2807      	cmp	r0, #7
 8000a96:	d005      	beq.n	8000aa4 <__gnu_Unwind_Resume+0x28>
 8000a98:	2808      	cmp	r0, #8
 8000a9a:	d10f      	bne.n	8000abc <__gnu_Unwind_Resume+0x40>
 8000a9c:	4629      	mov	r1, r5
 8000a9e:	4620      	mov	r0, r4
 8000aa0:	f7ff ff1c 	bl	80008dc <unwind_phase2>
 8000aa4:	4630      	mov	r0, r6
 8000aa6:	6c29      	ldr	r1, [r5, #64]	@ 0x40
 8000aa8:	f7ff ff16 	bl	80008d8 <_Unwind_DebugHook>
 8000aac:	1d28      	adds	r0, r5, #4
 8000aae:	f000 fb6d 	bl	800118c <__restore_core_regs>
 8000ab2:	2201      	movs	r2, #1
 8000ab4:	f7ff ff32 	bl	800091c <unwind_phase2_forced>
 8000ab8:	f007 fbd2 	bl	8008260 <abort>
 8000abc:	f007 fbd0 	bl	8008260 <abort>

08000ac0 <__gnu_Unwind_Resume_or_Rethrow>:
 8000ac0:	68c2      	ldr	r2, [r0, #12]
 8000ac2:	b12a      	cbz	r2, 8000ad0 <__gnu_Unwind_Resume_or_Rethrow+0x10>
 8000ac4:	f8d1 c03c 	ldr.w	ip, [r1, #60]	@ 0x3c
 8000ac8:	2200      	movs	r2, #0
 8000aca:	f8c1 c040 	str.w	ip, [r1, #64]	@ 0x40
 8000ace:	e725      	b.n	800091c <unwind_phase2_forced>
 8000ad0:	e796      	b.n	8000a00 <__gnu_Unwind_RaiseException>
 8000ad2:	bf00      	nop

08000ad4 <_Unwind_Complete>:
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <_Unwind_DeleteException>:
 8000ad8:	6883      	ldr	r3, [r0, #8]
 8000ada:	4601      	mov	r1, r0
 8000adc:	b10b      	cbz	r3, 8000ae2 <_Unwind_DeleteException+0xa>
 8000ade:	2001      	movs	r0, #1
 8000ae0:	4718      	bx	r3
 8000ae2:	4770      	bx	lr

08000ae4 <_Unwind_VRS_Get>:
 8000ae4:	2905      	cmp	r1, #5
 8000ae6:	d815      	bhi.n	8000b14 <_Unwind_VRS_Get+0x30>
 8000ae8:	e8df f001 	tbb	[pc, r1]
 8000aec:	0314030a 	.word	0x0314030a
 8000af0:	0503      	.short	0x0503
 8000af2:	2001      	movs	r0, #1
 8000af4:	4770      	bx	lr
 8000af6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 8000af8:	9a00      	ldr	r2, [sp, #0]
 8000afa:	2000      	movs	r0, #0
 8000afc:	6013      	str	r3, [r2, #0]
 8000afe:	4770      	bx	lr
 8000b00:	b943      	cbnz	r3, 8000b14 <_Unwind_VRS_Get+0x30>
 8000b02:	2a0f      	cmp	r2, #15
 8000b04:	d806      	bhi.n	8000b14 <_Unwind_VRS_Get+0x30>
 8000b06:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000b0a:	6853      	ldr	r3, [r2, #4]
 8000b0c:	9a00      	ldr	r2, [sp, #0]
 8000b0e:	2000      	movs	r0, #0
 8000b10:	6013      	str	r3, [r2, #0]
 8000b12:	4770      	bx	lr
 8000b14:	2002      	movs	r0, #2
 8000b16:	4770      	bx	lr

08000b18 <_Unwind_GetGR>:
 8000b18:	2300      	movs	r3, #0
 8000b1a:	b500      	push	{lr}
 8000b1c:	b085      	sub	sp, #20
 8000b1e:	460a      	mov	r2, r1
 8000b20:	a903      	add	r1, sp, #12
 8000b22:	9100      	str	r1, [sp, #0]
 8000b24:	4619      	mov	r1, r3
 8000b26:	f7ff ffdd 	bl	8000ae4 <_Unwind_VRS_Get>
 8000b2a:	9803      	ldr	r0, [sp, #12]
 8000b2c:	b005      	add	sp, #20
 8000b2e:	f85d fb04 	ldr.w	pc, [sp], #4
 8000b32:	bf00      	nop

08000b34 <_Unwind_VRS_Set>:
 8000b34:	2905      	cmp	r1, #5
 8000b36:	d815      	bhi.n	8000b64 <_Unwind_VRS_Set+0x30>
 8000b38:	e8df f001 	tbb	[pc, r1]
 8000b3c:	0314030a 	.word	0x0314030a
 8000b40:	0503      	.short	0x0503
 8000b42:	2001      	movs	r0, #1
 8000b44:	4770      	bx	lr
 8000b46:	9b00      	ldr	r3, [sp, #0]
 8000b48:	681b      	ldr	r3, [r3, #0]
 8000b4a:	6443      	str	r3, [r0, #68]	@ 0x44
 8000b4c:	2000      	movs	r0, #0
 8000b4e:	4770      	bx	lr
 8000b50:	b943      	cbnz	r3, 8000b64 <_Unwind_VRS_Set+0x30>
 8000b52:	2a0f      	cmp	r2, #15
 8000b54:	d806      	bhi.n	8000b64 <_Unwind_VRS_Set+0x30>
 8000b56:	9b00      	ldr	r3, [sp, #0]
 8000b58:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	2000      	movs	r0, #0
 8000b60:	6053      	str	r3, [r2, #4]
 8000b62:	4770      	bx	lr
 8000b64:	2002      	movs	r0, #2
 8000b66:	4770      	bx	lr

08000b68 <_Unwind_SetGR>:
 8000b68:	2300      	movs	r3, #0
 8000b6a:	b510      	push	{r4, lr}
 8000b6c:	b084      	sub	sp, #16
 8000b6e:	ac03      	add	r4, sp, #12
 8000b70:	9203      	str	r2, [sp, #12]
 8000b72:	9400      	str	r4, [sp, #0]
 8000b74:	460a      	mov	r2, r1
 8000b76:	4619      	mov	r1, r3
 8000b78:	f7ff ffdc 	bl	8000b34 <_Unwind_VRS_Set>
 8000b7c:	b004      	add	sp, #16
 8000b7e:	bd10      	pop	{r4, pc}

08000b80 <__gnu_Unwind_Backtrace>:
 8000b80:	b570      	push	{r4, r5, r6, lr}
 8000b82:	f04f 36ff 	mov.w	r6, #4294967295
 8000b86:	6bd3      	ldr	r3, [r2, #60]	@ 0x3c
 8000b88:	f5ad 7d10 	sub.w	sp, sp, #576	@ 0x240
 8000b8c:	f10d 0e5c 	add.w	lr, sp, #92	@ 0x5c
 8000b90:	6413      	str	r3, [r2, #64]	@ 0x40
 8000b92:	f102 0c04 	add.w	ip, r2, #4
 8000b96:	4605      	mov	r5, r0
 8000b98:	460c      	mov	r4, r1
 8000b9a:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000b9e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000ba2:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000ba6:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000baa:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8000bae:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
 8000bb2:	e89c 000f 	ldmia.w	ip, {r0, r1, r2, r3}
 8000bb6:	9616      	str	r6, [sp, #88]	@ 0x58
 8000bb8:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
 8000bbc:	e012      	b.n	8000be4 <__gnu_Unwind_Backtrace+0x64>
 8000bbe:	210c      	movs	r1, #12
 8000bc0:	a816      	add	r0, sp, #88	@ 0x58
 8000bc2:	466a      	mov	r2, sp
 8000bc4:	f7ff ffd0 	bl	8000b68 <_Unwind_SetGR>
 8000bc8:	4621      	mov	r1, r4
 8000bca:	a816      	add	r0, sp, #88	@ 0x58
 8000bcc:	47a8      	blx	r5
 8000bce:	b978      	cbnz	r0, 8000bf0 <__gnu_Unwind_Backtrace+0x70>
 8000bd0:	4669      	mov	r1, sp
 8000bd2:	2008      	movs	r0, #8
 8000bd4:	9b04      	ldr	r3, [sp, #16]
 8000bd6:	aa16      	add	r2, sp, #88	@ 0x58
 8000bd8:	4798      	blx	r3
 8000bda:	2805      	cmp	r0, #5
 8000bdc:	4606      	mov	r6, r0
 8000bde:	d008      	beq.n	8000bf2 <__gnu_Unwind_Backtrace+0x72>
 8000be0:	2809      	cmp	r0, #9
 8000be2:	d005      	beq.n	8000bf0 <__gnu_Unwind_Backtrace+0x70>
 8000be4:	4668      	mov	r0, sp
 8000be6:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8000be8:	f7ff fdf6 	bl	80007d8 <get_eit_entry>
 8000bec:	2800      	cmp	r0, #0
 8000bee:	d0e6      	beq.n	8000bbe <__gnu_Unwind_Backtrace+0x3e>
 8000bf0:	2609      	movs	r6, #9
 8000bf2:	a816      	add	r0, sp, #88	@ 0x58
 8000bf4:	f7ff fe3c 	bl	8000870 <restore_non_core_regs>
 8000bf8:	4630      	mov	r0, r6
 8000bfa:	f50d 7d10 	add.w	sp, sp, #576	@ 0x240
 8000bfe:	bd70      	pop	{r4, r5, r6, pc}

08000c00 <__gnu_unwind_pr_common>:
 8000c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c04:	4616      	mov	r6, r2
 8000c06:	6cca      	ldr	r2, [r1, #76]	@ 0x4c
 8000c08:	460d      	mov	r5, r1
 8000c0a:	f852 1b04 	ldr.w	r1, [r2], #4
 8000c0e:	b089      	sub	sp, #36	@ 0x24
 8000c10:	f000 0c03 	and.w	ip, r0, #3
 8000c14:	9206      	str	r2, [sp, #24]
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d079      	beq.n	8000d0e <__gnu_unwind_pr_common+0x10e>
 8000c1a:	2402      	movs	r4, #2
 8000c1c:	0c0f      	lsrs	r7, r1, #16
 8000c1e:	f88d 701d 	strb.w	r7, [sp, #29]
 8000c22:	0409      	lsls	r1, r1, #16
 8000c24:	b2ff      	uxtb	r7, r7
 8000c26:	9105      	str	r1, [sp, #20]
 8000c28:	eb02 0287 	add.w	r2, r2, r7, lsl #2
 8000c2c:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 8000c2e:	f1bc 0f02 	cmp.w	ip, #2
 8000c32:	bf08      	it	eq
 8000c34:	6baa      	ldreq	r2, [r5, #56]	@ 0x38
 8000c36:	f011 0801 	ands.w	r8, r1, #1
 8000c3a:	f88d 401c 	strb.w	r4, [sp, #28]
 8000c3e:	d009      	beq.n	8000c54 <__gnu_unwind_pr_common+0x54>
 8000c40:	4630      	mov	r0, r6
 8000c42:	a905      	add	r1, sp, #20
 8000c44:	f000 fba4 	bl	8001390 <__gnu_unwind_execute>
 8000c48:	2800      	cmp	r0, #0
 8000c4a:	d156      	bne.n	8000cfa <__gnu_unwind_pr_common+0xfa>
 8000c4c:	2008      	movs	r0, #8
 8000c4e:	b009      	add	sp, #36	@ 0x24
 8000c50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000c54:	6817      	ldr	r7, [r2, #0]
 8000c56:	2f00      	cmp	r7, #0
 8000c58:	d0f2      	beq.n	8000c40 <__gnu_unwind_pr_common+0x40>
 8000c5a:	46e3      	mov	fp, ip
 8000c5c:	469a      	mov	sl, r3
 8000c5e:	f000 0108 	and.w	r1, r0, #8
 8000c62:	e9cd 1801 	strd	r1, r8, [sp, #4]
 8000c66:	f1ba 0f02 	cmp.w	sl, #2
 8000c6a:	d04c      	beq.n	8000d06 <__gnu_unwind_pr_common+0x106>
 8000c6c:	8817      	ldrh	r7, [r2, #0]
 8000c6e:	8854      	ldrh	r4, [r2, #2]
 8000c70:	f102 0904 	add.w	r9, r2, #4
 8000c74:	6caa      	ldr	r2, [r5, #72]	@ 0x48
 8000c76:	f024 0301 	bic.w	r3, r4, #1
 8000c7a:	210f      	movs	r1, #15
 8000c7c:	4630      	mov	r0, r6
 8000c7e:	eb03 0802 	add.w	r8, r3, r2
 8000c82:	f7ff ff49 	bl	8000b18 <_Unwind_GetGR>
 8000c86:	4580      	cmp	r8, r0
 8000c88:	d83b      	bhi.n	8000d02 <__gnu_unwind_pr_common+0x102>
 8000c8a:	f027 0201 	bic.w	r2, r7, #1
 8000c8e:	eb02 0308 	add.w	r3, r2, r8
 8000c92:	4283      	cmp	r3, r0
 8000c94:	bf94      	ite	ls
 8000c96:	2300      	movls	r3, #0
 8000c98:	2301      	movhi	r3, #1
 8000c9a:	0064      	lsls	r4, r4, #1
 8000c9c:	f004 0402 	and.w	r4, r4, #2
 8000ca0:	f007 0701 	and.w	r7, r7, #1
 8000ca4:	4327      	orrs	r7, r4
 8000ca6:	2f01      	cmp	r7, #1
 8000ca8:	d04e      	beq.n	8000d48 <__gnu_unwind_pr_common+0x148>
 8000caa:	2f02      	cmp	r7, #2
 8000cac:	d035      	beq.n	8000d1a <__gnu_unwind_pr_common+0x11a>
 8000cae:	bb27      	cbnz	r7, 8000cfa <__gnu_unwind_pr_common+0xfa>
 8000cb0:	f1bb 0f00 	cmp.w	fp, #0
 8000cb4:	d002      	beq.n	8000cbc <__gnu_unwind_pr_common+0xbc>
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	f040 80d4 	bne.w	8000e64 <__gnu_unwind_pr_common+0x264>
 8000cbc:	f109 0204 	add.w	r2, r9, #4
 8000cc0:	6817      	ldr	r7, [r2, #0]
 8000cc2:	2f00      	cmp	r7, #0
 8000cc4:	d1cf      	bne.n	8000c66 <__gnu_unwind_pr_common+0x66>
 8000cc6:	4630      	mov	r0, r6
 8000cc8:	a905      	add	r1, sp, #20
 8000cca:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8000cce:	f000 fb5f 	bl	8001390 <__gnu_unwind_execute>
 8000cd2:	b990      	cbnz	r0, 8000cfa <__gnu_unwind_pr_common+0xfa>
 8000cd4:	f1b8 0f00 	cmp.w	r8, #0
 8000cd8:	d0b8      	beq.n	8000c4c <__gnu_unwind_pr_common+0x4c>
 8000cda:	210f      	movs	r1, #15
 8000cdc:	4630      	mov	r0, r6
 8000cde:	f7ff ff1b 	bl	8000b18 <_Unwind_GetGR>
 8000ce2:	210e      	movs	r1, #14
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	4630      	mov	r0, r6
 8000ce8:	f7ff ff3e 	bl	8000b68 <_Unwind_SetGR>
 8000cec:	210f      	movs	r1, #15
 8000cee:	4630      	mov	r0, r6
 8000cf0:	4a6c      	ldr	r2, [pc, #432]	@ (8000ea4 <__gnu_unwind_pr_common+0x2a4>)
 8000cf2:	f7ff ff39 	bl	8000b68 <_Unwind_SetGR>
 8000cf6:	2007      	movs	r0, #7
 8000cf8:	e000      	b.n	8000cfc <__gnu_unwind_pr_common+0xfc>
 8000cfa:	2009      	movs	r0, #9
 8000cfc:	b009      	add	sp, #36	@ 0x24
 8000cfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000d02:	2300      	movs	r3, #0
 8000d04:	e7c9      	b.n	8000c9a <__gnu_unwind_pr_common+0x9a>
 8000d06:	6854      	ldr	r4, [r2, #4]
 8000d08:	f102 0908 	add.w	r9, r2, #8
 8000d0c:	e7b2      	b.n	8000c74 <__gnu_unwind_pr_common+0x74>
 8000d0e:	0209      	lsls	r1, r1, #8
 8000d10:	2403      	movs	r4, #3
 8000d12:	9105      	str	r1, [sp, #20]
 8000d14:	f88d 301d 	strb.w	r3, [sp, #29]
 8000d18:	e788      	b.n	8000c2c <__gnu_unwind_pr_common+0x2c>
 8000d1a:	f8d9 4000 	ldr.w	r4, [r9]
 8000d1e:	f024 4800 	bic.w	r8, r4, #2147483648	@ 0x80000000
 8000d22:	f1bb 0f00 	cmp.w	fp, #0
 8000d26:	d147      	bne.n	8000db8 <__gnu_unwind_pr_common+0x1b8>
 8000d28:	b12b      	cbz	r3, 8000d36 <__gnu_unwind_pr_common+0x136>
 8000d2a:	9b01      	ldr	r3, [sp, #4]
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d05c      	beq.n	8000dea <__gnu_unwind_pr_common+0x1ea>
 8000d30:	f1b8 0f00 	cmp.w	r8, #0
 8000d34:	d059      	beq.n	8000dea <__gnu_unwind_pr_common+0x1ea>
 8000d36:	2c00      	cmp	r4, #0
 8000d38:	da01      	bge.n	8000d3e <__gnu_unwind_pr_common+0x13e>
 8000d3a:	f109 0904 	add.w	r9, r9, #4
 8000d3e:	f108 0201 	add.w	r2, r8, #1
 8000d42:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8000d46:	e7bb      	b.n	8000cc0 <__gnu_unwind_pr_common+0xc0>
 8000d48:	f1bb 0f00 	cmp.w	fp, #0
 8000d4c:	d11c      	bne.n	8000d88 <__gnu_unwind_pr_common+0x188>
 8000d4e:	b1c3      	cbz	r3, 8000d82 <__gnu_unwind_pr_common+0x182>
 8000d50:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8000d54:	f8d9 2000 	ldr.w	r2, [r9]
 8000d58:	1c99      	adds	r1, r3, #2
 8000d5a:	ea4f 72d2 	mov.w	r2, r2, lsr #31
 8000d5e:	d0cc      	beq.n	8000cfa <__gnu_unwind_pr_common+0xfa>
 8000d60:	f105 0458 	add.w	r4, r5, #88	@ 0x58
 8000d64:	3301      	adds	r3, #1
 8000d66:	9404      	str	r4, [sp, #16]
 8000d68:	f000 808f 	beq.w	8000e8a <__gnu_unwind_pr_common+0x28a>
 8000d6c:	f109 0004 	add.w	r0, r9, #4
 8000d70:	f7ff fdaa 	bl	80008c8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000d74:	ab04      	add	r3, sp, #16
 8000d76:	4601      	mov	r1, r0
 8000d78:	4628      	mov	r0, r5
 8000d7a:	f3af 8000 	nop.w
 8000d7e:	2800      	cmp	r0, #0
 8000d80:	d159      	bne.n	8000e36 <__gnu_unwind_pr_common+0x236>
 8000d82:	f109 0208 	add.w	r2, r9, #8
 8000d86:	e79b      	b.n	8000cc0 <__gnu_unwind_pr_common+0xc0>
 8000d88:	210d      	movs	r1, #13
 8000d8a:	4630      	mov	r0, r6
 8000d8c:	f7ff fec4 	bl	8000b18 <_Unwind_GetGR>
 8000d90:	6a2c      	ldr	r4, [r5, #32]
 8000d92:	4284      	cmp	r4, r0
 8000d94:	d1f5      	bne.n	8000d82 <__gnu_unwind_pr_common+0x182>
 8000d96:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8000d98:	4599      	cmp	r9, r3
 8000d9a:	d1f2      	bne.n	8000d82 <__gnu_unwind_pr_common+0x182>
 8000d9c:	4648      	mov	r0, r9
 8000d9e:	f7ff fccb 	bl	8000738 <selfrel_offset31>
 8000da2:	210f      	movs	r1, #15
 8000da4:	4602      	mov	r2, r0
 8000da6:	4630      	mov	r0, r6
 8000da8:	f7ff fede 	bl	8000b68 <_Unwind_SetGR>
 8000dac:	462a      	mov	r2, r5
 8000dae:	2100      	movs	r1, #0
 8000db0:	4630      	mov	r0, r6
 8000db2:	f7ff fed9 	bl	8000b68 <_Unwind_SetGR>
 8000db6:	e79e      	b.n	8000cf6 <__gnu_unwind_pr_common+0xf6>
 8000db8:	210d      	movs	r1, #13
 8000dba:	4630      	mov	r0, r6
 8000dbc:	f7ff feac 	bl	8000b18 <_Unwind_GetGR>
 8000dc0:	6a2f      	ldr	r7, [r5, #32]
 8000dc2:	4287      	cmp	r7, r0
 8000dc4:	d1b7      	bne.n	8000d36 <__gnu_unwind_pr_common+0x136>
 8000dc6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8000dc8:	4599      	cmp	r9, r3
 8000dca:	d1b4      	bne.n	8000d36 <__gnu_unwind_pr_common+0x136>
 8000dcc:	2400      	movs	r4, #0
 8000dce:	2304      	movs	r3, #4
 8000dd0:	e9c5 430b 	strd	r4, r3, [r5, #44]	@ 0x2c
 8000dd4:	444b      	add	r3, r9
 8000dd6:	f8c5 8028 	str.w	r8, [r5, #40]	@ 0x28
 8000dda:	636b      	str	r3, [r5, #52]	@ 0x34
 8000ddc:	f8d9 3000 	ldr.w	r3, [r9]
 8000de0:	42a3      	cmp	r3, r4
 8000de2:	db59      	blt.n	8000e98 <__gnu_unwind_pr_common+0x298>
 8000de4:	2301      	movs	r3, #1
 8000de6:	9302      	str	r3, [sp, #8]
 8000de8:	e7a9      	b.n	8000d3e <__gnu_unwind_pr_common+0x13e>
 8000dea:	f105 0358 	add.w	r3, r5, #88	@ 0x58
 8000dee:	f8cd b00c 	str.w	fp, [sp, #12]
 8000df2:	2400      	movs	r4, #0
 8000df4:	46b3      	mov	fp, r6
 8000df6:	f109 0704 	add.w	r7, r9, #4
 8000dfa:	461e      	mov	r6, r3
 8000dfc:	e00b      	b.n	8000e16 <__gnu_unwind_pr_common+0x216>
 8000dfe:	4638      	mov	r0, r7
 8000e00:	9604      	str	r6, [sp, #16]
 8000e02:	f7ff fd61 	bl	80008c8 <_Unwind_decode_typeinfo_ptr.constprop.0>
 8000e06:	2200      	movs	r2, #0
 8000e08:	4601      	mov	r1, r0
 8000e0a:	ab04      	add	r3, sp, #16
 8000e0c:	4628      	mov	r0, r5
 8000e0e:	f3af 8000 	nop.w
 8000e12:	3704      	adds	r7, #4
 8000e14:	bb00      	cbnz	r0, 8000e58 <__gnu_unwind_pr_common+0x258>
 8000e16:	4544      	cmp	r4, r8
 8000e18:	f104 0401 	add.w	r4, r4, #1
 8000e1c:	d1ef      	bne.n	8000dfe <__gnu_unwind_pr_common+0x1fe>
 8000e1e:	210d      	movs	r1, #13
 8000e20:	4658      	mov	r0, fp
 8000e22:	f7ff fe79 	bl	8000b18 <_Unwind_GetGR>
 8000e26:	4602      	mov	r2, r0
 8000e28:	9b04      	ldr	r3, [sp, #16]
 8000e2a:	2006      	movs	r0, #6
 8000e2c:	e9c5 2308 	strd	r2, r3, [r5, #32]
 8000e30:	f8c5 9028 	str.w	r9, [r5, #40]	@ 0x28
 8000e34:	e762      	b.n	8000cfc <__gnu_unwind_pr_common+0xfc>
 8000e36:	4604      	mov	r4, r0
 8000e38:	210d      	movs	r1, #13
 8000e3a:	4630      	mov	r0, r6
 8000e3c:	f7ff fe6c 	bl	8000b18 <_Unwind_GetGR>
 8000e40:	9e04      	ldr	r6, [sp, #16]
 8000e42:	2c02      	cmp	r4, #2
 8000e44:	bf08      	it	eq
 8000e46:	62ee      	streq	r6, [r5, #44]	@ 0x2c
 8000e48:	6228      	str	r0, [r5, #32]
 8000e4a:	bf08      	it	eq
 8000e4c:	f105 062c 	addeq.w	r6, r5, #44	@ 0x2c
 8000e50:	2006      	movs	r0, #6
 8000e52:	e9c5 6909 	strd	r6, r9, [r5, #36]	@ 0x24
 8000e56:	e751      	b.n	8000cfc <__gnu_unwind_pr_common+0xfc>
 8000e58:	465e      	mov	r6, fp
 8000e5a:	f8d9 4000 	ldr.w	r4, [r9]
 8000e5e:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8000e62:	e768      	b.n	8000d36 <__gnu_unwind_pr_common+0x136>
 8000e64:	4648      	mov	r0, r9
 8000e66:	f7ff fc67 	bl	8000738 <selfrel_offset31>
 8000e6a:	f109 0204 	add.w	r2, r9, #4
 8000e6e:	4604      	mov	r4, r0
 8000e70:	63aa      	str	r2, [r5, #56]	@ 0x38
 8000e72:	4628      	mov	r0, r5
 8000e74:	f3af 8000 	nop.w
 8000e78:	2800      	cmp	r0, #0
 8000e7a:	f43f af3e 	beq.w	8000cfa <__gnu_unwind_pr_common+0xfa>
 8000e7e:	4622      	mov	r2, r4
 8000e80:	210f      	movs	r1, #15
 8000e82:	4630      	mov	r0, r6
 8000e84:	f7ff fe70 	bl	8000b68 <_Unwind_SetGR>
 8000e88:	e735      	b.n	8000cf6 <__gnu_unwind_pr_common+0xf6>
 8000e8a:	4630      	mov	r0, r6
 8000e8c:	210d      	movs	r1, #13
 8000e8e:	f7ff fe43 	bl	8000b18 <_Unwind_GetGR>
 8000e92:	4626      	mov	r6, r4
 8000e94:	6228      	str	r0, [r5, #32]
 8000e96:	e7db      	b.n	8000e50 <__gnu_unwind_pr_common+0x250>
 8000e98:	f108 0201 	add.w	r2, r8, #1
 8000e9c:	eb09 0082 	add.w	r0, r9, r2, lsl #2
 8000ea0:	e77d      	b.n	8000d9e <__gnu_unwind_pr_common+0x19e>
 8000ea2:	bf00      	nop
 8000ea4:	00000000 	.word	0x00000000

08000ea8 <__aeabi_unwind_cpp_pr0>:
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	e6a9      	b.n	8000c00 <__gnu_unwind_pr_common>

08000eac <__aeabi_unwind_cpp_pr1>:
 8000eac:	2301      	movs	r3, #1
 8000eae:	e6a7      	b.n	8000c00 <__gnu_unwind_pr_common>

08000eb0 <__aeabi_unwind_cpp_pr2>:
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	e6a5      	b.n	8000c00 <__gnu_unwind_pr_common>

08000eb4 <_Unwind_VRS_Pop>:
 8000eb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000eb8:	4605      	mov	r5, r0
 8000eba:	4614      	mov	r4, r2
 8000ebc:	b0c4      	sub	sp, #272	@ 0x110
 8000ebe:	2905      	cmp	r1, #5
 8000ec0:	f200 80e7 	bhi.w	8001092 <_Unwind_VRS_Pop+0x1de>
 8000ec4:	e8df f011 	tbh	[pc, r1, lsl #1]
 8000ec8:	002a0012 	.word	0x002a0012
 8000ecc:	006300e5 	.word	0x006300e5
 8000ed0:	0006008a 	.word	0x0006008a
 8000ed4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8000ed6:	2c00      	cmp	r4, #0
 8000ed8:	f040 80db 	bne.w	8001092 <_Unwind_VRS_Pop+0x1de>
 8000edc:	f853 2b04 	ldr.w	r2, [r3], #4
 8000ee0:	6442      	str	r2, [r0, #68]	@ 0x44
 8000ee2:	6383      	str	r3, [r0, #56]	@ 0x38
 8000ee4:	2000      	movs	r0, #0
 8000ee6:	b044      	add	sp, #272	@ 0x110
 8000ee8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	f040 80d0 	bne.w	8001092 <_Unwind_VRS_Pop+0x1de>
 8000ef2:	f04f 0e01 	mov.w	lr, #1
 8000ef6:	6b81      	ldr	r1, [r0, #56]	@ 0x38
 8000ef8:	1d2a      	adds	r2, r5, #4
 8000efa:	b2a0      	uxth	r0, r4
 8000efc:	fa0e fc03 	lsl.w	ip, lr, r3
 8000f00:	ea1c 0f00 	tst.w	ip, r0
 8000f04:	bf1c      	itt	ne
 8000f06:	f851 6b04 	ldrne.w	r6, [r1], #4
 8000f0a:	f842 6023 	strne.w	r6, [r2, r3, lsl #2]
 8000f0e:	3301      	adds	r3, #1
 8000f10:	2b10      	cmp	r3, #16
 8000f12:	d1f3      	bne.n	8000efc <_Unwind_VRS_Pop+0x48>
 8000f14:	04a0      	lsls	r0, r4, #18
 8000f16:	d4e5      	bmi.n	8000ee4 <_Unwind_VRS_Pop+0x30>
 8000f18:	63a9      	str	r1, [r5, #56]	@ 0x38
 8000f1a:	e7e3      	b.n	8000ee4 <_Unwind_VRS_Pop+0x30>
 8000f1c:	2b01      	cmp	r3, #1
 8000f1e:	ea4f 4714 	mov.w	r7, r4, lsr #16
 8000f22:	b2a4      	uxth	r4, r4
 8000f24:	d07e      	beq.n	8001024 <_Unwind_VRS_Pop+0x170>
 8000f26:	2b05      	cmp	r3, #5
 8000f28:	f040 80b3 	bne.w	8001092 <_Unwind_VRS_Pop+0x1de>
 8000f2c:	eb07 0804 	add.w	r8, r7, r4
 8000f30:	f1b8 0f20 	cmp.w	r8, #32
 8000f34:	f200 80ad 	bhi.w	8001092 <_Unwind_VRS_Pop+0x1de>
 8000f38:	2f0f      	cmp	r7, #15
 8000f3a:	f240 80ac 	bls.w	8001096 <_Unwind_VRS_Pop+0x1e2>
 8000f3e:	2c00      	cmp	r4, #0
 8000f40:	d0d0      	beq.n	8000ee4 <_Unwind_VRS_Pop+0x30>
 8000f42:	6802      	ldr	r2, [r0, #0]
 8000f44:	0751      	lsls	r1, r2, #29
 8000f46:	f100 8101 	bmi.w	800114c <_Unwind_VRS_Pop+0x298>
 8000f4a:	9301      	str	r3, [sp, #4]
 8000f4c:	ae02      	add	r6, sp, #8
 8000f4e:	4630      	mov	r0, r6
 8000f50:	f000 f93c 	bl	80011cc <__gnu_Unwind_Save_VFP_D_16_to_31>
 8000f54:	0064      	lsls	r4, r4, #1
 8000f56:	f1a7 0210 	sub.w	r2, r7, #16
 8000f5a:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8000f5c:	9b01      	ldr	r3, [sp, #4]
 8000f5e:	1e60      	subs	r0, r4, #1
 8000f60:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 8000f64:	3001      	adds	r0, #1
 8000f66:	3a04      	subs	r2, #4
 8000f68:	eb01 0080 	add.w	r0, r1, r0, lsl #2
 8000f6c:	f851 4b04 	ldr.w	r4, [r1], #4
 8000f70:	4281      	cmp	r1, r0
 8000f72:	f842 4f04 	str.w	r4, [r2, #4]!
 8000f76:	d1f9      	bne.n	8000f6c <_Unwind_VRS_Pop+0xb8>
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	f000 80cf 	beq.w	800111c <_Unwind_VRS_Pop+0x268>
 8000f7e:	2f0f      	cmp	r7, #15
 8000f80:	63a9      	str	r1, [r5, #56]	@ 0x38
 8000f82:	f240 80eb 	bls.w	800115c <_Unwind_VRS_Pop+0x2a8>
 8000f86:	4630      	mov	r0, r6
 8000f88:	f000 f91c 	bl	80011c4 <__gnu_Unwind_Restore_VFP_D_16_to_31>
 8000f8c:	e7aa      	b.n	8000ee4 <_Unwind_VRS_Pop+0x30>
 8000f8e:	2b03      	cmp	r3, #3
 8000f90:	d17f      	bne.n	8001092 <_Unwind_VRS_Pop+0x1de>
 8000f92:	fa1f f884 	uxth.w	r8, r4
 8000f96:	eb08 4314 	add.w	r3, r8, r4, lsr #16
 8000f9a:	2b10      	cmp	r3, #16
 8000f9c:	ea4f 4414 	mov.w	r4, r4, lsr #16
 8000fa0:	d877      	bhi.n	8001092 <_Unwind_VRS_Pop+0x1de>
 8000fa2:	6803      	ldr	r3, [r0, #0]
 8000fa4:	071e      	lsls	r6, r3, #28
 8000fa6:	f100 80a5 	bmi.w	80010f4 <_Unwind_VRS_Pop+0x240>
 8000faa:	ae22      	add	r6, sp, #136	@ 0x88
 8000fac:	4630      	mov	r0, r6
 8000fae:	f000 f933 	bl	8001218 <__gnu_Unwind_Save_WMMXD>
 8000fb2:	ea4f 0148 	mov.w	r1, r8, lsl #1
 8000fb6:	6baf      	ldr	r7, [r5, #56]	@ 0x38
 8000fb8:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
 8000fbc:	1e4b      	subs	r3, r1, #1
 8000fbe:	b141      	cbz	r1, 8000fd2 <_Unwind_VRS_Pop+0x11e>
 8000fc0:	1ab8      	subs	r0, r7, r2
 8000fc2:	5811      	ldr	r1, [r2, r0]
 8000fc4:	3b01      	subs	r3, #1
 8000fc6:	1c5c      	adds	r4, r3, #1
 8000fc8:	f842 1b04 	str.w	r1, [r2], #4
 8000fcc:	d1f9      	bne.n	8000fc2 <_Unwind_VRS_Pop+0x10e>
 8000fce:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	63af      	str	r7, [r5, #56]	@ 0x38
 8000fd6:	f000 f8fd 	bl	80011d4 <__gnu_Unwind_Restore_WMMXD>
 8000fda:	e783      	b.n	8000ee4 <_Unwind_VRS_Pop+0x30>
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d158      	bne.n	8001092 <_Unwind_VRS_Pop+0x1de>
 8000fe0:	2c10      	cmp	r4, #16
 8000fe2:	d856      	bhi.n	8001092 <_Unwind_VRS_Pop+0x1de>
 8000fe4:	6803      	ldr	r3, [r0, #0]
 8000fe6:	06d8      	lsls	r0, r3, #27
 8000fe8:	d47c      	bmi.n	80010e4 <_Unwind_VRS_Pop+0x230>
 8000fea:	ae22      	add	r6, sp, #136	@ 0x88
 8000fec:	4630      	mov	r0, r6
 8000fee:	f000 f93f 	bl	8001270 <__gnu_Unwind_Save_WMMXC>
 8000ff2:	2701      	movs	r7, #1
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	4630      	mov	r0, r6
 8000ff8:	6ba9      	ldr	r1, [r5, #56]	@ 0x38
 8000ffa:	fa07 f203 	lsl.w	r2, r7, r3
 8000ffe:	4222      	tst	r2, r4
 8001000:	f103 0301 	add.w	r3, r3, #1
 8001004:	d005      	beq.n	8001012 <_Unwind_VRS_Pop+0x15e>
 8001006:	460a      	mov	r2, r1
 8001008:	f852 cb04 	ldr.w	ip, [r2], #4
 800100c:	4611      	mov	r1, r2
 800100e:	f8c0 c000 	str.w	ip, [r0]
 8001012:	2b04      	cmp	r3, #4
 8001014:	f100 0004 	add.w	r0, r0, #4
 8001018:	d1ef      	bne.n	8000ffa <_Unwind_VRS_Pop+0x146>
 800101a:	4630      	mov	r0, r6
 800101c:	63a9      	str	r1, [r5, #56]	@ 0x38
 800101e:	f000 f91d 	bl	800125c <__gnu_Unwind_Restore_WMMXC>
 8001022:	e75f      	b.n	8000ee4 <_Unwind_VRS_Pop+0x30>
 8001024:	193a      	adds	r2, r7, r4
 8001026:	2a10      	cmp	r2, #16
 8001028:	d833      	bhi.n	8001092 <_Unwind_VRS_Pop+0x1de>
 800102a:	2f10      	cmp	r7, #16
 800102c:	d031      	beq.n	8001092 <_Unwind_VRS_Pop+0x1de>
 800102e:	6802      	ldr	r2, [r0, #0]
 8001030:	07d1      	lsls	r1, r2, #31
 8001032:	d508      	bpl.n	8001046 <_Unwind_VRS_Pop+0x192>
 8001034:	4628      	mov	r0, r5
 8001036:	f022 0203 	bic.w	r2, r2, #3
 800103a:	f840 2b50 	str.w	r2, [r0], #80
 800103e:	9301      	str	r3, [sp, #4]
 8001040:	f000 f8b4 	bl	80011ac <__gnu_Unwind_Save_VFP>
 8001044:	9b01      	ldr	r3, [sp, #4]
 8001046:	ae22      	add	r6, sp, #136	@ 0x88
 8001048:	4630      	mov	r0, r6
 800104a:	9301      	str	r3, [sp, #4]
 800104c:	f000 f8ae 	bl	80011ac <__gnu_Unwind_Save_VFP>
 8001050:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8001052:	9b01      	ldr	r3, [sp, #4]
 8001054:	2c00      	cmp	r4, #0
 8001056:	d062      	beq.n	800111e <_Unwind_VRS_Pop+0x26a>
 8001058:	f04f 0800 	mov.w	r8, #0
 800105c:	0061      	lsls	r1, r4, #1
 800105e:	3901      	subs	r1, #1
 8001060:	eb06 02c7 	add.w	r2, r6, r7, lsl #3
 8001064:	3101      	adds	r1, #1
 8001066:	3a04      	subs	r2, #4
 8001068:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800106c:	f850 4b04 	ldr.w	r4, [r0], #4
 8001070:	4288      	cmp	r0, r1
 8001072:	f842 4f04 	str.w	r4, [r2, #4]!
 8001076:	d1f9      	bne.n	800106c <_Unwind_VRS_Pop+0x1b8>
 8001078:	f1b8 0f00 	cmp.w	r8, #0
 800107c:	d142      	bne.n	8001104 <_Unwind_VRS_Pop+0x250>
 800107e:	2b01      	cmp	r3, #1
 8001080:	d04d      	beq.n	800111e <_Unwind_VRS_Pop+0x26a>
 8001082:	2f0f      	cmp	r7, #15
 8001084:	63a8      	str	r0, [r5, #56]	@ 0x38
 8001086:	f63f af2d 	bhi.w	8000ee4 <_Unwind_VRS_Pop+0x30>
 800108a:	4630      	mov	r0, r6
 800108c:	f000 f892 	bl	80011b4 <__gnu_Unwind_Restore_VFP_D>
 8001090:	e728      	b.n	8000ee4 <_Unwind_VRS_Pop+0x30>
 8001092:	2002      	movs	r0, #2
 8001094:	e727      	b.n	8000ee6 <_Unwind_VRS_Pop+0x32>
 8001096:	6802      	ldr	r2, [r0, #0]
 8001098:	f1b8 0f10 	cmp.w	r8, #16
 800109c:	f002 0101 	and.w	r1, r2, #1
 80010a0:	d943      	bls.n	800112a <_Unwind_VRS_Pop+0x276>
 80010a2:	b151      	cbz	r1, 80010ba <_Unwind_VRS_Pop+0x206>
 80010a4:	f022 0201 	bic.w	r2, r2, #1
 80010a8:	f042 0202 	orr.w	r2, r2, #2
 80010ac:	f840 2b50 	str.w	r2, [r0], #80
 80010b0:	9301      	str	r3, [sp, #4]
 80010b2:	f000 f883 	bl	80011bc <__gnu_Unwind_Save_VFP_D>
 80010b6:	682a      	ldr	r2, [r5, #0]
 80010b8:	9b01      	ldr	r3, [sp, #4]
 80010ba:	9301      	str	r3, [sp, #4]
 80010bc:	0753      	lsls	r3, r2, #29
 80010be:	d451      	bmi.n	8001164 <_Unwind_VRS_Pop+0x2b0>
 80010c0:	ae22      	add	r6, sp, #136	@ 0x88
 80010c2:	4630      	mov	r0, r6
 80010c4:	f000 f87a 	bl	80011bc <__gnu_Unwind_Save_VFP_D>
 80010c8:	a802      	add	r0, sp, #8
 80010ca:	f000 f87f 	bl	80011cc <__gnu_Unwind_Save_VFP_D_16_to_31>
 80010ce:	f1c7 0210 	rsb	r2, r7, #16
 80010d2:	0051      	lsls	r1, r2, #1
 80010d4:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 80010d6:	9b01      	ldr	r3, [sp, #4]
 80010d8:	f1a8 0810 	sub.w	r8, r8, #16
 80010dc:	3901      	subs	r1, #1
 80010de:	eb06 02c7 	add.w	r2, r6, r7, lsl #3
 80010e2:	e7bf      	b.n	8001064 <_Unwind_VRS_Pop+0x1b0>
 80010e4:	f023 0310 	bic.w	r3, r3, #16
 80010e8:	602b      	str	r3, [r5, #0]
 80010ea:	f505 70ec 	add.w	r0, r5, #472	@ 0x1d8
 80010ee:	f000 f8bf 	bl	8001270 <__gnu_Unwind_Save_WMMXC>
 80010f2:	e77a      	b.n	8000fea <_Unwind_VRS_Pop+0x136>
 80010f4:	f023 0308 	bic.w	r3, r3, #8
 80010f8:	6003      	str	r3, [r0, #0]
 80010fa:	f500 70ac 	add.w	r0, r0, #344	@ 0x158
 80010fe:	f000 f88b 	bl	8001218 <__gnu_Unwind_Save_WMMXD>
 8001102:	e752      	b.n	8000faa <_Unwind_VRS_Pop+0xf6>
 8001104:	2f10      	cmp	r7, #16
 8001106:	463a      	mov	r2, r7
 8001108:	bf38      	it	cc
 800110a:	2210      	movcc	r2, #16
 800110c:	ea4f 0048 	mov.w	r0, r8, lsl #1
 8001110:	ae02      	add	r6, sp, #8
 8001112:	3a10      	subs	r2, #16
 8001114:	3801      	subs	r0, #1
 8001116:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800111a:	e723      	b.n	8000f64 <_Unwind_VRS_Pop+0xb0>
 800111c:	ae22      	add	r6, sp, #136	@ 0x88
 800111e:	1d03      	adds	r3, r0, #4
 8001120:	63ab      	str	r3, [r5, #56]	@ 0x38
 8001122:	4630      	mov	r0, r6
 8001124:	f000 f83e 	bl	80011a4 <__gnu_Unwind_Restore_VFP>
 8001128:	e6dc      	b.n	8000ee4 <_Unwind_VRS_Pop+0x30>
 800112a:	bb19      	cbnz	r1, 8001174 <_Unwind_VRS_Pop+0x2c0>
 800112c:	ae22      	add	r6, sp, #136	@ 0x88
 800112e:	4630      	mov	r0, r6
 8001130:	9301      	str	r3, [sp, #4]
 8001132:	f000 f843 	bl	80011bc <__gnu_Unwind_Save_VFP_D>
 8001136:	6ba8      	ldr	r0, [r5, #56]	@ 0x38
 8001138:	2c00      	cmp	r4, #0
 800113a:	d0a6      	beq.n	800108a <_Unwind_VRS_Pop+0x1d6>
 800113c:	0061      	lsls	r1, r4, #1
 800113e:	f04f 0800 	mov.w	r8, #0
 8001142:	9b01      	ldr	r3, [sp, #4]
 8001144:	3901      	subs	r1, #1
 8001146:	eb06 02c7 	add.w	r2, r6, r7, lsl #3
 800114a:	e78b      	b.n	8001064 <_Unwind_VRS_Pop+0x1b0>
 800114c:	f022 0204 	bic.w	r2, r2, #4
 8001150:	f840 2bd8 	str.w	r2, [r0], #216
 8001154:	9301      	str	r3, [sp, #4]
 8001156:	f000 f839 	bl	80011cc <__gnu_Unwind_Save_VFP_D_16_to_31>
 800115a:	e6f7      	b.n	8000f4c <_Unwind_VRS_Pop+0x98>
 800115c:	a822      	add	r0, sp, #136	@ 0x88
 800115e:	f000 f829 	bl	80011b4 <__gnu_Unwind_Restore_VFP_D>
 8001162:	e710      	b.n	8000f86 <_Unwind_VRS_Pop+0xd2>
 8001164:	4628      	mov	r0, r5
 8001166:	f022 0204 	bic.w	r2, r2, #4
 800116a:	f840 2bd8 	str.w	r2, [r0], #216
 800116e:	f000 f82d 	bl	80011cc <__gnu_Unwind_Save_VFP_D_16_to_31>
 8001172:	e7a5      	b.n	80010c0 <_Unwind_VRS_Pop+0x20c>
 8001174:	4628      	mov	r0, r5
 8001176:	f022 0201 	bic.w	r2, r2, #1
 800117a:	f042 0202 	orr.w	r2, r2, #2
 800117e:	f840 2b50 	str.w	r2, [r0], #80
 8001182:	9301      	str	r3, [sp, #4]
 8001184:	f000 f81a 	bl	80011bc <__gnu_Unwind_Save_VFP_D>
 8001188:	9b01      	ldr	r3, [sp, #4]
 800118a:	e7cf      	b.n	800112c <_Unwind_VRS_Pop+0x278>

0800118c <__restore_core_regs>:
 800118c:	f100 0134 	add.w	r1, r0, #52	@ 0x34
 8001190:	e891 0038 	ldmia.w	r1, {r3, r4, r5}
 8001194:	469c      	mov	ip, r3
 8001196:	46a6      	mov	lr, r4
 8001198:	f84c 5d04 	str.w	r5, [ip, #-4]!
 800119c:	e890 0fff 	ldmia.w	r0, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp}
 80011a0:	46e5      	mov	sp, ip
 80011a2:	bd00      	pop	{pc}

080011a4 <__gnu_Unwind_Restore_VFP>:
 80011a4:	ec90 0b21 	fldmiax	r0, {d0-d15}	@ Deprecated
 80011a8:	4770      	bx	lr
 80011aa:	bf00      	nop

080011ac <__gnu_Unwind_Save_VFP>:
 80011ac:	ec80 0b21 	fstmiax	r0, {d0-d15}	@ Deprecated
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop

080011b4 <__gnu_Unwind_Restore_VFP_D>:
 80011b4:	ec90 0b20 	vldmia	r0, {d0-d15}
 80011b8:	4770      	bx	lr
 80011ba:	bf00      	nop

080011bc <__gnu_Unwind_Save_VFP_D>:
 80011bc:	ec80 0b20 	vstmia	r0, {d0-d15}
 80011c0:	4770      	bx	lr
 80011c2:	bf00      	nop

080011c4 <__gnu_Unwind_Restore_VFP_D_16_to_31>:
 80011c4:	ecd0 0b20 	vldmia	r0, {d16-d31}
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop

080011cc <__gnu_Unwind_Save_VFP_D_16_to_31>:
 80011cc:	ecc0 0b20 	vstmia	r0, {d16-d31}
 80011d0:	4770      	bx	lr
 80011d2:	bf00      	nop

080011d4 <__gnu_Unwind_Restore_WMMXD>:
 80011d4:	ecf0 0102 	ldfe	f0, [r0], #8
 80011d8:	ecf0 1102 	ldfe	f1, [r0], #8
 80011dc:	ecf0 2102 	ldfe	f2, [r0], #8
 80011e0:	ecf0 3102 	ldfe	f3, [r0], #8
 80011e4:	ecf0 4102 	ldfe	f4, [r0], #8
 80011e8:	ecf0 5102 	ldfe	f5, [r0], #8
 80011ec:	ecf0 6102 	ldfe	f6, [r0], #8
 80011f0:	ecf0 7102 	ldfe	f7, [r0], #8
 80011f4:	ecf0 8102 	ldfp	f0, [r0], #8
 80011f8:	ecf0 9102 	ldfp	f1, [r0], #8
 80011fc:	ecf0 a102 	ldfp	f2, [r0], #8
 8001200:	ecf0 b102 	ldfp	f3, [r0], #8
 8001204:	ecf0 c102 	ldfp	f4, [r0], #8
 8001208:	ecf0 d102 	ldfp	f5, [r0], #8
 800120c:	ecf0 e102 	ldfp	f6, [r0], #8
 8001210:	ecf0 f102 	ldfp	f7, [r0], #8
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop

08001218 <__gnu_Unwind_Save_WMMXD>:
 8001218:	ece0 0102 	stfe	f0, [r0], #8
 800121c:	ece0 1102 	stfe	f1, [r0], #8
 8001220:	ece0 2102 	stfe	f2, [r0], #8
 8001224:	ece0 3102 	stfe	f3, [r0], #8
 8001228:	ece0 4102 	stfe	f4, [r0], #8
 800122c:	ece0 5102 	stfe	f5, [r0], #8
 8001230:	ece0 6102 	stfe	f6, [r0], #8
 8001234:	ece0 7102 	stfe	f7, [r0], #8
 8001238:	ece0 8102 	stfp	f0, [r0], #8
 800123c:	ece0 9102 	stfp	f1, [r0], #8
 8001240:	ece0 a102 	stfp	f2, [r0], #8
 8001244:	ece0 b102 	stfp	f3, [r0], #8
 8001248:	ece0 c102 	stfp	f4, [r0], #8
 800124c:	ece0 d102 	stfp	f5, [r0], #8
 8001250:	ece0 e102 	stfp	f6, [r0], #8
 8001254:	ece0 f102 	stfp	f7, [r0], #8
 8001258:	4770      	bx	lr
 800125a:	bf00      	nop

0800125c <__gnu_Unwind_Restore_WMMXC>:
 800125c:	fcb0 8101 	ldc2	1, cr8, [r0], #4
 8001260:	fcb0 9101 	ldc2	1, cr9, [r0], #4
 8001264:	fcb0 a101 	ldc2	1, cr10, [r0], #4
 8001268:	fcb0 b101 	ldc2	1, cr11, [r0], #4
 800126c:	4770      	bx	lr
 800126e:	bf00      	nop

08001270 <__gnu_Unwind_Save_WMMXC>:
 8001270:	fca0 8101 	stc2	1, cr8, [r0], #4
 8001274:	fca0 9101 	stc2	1, cr9, [r0], #4
 8001278:	fca0 a101 	stc2	1, cr10, [r0], #4
 800127c:	fca0 b101 	stc2	1, cr11, [r0], #4
 8001280:	4770      	bx	lr
 8001282:	bf00      	nop

08001284 <_Unwind_RaiseException>:
 8001284:	46ec      	mov	ip, sp
 8001286:	b500      	push	{lr}
 8001288:	e92d 5000 	stmdb	sp!, {ip, lr}
 800128c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001290:	f04f 0300 	mov.w	r3, #0
 8001294:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001298:	a901      	add	r1, sp, #4
 800129a:	f7ff fbb1 	bl	8000a00 <__gnu_Unwind_RaiseException>
 800129e:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80012a2:	b012      	add	sp, #72	@ 0x48
 80012a4:	4770      	bx	lr
 80012a6:	bf00      	nop

080012a8 <_Unwind_Resume>:
 80012a8:	46ec      	mov	ip, sp
 80012aa:	b500      	push	{lr}
 80012ac:	e92d 5000 	stmdb	sp!, {ip, lr}
 80012b0:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80012b4:	f04f 0300 	mov.w	r3, #0
 80012b8:	e92d 000c 	stmdb	sp!, {r2, r3}
 80012bc:	a901      	add	r1, sp, #4
 80012be:	f7ff fbdd 	bl	8000a7c <__gnu_Unwind_Resume>
 80012c2:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80012c6:	b012      	add	sp, #72	@ 0x48
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop

080012cc <_Unwind_Resume_or_Rethrow>:
 80012cc:	46ec      	mov	ip, sp
 80012ce:	b500      	push	{lr}
 80012d0:	e92d 5000 	stmdb	sp!, {ip, lr}
 80012d4:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	e92d 000c 	stmdb	sp!, {r2, r3}
 80012e0:	a901      	add	r1, sp, #4
 80012e2:	f7ff fbed 	bl	8000ac0 <__gnu_Unwind_Resume_or_Rethrow>
 80012e6:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 80012ea:	b012      	add	sp, #72	@ 0x48
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop

080012f0 <_Unwind_ForcedUnwind>:
 80012f0:	46ec      	mov	ip, sp
 80012f2:	b500      	push	{lr}
 80012f4:	e92d 5000 	stmdb	sp!, {ip, lr}
 80012f8:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 80012fc:	f04f 0300 	mov.w	r3, #0
 8001300:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001304:	ab01      	add	r3, sp, #4
 8001306:	f7ff fbaf 	bl	8000a68 <__gnu_Unwind_ForcedUnwind>
 800130a:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 800130e:	b012      	add	sp, #72	@ 0x48
 8001310:	4770      	bx	lr
 8001312:	bf00      	nop

08001314 <_Unwind_Backtrace>:
 8001314:	46ec      	mov	ip, sp
 8001316:	b500      	push	{lr}
 8001318:	e92d 5000 	stmdb	sp!, {ip, lr}
 800131c:	e92d 1fff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, fp, ip}
 8001320:	f04f 0300 	mov.w	r3, #0
 8001324:	e92d 000c 	stmdb	sp!, {r2, r3}
 8001328:	aa01      	add	r2, sp, #4
 800132a:	f7ff fc29 	bl	8000b80 <__gnu_Unwind_Backtrace>
 800132e:	f8dd e040 	ldr.w	lr, [sp, #64]	@ 0x40
 8001332:	b012      	add	sp, #72	@ 0x48
 8001334:	4770      	bx	lr
 8001336:	bf00      	nop

08001338 <next_unwind_byte>:
 8001338:	7a02      	ldrb	r2, [r0, #8]
 800133a:	4603      	mov	r3, r0
 800133c:	b97a      	cbnz	r2, 800135e <next_unwind_byte+0x26>
 800133e:	7a42      	ldrb	r2, [r0, #9]
 8001340:	b1a2      	cbz	r2, 800136c <next_unwind_byte+0x34>
 8001342:	f04f 0c03 	mov.w	ip, #3
 8001346:	6841      	ldr	r1, [r0, #4]
 8001348:	3a01      	subs	r2, #1
 800134a:	7242      	strb	r2, [r0, #9]
 800134c:	6808      	ldr	r0, [r1, #0]
 800134e:	1d0a      	adds	r2, r1, #4
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	0202      	lsls	r2, r0, #8
 8001354:	f883 c008 	strb.w	ip, [r3, #8]
 8001358:	0e00      	lsrs	r0, r0, #24
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	4770      	bx	lr
 800135e:	6800      	ldr	r0, [r0, #0]
 8001360:	3a01      	subs	r2, #1
 8001362:	721a      	strb	r2, [r3, #8]
 8001364:	0202      	lsls	r2, r0, #8
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	0e00      	lsrs	r0, r0, #24
 800136a:	4770      	bx	lr
 800136c:	20b0      	movs	r0, #176	@ 0xb0
 800136e:	4770      	bx	lr

08001370 <_Unwind_GetGR.constprop.0>:
 8001370:	2300      	movs	r3, #0
 8001372:	b500      	push	{lr}
 8001374:	b085      	sub	sp, #20
 8001376:	a903      	add	r1, sp, #12
 8001378:	9100      	str	r1, [sp, #0]
 800137a:	220c      	movs	r2, #12
 800137c:	4619      	mov	r1, r3
 800137e:	f7ff fbb1 	bl	8000ae4 <_Unwind_VRS_Get>
 8001382:	9803      	ldr	r0, [sp, #12]
 8001384:	b005      	add	sp, #20
 8001386:	f85d fb04 	ldr.w	pc, [sp], #4
 800138a:	bf00      	nop

0800138c <unwind_UCB_from_context>:
 800138c:	e7f0      	b.n	8001370 <_Unwind_GetGR.constprop.0>
 800138e:	bf00      	nop

08001390 <__gnu_unwind_execute>:
 8001390:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8001394:	f04f 0800 	mov.w	r8, #0
 8001398:	4606      	mov	r6, r0
 800139a:	460d      	mov	r5, r1
 800139c:	b085      	sub	sp, #20
 800139e:	4628      	mov	r0, r5
 80013a0:	f7ff ffca 	bl	8001338 <next_unwind_byte>
 80013a4:	28b0      	cmp	r0, #176	@ 0xb0
 80013a6:	4604      	mov	r4, r0
 80013a8:	f000 8112 	beq.w	80015d0 <__gnu_unwind_execute+0x240>
 80013ac:	0607      	lsls	r7, r0, #24
 80013ae:	d55c      	bpl.n	800146a <__gnu_unwind_execute+0xda>
 80013b0:	f000 03f0 	and.w	r3, r0, #240	@ 0xf0
 80013b4:	2ba0      	cmp	r3, #160	@ 0xa0
 80013b6:	d01a      	beq.n	80013ee <__gnu_unwind_execute+0x5e>
 80013b8:	d830      	bhi.n	800141c <__gnu_unwind_execute+0x8c>
 80013ba:	2b80      	cmp	r3, #128	@ 0x80
 80013bc:	f000 8083 	beq.w	80014c6 <__gnu_unwind_execute+0x136>
 80013c0:	2b90      	cmp	r3, #144	@ 0x90
 80013c2:	d127      	bne.n	8001414 <__gnu_unwind_execute+0x84>
 80013c4:	f000 030d 	and.w	r3, r0, #13
 80013c8:	2b0d      	cmp	r3, #13
 80013ca:	d023      	beq.n	8001414 <__gnu_unwind_execute+0x84>
 80013cc:	2300      	movs	r3, #0
 80013ce:	af02      	add	r7, sp, #8
 80013d0:	4619      	mov	r1, r3
 80013d2:	f000 020f 	and.w	r2, r0, #15
 80013d6:	9700      	str	r7, [sp, #0]
 80013d8:	4630      	mov	r0, r6
 80013da:	f7ff fb83 	bl	8000ae4 <_Unwind_VRS_Get>
 80013de:	2300      	movs	r3, #0
 80013e0:	220d      	movs	r2, #13
 80013e2:	4619      	mov	r1, r3
 80013e4:	4630      	mov	r0, r6
 80013e6:	9700      	str	r7, [sp, #0]
 80013e8:	f7ff fba4 	bl	8000b34 <_Unwind_VRS_Set>
 80013ec:	e7d7      	b.n	800139e <__gnu_unwind_execute+0xe>
 80013ee:	43c3      	mvns	r3, r0
 80013f0:	f44f 627f 	mov.w	r2, #4080	@ 0xff0
 80013f4:	f003 0307 	and.w	r3, r3, #7
 80013f8:	411a      	asrs	r2, r3
 80013fa:	0701      	lsls	r1, r0, #28
 80013fc:	f402 627f 	and.w	r2, r2, #4080	@ 0xff0
 8001400:	d501      	bpl.n	8001406 <__gnu_unwind_execute+0x76>
 8001402:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001406:	2300      	movs	r3, #0
 8001408:	4630      	mov	r0, r6
 800140a:	4619      	mov	r1, r3
 800140c:	f7ff fd52 	bl	8000eb4 <_Unwind_VRS_Pop>
 8001410:	2800      	cmp	r0, #0
 8001412:	d0c4      	beq.n	800139e <__gnu_unwind_execute+0xe>
 8001414:	2009      	movs	r0, #9
 8001416:	b005      	add	sp, #20
 8001418:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800141c:	2bb0      	cmp	r3, #176	@ 0xb0
 800141e:	d069      	beq.n	80014f4 <__gnu_unwind_execute+0x164>
 8001420:	2bc0      	cmp	r3, #192	@ 0xc0
 8001422:	d13e      	bne.n	80014a2 <__gnu_unwind_execute+0x112>
 8001424:	28c6      	cmp	r0, #198	@ 0xc6
 8001426:	f000 80bf 	beq.w	80015a8 <__gnu_unwind_execute+0x218>
 800142a:	28c7      	cmp	r0, #199	@ 0xc7
 800142c:	f000 80d5 	beq.w	80015da <__gnu_unwind_execute+0x24a>
 8001430:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 8001434:	2bc0      	cmp	r3, #192	@ 0xc0
 8001436:	f000 80e2 	beq.w	80015fe <__gnu_unwind_execute+0x26e>
 800143a:	28c8      	cmp	r0, #200	@ 0xc8
 800143c:	f000 80ed 	beq.w	800161a <__gnu_unwind_execute+0x28a>
 8001440:	28c9      	cmp	r0, #201	@ 0xc9
 8001442:	d1e7      	bne.n	8001414 <__gnu_unwind_execute+0x84>
 8001444:	4628      	mov	r0, r5
 8001446:	f7ff ff77 	bl	8001338 <next_unwind_byte>
 800144a:	2305      	movs	r3, #5
 800144c:	2101      	movs	r1, #1
 800144e:	4604      	mov	r4, r0
 8001450:	0322      	lsls	r2, r4, #12
 8001452:	f004 040f 	and.w	r4, r4, #15
 8001456:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 800145a:	440c      	add	r4, r1
 800145c:	4630      	mov	r0, r6
 800145e:	4322      	orrs	r2, r4
 8001460:	f7ff fd28 	bl	8000eb4 <_Unwind_VRS_Pop>
 8001464:	2800      	cmp	r0, #0
 8001466:	d09a      	beq.n	800139e <__gnu_unwind_execute+0xe>
 8001468:	e7d4      	b.n	8001414 <__gnu_unwind_execute+0x84>
 800146a:	0083      	lsls	r3, r0, #2
 800146c:	b2db      	uxtb	r3, r3
 800146e:	1d1f      	adds	r7, r3, #4
 8001470:	2300      	movs	r3, #0
 8001472:	f10d 0908 	add.w	r9, sp, #8
 8001476:	4619      	mov	r1, r3
 8001478:	220d      	movs	r2, #13
 800147a:	4630      	mov	r0, r6
 800147c:	f8cd 9000 	str.w	r9, [sp]
 8001480:	f7ff fb30 	bl	8000ae4 <_Unwind_VRS_Get>
 8001484:	9b02      	ldr	r3, [sp, #8]
 8001486:	0660      	lsls	r0, r4, #25
 8001488:	bf4c      	ite	mi
 800148a:	1bdf      	submi	r7, r3, r7
 800148c:	18ff      	addpl	r7, r7, r3
 800148e:	2300      	movs	r3, #0
 8001490:	220d      	movs	r2, #13
 8001492:	4630      	mov	r0, r6
 8001494:	4619      	mov	r1, r3
 8001496:	f8cd 9000 	str.w	r9, [sp]
 800149a:	9702      	str	r7, [sp, #8]
 800149c:	f7ff fb4a 	bl	8000b34 <_Unwind_VRS_Set>
 80014a0:	e77d      	b.n	800139e <__gnu_unwind_execute+0xe>
 80014a2:	f000 03f8 	and.w	r3, r0, #248	@ 0xf8
 80014a6:	2bd0      	cmp	r3, #208	@ 0xd0
 80014a8:	d1b4      	bne.n	8001414 <__gnu_unwind_execute+0x84>
 80014aa:	f000 0207 	and.w	r2, r0, #7
 80014ae:	3201      	adds	r2, #1
 80014b0:	2305      	movs	r3, #5
 80014b2:	2101      	movs	r1, #1
 80014b4:	4630      	mov	r0, r6
 80014b6:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 80014ba:	f7ff fcfb 	bl	8000eb4 <_Unwind_VRS_Pop>
 80014be:	2800      	cmp	r0, #0
 80014c0:	f43f af6d 	beq.w	800139e <__gnu_unwind_execute+0xe>
 80014c4:	e7a6      	b.n	8001414 <__gnu_unwind_execute+0x84>
 80014c6:	4628      	mov	r0, r5
 80014c8:	f7ff ff36 	bl	8001338 <next_unwind_byte>
 80014cc:	0224      	lsls	r4, r4, #8
 80014ce:	4320      	orrs	r0, r4
 80014d0:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80014d4:	d09e      	beq.n	8001414 <__gnu_unwind_execute+0x84>
 80014d6:	2300      	movs	r3, #0
 80014d8:	0104      	lsls	r4, r0, #4
 80014da:	4619      	mov	r1, r3
 80014dc:	4630      	mov	r0, r6
 80014de:	b2a2      	uxth	r2, r4
 80014e0:	f7ff fce8 	bl	8000eb4 <_Unwind_VRS_Pop>
 80014e4:	2800      	cmp	r0, #0
 80014e6:	d195      	bne.n	8001414 <__gnu_unwind_execute+0x84>
 80014e8:	f414 4f00 	tst.w	r4, #32768	@ 0x8000
 80014ec:	bf18      	it	ne
 80014ee:	f04f 0801 	movne.w	r8, #1
 80014f2:	e754      	b.n	800139e <__gnu_unwind_execute+0xe>
 80014f4:	f1a0 03b1 	sub.w	r3, r0, #177	@ 0xb1
 80014f8:	2b04      	cmp	r3, #4
 80014fa:	f200 80b3 	bhi.w	8001664 <__gnu_unwind_execute+0x2d4>
 80014fe:	e8df f003 	tbb	[pc, r3]
 8001502:	1d49      	.short	0x1d49
 8001504:	0c16      	.short	0x0c16
 8001506:	03          	.byte	0x03
 8001507:	00          	.byte	0x00
 8001508:	2300      	movs	r3, #0
 800150a:	aa03      	add	r2, sp, #12
 800150c:	9200      	str	r2, [sp, #0]
 800150e:	4630      	mov	r0, r6
 8001510:	220d      	movs	r2, #13
 8001512:	4619      	mov	r1, r3
 8001514:	f7ff fae6 	bl	8000ae4 <_Unwind_VRS_Get>
 8001518:	e741      	b.n	800139e <__gnu_unwind_execute+0xe>
 800151a:	2300      	movs	r3, #0
 800151c:	2105      	movs	r1, #5
 800151e:	4630      	mov	r0, r6
 8001520:	461a      	mov	r2, r3
 8001522:	f7ff fcc7 	bl	8000eb4 <_Unwind_VRS_Pop>
 8001526:	2800      	cmp	r0, #0
 8001528:	f43f af39 	beq.w	800139e <__gnu_unwind_execute+0xe>
 800152c:	e772      	b.n	8001414 <__gnu_unwind_execute+0x84>
 800152e:	4628      	mov	r0, r5
 8001530:	f7ff ff02 	bl	8001338 <next_unwind_byte>
 8001534:	2301      	movs	r3, #1
 8001536:	4604      	mov	r4, r0
 8001538:	4619      	mov	r1, r3
 800153a:	e789      	b.n	8001450 <__gnu_unwind_execute+0xc0>
 800153c:	2300      	movs	r3, #0
 800153e:	f10d 0908 	add.w	r9, sp, #8
 8001542:	220d      	movs	r2, #13
 8001544:	4619      	mov	r1, r3
 8001546:	4630      	mov	r0, r6
 8001548:	f8cd 9000 	str.w	r9, [sp]
 800154c:	f7ff faca 	bl	8000ae4 <_Unwind_VRS_Get>
 8001550:	4628      	mov	r0, r5
 8001552:	f7ff fef1 	bl	8001338 <next_unwind_byte>
 8001556:	0602      	lsls	r2, r0, #24
 8001558:	f04f 0702 	mov.w	r7, #2
 800155c:	9c02      	ldr	r4, [sp, #8]
 800155e:	d50b      	bpl.n	8001578 <__gnu_unwind_execute+0x1e8>
 8001560:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8001564:	40b8      	lsls	r0, r7
 8001566:	4404      	add	r4, r0
 8001568:	4628      	mov	r0, r5
 800156a:	9402      	str	r4, [sp, #8]
 800156c:	f7ff fee4 	bl	8001338 <next_unwind_byte>
 8001570:	0603      	lsls	r3, r0, #24
 8001572:	f107 0707 	add.w	r7, r7, #7
 8001576:	d4f3      	bmi.n	8001560 <__gnu_unwind_execute+0x1d0>
 8001578:	2300      	movs	r3, #0
 800157a:	40b8      	lsls	r0, r7
 800157c:	f504 7401 	add.w	r4, r4, #516	@ 0x204
 8001580:	4404      	add	r4, r0
 8001582:	220d      	movs	r2, #13
 8001584:	4630      	mov	r0, r6
 8001586:	4619      	mov	r1, r3
 8001588:	f8cd 9000 	str.w	r9, [sp]
 800158c:	9402      	str	r4, [sp, #8]
 800158e:	f7ff fad1 	bl	8000b34 <_Unwind_VRS_Set>
 8001592:	e704      	b.n	800139e <__gnu_unwind_execute+0xe>
 8001594:	4628      	mov	r0, r5
 8001596:	f7ff fecf 	bl	8001338 <next_unwind_byte>
 800159a:	1e43      	subs	r3, r0, #1
 800159c:	b2db      	uxtb	r3, r3
 800159e:	2b0e      	cmp	r3, #14
 80015a0:	4602      	mov	r2, r0
 80015a2:	f67f af30 	bls.w	8001406 <__gnu_unwind_execute+0x76>
 80015a6:	e735      	b.n	8001414 <__gnu_unwind_execute+0x84>
 80015a8:	4628      	mov	r0, r5
 80015aa:	f7ff fec5 	bl	8001338 <next_unwind_byte>
 80015ae:	4604      	mov	r4, r0
 80015b0:	2303      	movs	r3, #3
 80015b2:	0322      	lsls	r2, r4, #12
 80015b4:	f004 040f 	and.w	r4, r4, #15
 80015b8:	f402 2270 	and.w	r2, r2, #983040	@ 0xf0000
 80015bc:	3401      	adds	r4, #1
 80015be:	4619      	mov	r1, r3
 80015c0:	4630      	mov	r0, r6
 80015c2:	4322      	orrs	r2, r4
 80015c4:	f7ff fc76 	bl	8000eb4 <_Unwind_VRS_Pop>
 80015c8:	2800      	cmp	r0, #0
 80015ca:	f43f aee8 	beq.w	800139e <__gnu_unwind_execute+0xe>
 80015ce:	e721      	b.n	8001414 <__gnu_unwind_execute+0x84>
 80015d0:	f1b8 0f00 	cmp.w	r8, #0
 80015d4:	d036      	beq.n	8001644 <__gnu_unwind_execute+0x2b4>
 80015d6:	2000      	movs	r0, #0
 80015d8:	e71d      	b.n	8001416 <__gnu_unwind_execute+0x86>
 80015da:	4628      	mov	r0, r5
 80015dc:	f7ff feac 	bl	8001338 <next_unwind_byte>
 80015e0:	1e43      	subs	r3, r0, #1
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b0e      	cmp	r3, #14
 80015e6:	4602      	mov	r2, r0
 80015e8:	f63f af14 	bhi.w	8001414 <__gnu_unwind_execute+0x84>
 80015ec:	2300      	movs	r3, #0
 80015ee:	2104      	movs	r1, #4
 80015f0:	4630      	mov	r0, r6
 80015f2:	f7ff fc5f 	bl	8000eb4 <_Unwind_VRS_Pop>
 80015f6:	2800      	cmp	r0, #0
 80015f8:	f43f aed1 	beq.w	800139e <__gnu_unwind_execute+0xe>
 80015fc:	e70a      	b.n	8001414 <__gnu_unwind_execute+0x84>
 80015fe:	2303      	movs	r3, #3
 8001600:	f000 020f 	and.w	r2, r0, #15
 8001604:	3201      	adds	r2, #1
 8001606:	4630      	mov	r0, r6
 8001608:	4619      	mov	r1, r3
 800160a:	f442 2220 	orr.w	r2, r2, #655360	@ 0xa0000
 800160e:	f7ff fc51 	bl	8000eb4 <_Unwind_VRS_Pop>
 8001612:	2800      	cmp	r0, #0
 8001614:	f43f aec3 	beq.w	800139e <__gnu_unwind_execute+0xe>
 8001618:	e6fc      	b.n	8001414 <__gnu_unwind_execute+0x84>
 800161a:	4628      	mov	r0, r5
 800161c:	f7ff fe8c 	bl	8001338 <next_unwind_byte>
 8001620:	4602      	mov	r2, r0
 8001622:	2101      	movs	r1, #1
 8001624:	f002 04f0 	and.w	r4, r2, #240	@ 0xf0
 8001628:	f002 020f 	and.w	r2, r2, #15
 800162c:	3410      	adds	r4, #16
 800162e:	440a      	add	r2, r1
 8001630:	2305      	movs	r3, #5
 8001632:	4630      	mov	r0, r6
 8001634:	ea42 3204 	orr.w	r2, r2, r4, lsl #12
 8001638:	f7ff fc3c 	bl	8000eb4 <_Unwind_VRS_Pop>
 800163c:	2800      	cmp	r0, #0
 800163e:	f43f aeae 	beq.w	800139e <__gnu_unwind_execute+0xe>
 8001642:	e6e7      	b.n	8001414 <__gnu_unwind_execute+0x84>
 8001644:	ac02      	add	r4, sp, #8
 8001646:	4643      	mov	r3, r8
 8001648:	4641      	mov	r1, r8
 800164a:	220e      	movs	r2, #14
 800164c:	4630      	mov	r0, r6
 800164e:	9400      	str	r4, [sp, #0]
 8001650:	f7ff fa48 	bl	8000ae4 <_Unwind_VRS_Get>
 8001654:	220f      	movs	r2, #15
 8001656:	4643      	mov	r3, r8
 8001658:	4641      	mov	r1, r8
 800165a:	4630      	mov	r0, r6
 800165c:	9400      	str	r4, [sp, #0]
 800165e:	f7ff fa69 	bl	8000b34 <_Unwind_VRS_Set>
 8001662:	e7b8      	b.n	80015d6 <__gnu_unwind_execute+0x246>
 8001664:	f000 03fc 	and.w	r3, r0, #252	@ 0xfc
 8001668:	2bb4      	cmp	r3, #180	@ 0xb4
 800166a:	f43f aed3 	beq.w	8001414 <__gnu_unwind_execute+0x84>
 800166e:	2301      	movs	r3, #1
 8001670:	f000 0207 	and.w	r2, r0, #7
 8001674:	441a      	add	r2, r3
 8001676:	4630      	mov	r0, r6
 8001678:	4619      	mov	r1, r3
 800167a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800167e:	f7ff fc19 	bl	8000eb4 <_Unwind_VRS_Pop>
 8001682:	2800      	cmp	r0, #0
 8001684:	f43f ae8b 	beq.w	800139e <__gnu_unwind_execute+0xe>
 8001688:	e6c4      	b.n	8001414 <__gnu_unwind_execute+0x84>
 800168a:	bf00      	nop

0800168c <__gnu_unwind_frame>:
 800168c:	460b      	mov	r3, r1
 800168e:	f04f 0c03 	mov.w	ip, #3
 8001692:	b500      	push	{lr}
 8001694:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 8001696:	4618      	mov	r0, r3
 8001698:	6853      	ldr	r3, [r2, #4]
 800169a:	b085      	sub	sp, #20
 800169c:	3208      	adds	r2, #8
 800169e:	9202      	str	r2, [sp, #8]
 80016a0:	a901      	add	r1, sp, #4
 80016a2:	0e1a      	lsrs	r2, r3, #24
 80016a4:	021b      	lsls	r3, r3, #8
 80016a6:	f88d c00c 	strb.w	ip, [sp, #12]
 80016aa:	9301      	str	r3, [sp, #4]
 80016ac:	f88d 200d 	strb.w	r2, [sp, #13]
 80016b0:	f7ff fe6e 	bl	8001390 <__gnu_unwind_execute>
 80016b4:	b005      	add	sp, #20
 80016b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80016ba:	bf00      	nop

080016bc <_Unwind_GetRegionStart>:
 80016bc:	b508      	push	{r3, lr}
 80016be:	f7ff fe65 	bl	800138c <unwind_UCB_from_context>
 80016c2:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 80016c4:	bd08      	pop	{r3, pc}
 80016c6:	bf00      	nop

080016c8 <_Unwind_GetLanguageSpecificData>:
 80016c8:	b508      	push	{r3, lr}
 80016ca:	f7ff fe5f 	bl	800138c <unwind_UCB_from_context>
 80016ce:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 80016d0:	79c3      	ldrb	r3, [r0, #7]
 80016d2:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80016d6:	3008      	adds	r0, #8
 80016d8:	bd08      	pop	{r3, pc}
 80016da:	bf00      	nop

080016dc <_ZN7StepperC1Ealf>:
 */
#include <Stepper.hpp>



Stepper::Stepper(int8_t ID, int32_t Resolution, float Acc) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b084      	sub	sp, #16
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	60f8      	str	r0, [r7, #12]
 80016e4:	607a      	str	r2, [r7, #4]
 80016e6:	603b      	str	r3, [r7, #0]
 80016e8:	460b      	mov	r3, r1
 80016ea:	72fb      	strb	r3, [r7, #11]
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	f04f 0200 	mov.w	r2, #0
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	68fb      	ldr	r3, [r7, #12]
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	60da      	str	r2, [r3, #12]
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f04f 0200 	mov.w	r2, #0
 8001702:	611a      	str	r2, [r3, #16]
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	615a      	str	r2, [r3, #20]
 800170c:	68fb      	ldr	r3, [r7, #12]
 800170e:	f04f 0200 	mov.w	r2, #0
 8001712:	619a      	str	r2, [r3, #24]
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	2200      	movs	r2, #0
 8001718:	61da      	str	r2, [r3, #28]
    id = ID;
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	7afa      	ldrb	r2, [r7, #11]
 800171e:	701a      	strb	r2, [r3, #0]
    resolution = Resolution;
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	687a      	ldr	r2, [r7, #4]
 8001724:	605a      	str	r2, [r3, #4]
    Acceleration = Acc;
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	683a      	ldr	r2, [r7, #0]
 800172a:	611a      	str	r2, [r3, #16]
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800172c:	2100      	movs	r1, #0
 800172e:	4806      	ldr	r0, [pc, #24]	@ (8001748 <_ZN7StepperC1Ealf+0x6c>)
 8001730:	f001 ff04 	bl	800353c <HAL_TIM_PWM_Start>
    last_update = HAL_GetTick();
 8001734:	f000 fec0 	bl	80024b8 <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	61da      	str	r2, [r3, #28]
}
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4618      	mov	r0, r3
 8001742:	3710      	adds	r7, #16
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000160 	.word	0x20000160

0800174c <_ZN7Stepper15ProfileVelocityEv>:
	Target_Speed = rpm;
}



void Stepper::ProfileVelocity(){
 800174c:	b5b0      	push	{r4, r5, r7, lr}
 800174e:	b086      	sub	sp, #24
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
	uint32_t now = HAL_GetTick();
 8001754:	f000 feb0 	bl	80024b8 <HAL_GetTick>
 8001758:	6178      	str	r0, [r7, #20]
	float dt = (now - last_update) / 1000.0f;
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	697a      	ldr	r2, [r7, #20]
 8001760:	1ad3      	subs	r3, r2, r3
 8001762:	4618      	mov	r0, r3
 8001764:	f7fe fdaa 	bl	80002bc <__aeabi_ui2f>
 8001768:	4603      	mov	r3, r0
 800176a:	4945      	ldr	r1, [pc, #276]	@ (8001880 <_ZN7Stepper15ProfileVelocityEv+0x134>)
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe feb1 	bl	80004d4 <__aeabi_fdiv>
 8001772:	4603      	mov	r3, r0
 8001774:	613b      	str	r3, [r7, #16]
	last_update = now;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	697a      	ldr	r2, [r7, #20]
 800177a:	61da      	str	r2, [r3, #28]
	float delta = Target_Speed - Current_Speed;
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	68da      	ldr	r2, [r3, #12]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	689b      	ldr	r3, [r3, #8]
 8001784:	4619      	mov	r1, r3
 8001786:	4610      	mov	r0, r2
 8001788:	f7fe fce6 	bl	8000158 <__aeabi_fsub>
 800178c:	4603      	mov	r3, r0
 800178e:	60fb      	str	r3, [r7, #12]

	if (delta < 0){
 8001790:	f04f 0100 	mov.w	r1, #0
 8001794:	68f8      	ldr	r0, [r7, #12]
 8001796:	f7fe ff87 	bl	80006a8 <__aeabi_fcmplt>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d02c      	beq.n	80017fa <_ZN7Stepper15ProfileVelocityEv+0xae>
		Current_Speed -= Acceleration * (-delta / Target_Speed)*dt;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	689c      	ldr	r4, [r3, #8]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	691d      	ldr	r5, [r3, #16]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	68db      	ldr	r3, [r3, #12]
 80017ac:	4619      	mov	r1, r3
 80017ae:	68f8      	ldr	r0, [r7, #12]
 80017b0:	f7fe fe90 	bl	80004d4 <__aeabi_fdiv>
 80017b4:	4603      	mov	r3, r0
 80017b6:	4619      	mov	r1, r3
 80017b8:	4628      	mov	r0, r5
 80017ba:	f7fe fdd7 	bl	800036c <__aeabi_fmul>
 80017be:	4603      	mov	r3, r0
 80017c0:	6939      	ldr	r1, [r7, #16]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fdd2 	bl	800036c <__aeabi_fmul>
 80017c8:	4603      	mov	r3, r0
 80017ca:	4619      	mov	r1, r3
 80017cc:	4620      	mov	r0, r4
 80017ce:	f7fe fcc5 	bl	800015c <__addsf3>
 80017d2:	4603      	mov	r3, r0
 80017d4:	461a      	mov	r2, r3
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	609a      	str	r2, [r3, #8]
		if (Current_Speed < Target_Speed){ Current_Speed = Target_Speed;}
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	689a      	ldr	r2, [r3, #8]
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	68db      	ldr	r3, [r3, #12]
 80017e2:	4619      	mov	r1, r3
 80017e4:	4610      	mov	r0, r2
 80017e6:	f7fe ff5f 	bl	80006a8 <__aeabi_fcmplt>
 80017ea:	4603      	mov	r3, r0
 80017ec:	2b00      	cmp	r3, #0
 80017ee:	d038      	beq.n	8001862 <_ZN7Stepper15ProfileVelocityEv+0x116>
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	68da      	ldr	r2, [r3, #12]
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	609a      	str	r2, [r3, #8]
 80017f8:	e033      	b.n	8001862 <_ZN7Stepper15ProfileVelocityEv+0x116>
	}else if(delta > 0){
 80017fa:	f04f 0100 	mov.w	r1, #0
 80017fe:	68f8      	ldr	r0, [r7, #12]
 8001800:	f7fe ff70 	bl	80006e4 <__aeabi_fcmpgt>
 8001804:	4603      	mov	r3, r0
 8001806:	2b00      	cmp	r3, #0
 8001808:	d02b      	beq.n	8001862 <_ZN7Stepper15ProfileVelocityEv+0x116>
		Current_Speed += Acceleration * (delta / Target_Speed)*dt;
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	689c      	ldr	r4, [r3, #8]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	691d      	ldr	r5, [r3, #16]
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	68db      	ldr	r3, [r3, #12]
 8001816:	4619      	mov	r1, r3
 8001818:	68f8      	ldr	r0, [r7, #12]
 800181a:	f7fe fe5b 	bl	80004d4 <__aeabi_fdiv>
 800181e:	4603      	mov	r3, r0
 8001820:	4619      	mov	r1, r3
 8001822:	4628      	mov	r0, r5
 8001824:	f7fe fda2 	bl	800036c <__aeabi_fmul>
 8001828:	4603      	mov	r3, r0
 800182a:	6939      	ldr	r1, [r7, #16]
 800182c:	4618      	mov	r0, r3
 800182e:	f7fe fd9d 	bl	800036c <__aeabi_fmul>
 8001832:	4603      	mov	r3, r0
 8001834:	4619      	mov	r1, r3
 8001836:	4620      	mov	r0, r4
 8001838:	f7fe fc90 	bl	800015c <__addsf3>
 800183c:	4603      	mov	r3, r0
 800183e:	461a      	mov	r2, r3
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	609a      	str	r2, [r3, #8]
		if (Current_Speed > Target_Speed){ Current_Speed = Target_Speed;}
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	689a      	ldr	r2, [r3, #8]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	68db      	ldr	r3, [r3, #12]
 800184c:	4619      	mov	r1, r3
 800184e:	4610      	mov	r0, r2
 8001850:	f7fe ff48 	bl	80006e4 <__aeabi_fcmpgt>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d003      	beq.n	8001862 <_ZN7Stepper15ProfileVelocityEv+0x116>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	68da      	ldr	r2, [r3, #12]
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	609a      	str	r2, [r3, #8]
	}
	setStepsFreq(Rpm_to_StepS(Current_Speed));
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	689b      	ldr	r3, [r3, #8]
 8001866:	4619      	mov	r1, r3
 8001868:	6878      	ldr	r0, [r7, #4]
 800186a:	f000 f8a1 	bl	80019b0 <_ZN7Stepper12Rpm_to_StepSEf>
 800186e:	4603      	mov	r3, r0
 8001870:	4619      	mov	r1, r3
 8001872:	6878      	ldr	r0, [r7, #4]
 8001874:	f000 f806 	bl	8001884 <_ZN7Stepper12setStepsFreqEf>
}
 8001878:	bf00      	nop
 800187a:	3718      	adds	r7, #24
 800187c:	46bd      	mov	sp, r7
 800187e:	bdb0      	pop	{r4, r5, r7, pc}
 8001880:	447a0000 	.word	0x447a0000

08001884 <_ZN7Stepper12setStepsFreqEf>:
    __HAL_TIM_SET_AUTORELOAD(&htim1, 1000);
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
    __HAL_TIM_ENABLE(&htim1);
}

void Stepper::setStepsFreq(float StepPerS) {
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
	if (StepPerS == 0) StepPerS = 1;
 800188e:	f04f 0100 	mov.w	r1, #0
 8001892:	6838      	ldr	r0, [r7, #0]
 8001894:	f7fe fefe 	bl	8000694 <__aeabi_fcmpeq>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d002      	beq.n	80018a4 <_ZN7Stepper12setStepsFreqEf+0x20>
 800189e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80018a2:	603b      	str	r3, [r7, #0]
	uint32_t arr = 1000000 / StepPerS;
 80018a4:	6839      	ldr	r1, [r7, #0]
 80018a6:	4840      	ldr	r0, [pc, #256]	@ (80019a8 <_ZN7Stepper12setStepsFreqEf+0x124>)
 80018a8:	f7fe fe14 	bl	80004d4 <__aeabi_fdiv>
 80018ac:	4603      	mov	r3, r0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f7fe ff22 	bl	80006f8 <__aeabi_f2uiz>
 80018b4:	4603      	mov	r3, r0
 80018b6:	60fb      	str	r3, [r7, #12]

    if (StepPerS <= 0) {
 80018b8:	f04f 0100 	mov.w	r1, #0
 80018bc:	6838      	ldr	r0, [r7, #0]
 80018be:	f7fe fefd 	bl	80006bc <__aeabi_fcmple>
 80018c2:	4603      	mov	r3, r0
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	d035      	beq.n	8001934 <_ZN7Stepper12setStepsFreqEf+0xb0>
    	__HAL_TIM_DISABLE(&htim1);
 80018c8:	4b38      	ldr	r3, [pc, #224]	@ (80019ac <_ZN7Stepper12setStepsFreqEf+0x128>)
 80018ca:	681b      	ldr	r3, [r3, #0]
 80018cc:	6a1a      	ldr	r2, [r3, #32]
 80018ce:	f241 1311 	movw	r3, #4369	@ 0x1111
 80018d2:	4013      	ands	r3, r2
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	bf0c      	ite	eq
 80018d8:	2301      	moveq	r3, #1
 80018da:	2300      	movne	r3, #0
 80018dc:	b2db      	uxtb	r3, r3
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d014      	beq.n	800190c <_ZN7Stepper12setStepsFreqEf+0x88>
 80018e2:	4b32      	ldr	r3, [pc, #200]	@ (80019ac <_ZN7Stepper12setStepsFreqEf+0x128>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	6a1a      	ldr	r2, [r3, #32]
 80018e8:	f240 4344 	movw	r3, #1092	@ 0x444
 80018ec:	4013      	ands	r3, r2
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	bf0c      	ite	eq
 80018f2:	2301      	moveq	r3, #1
 80018f4:	2300      	movne	r3, #0
 80018f6:	b2db      	uxtb	r3, r3
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d007      	beq.n	800190c <_ZN7Stepper12setStepsFreqEf+0x88>
 80018fc:	4b2b      	ldr	r3, [pc, #172]	@ (80019ac <_ZN7Stepper12setStepsFreqEf+0x128>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	681a      	ldr	r2, [r3, #0]
 8001902:	4b2a      	ldr	r3, [pc, #168]	@ (80019ac <_ZN7Stepper12setStepsFreqEf+0x128>)
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	f022 0201 	bic.w	r2, r2, #1
 800190a:	601a      	str	r2, [r3, #0]
		__HAL_TIM_SET_AUTORELOAD(&htim1, arr);
 800190c:	4b27      	ldr	r3, [pc, #156]	@ (80019ac <_ZN7Stepper12setStepsFreqEf+0x128>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	68fa      	ldr	r2, [r7, #12]
 8001912:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001914:	4a25      	ldr	r2, [pc, #148]	@ (80019ac <_ZN7Stepper12setStepsFreqEf+0x128>)
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	60d3      	str	r3, [r2, #12]
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0);
 800191a:	4b24      	ldr	r3, [pc, #144]	@ (80019ac <_ZN7Stepper12setStepsFreqEf+0x128>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	2200      	movs	r2, #0
 8001920:	635a      	str	r2, [r3, #52]	@ 0x34
		__HAL_TIM_ENABLE(&htim1);
 8001922:	4b22      	ldr	r3, [pc, #136]	@ (80019ac <_ZN7Stepper12setStepsFreqEf+0x128>)
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	681a      	ldr	r2, [r3, #0]
 8001928:	4b20      	ldr	r3, [pc, #128]	@ (80019ac <_ZN7Stepper12setStepsFreqEf+0x128>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f042 0201 	orr.w	r2, r2, #1
 8001930:	601a      	str	r2, [r3, #0]
        return;
 8001932:	e035      	b.n	80019a0 <_ZN7Stepper12setStepsFreqEf+0x11c>
    }

    __HAL_TIM_DISABLE(&htim1);
 8001934:	4b1d      	ldr	r3, [pc, #116]	@ (80019ac <_ZN7Stepper12setStepsFreqEf+0x128>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	6a1a      	ldr	r2, [r3, #32]
 800193a:	f241 1311 	movw	r3, #4369	@ 0x1111
 800193e:	4013      	ands	r3, r2
 8001940:	2b00      	cmp	r3, #0
 8001942:	bf0c      	ite	eq
 8001944:	2301      	moveq	r3, #1
 8001946:	2300      	movne	r3, #0
 8001948:	b2db      	uxtb	r3, r3
 800194a:	2b00      	cmp	r3, #0
 800194c:	d014      	beq.n	8001978 <_ZN7Stepper12setStepsFreqEf+0xf4>
 800194e:	4b17      	ldr	r3, [pc, #92]	@ (80019ac <_ZN7Stepper12setStepsFreqEf+0x128>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6a1a      	ldr	r2, [r3, #32]
 8001954:	f240 4344 	movw	r3, #1092	@ 0x444
 8001958:	4013      	ands	r3, r2
 800195a:	2b00      	cmp	r3, #0
 800195c:	bf0c      	ite	eq
 800195e:	2301      	moveq	r3, #1
 8001960:	2300      	movne	r3, #0
 8001962:	b2db      	uxtb	r3, r3
 8001964:	2b00      	cmp	r3, #0
 8001966:	d007      	beq.n	8001978 <_ZN7Stepper12setStepsFreqEf+0xf4>
 8001968:	4b10      	ldr	r3, [pc, #64]	@ (80019ac <_ZN7Stepper12setStepsFreqEf+0x128>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	4b0f      	ldr	r3, [pc, #60]	@ (80019ac <_ZN7Stepper12setStepsFreqEf+0x128>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0201 	bic.w	r2, r2, #1
 8001976:	601a      	str	r2, [r3, #0]
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr);
 8001978:	4b0c      	ldr	r3, [pc, #48]	@ (80019ac <_ZN7Stepper12setStepsFreqEf+0x128>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	68fa      	ldr	r2, [r7, #12]
 800197e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8001980:	4a0a      	ldr	r2, [pc, #40]	@ (80019ac <_ZN7Stepper12setStepsFreqEf+0x128>)
 8001982:	68fb      	ldr	r3, [r7, #12]
 8001984:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, arr/2);
 8001986:	4b09      	ldr	r3, [pc, #36]	@ (80019ac <_ZN7Stepper12setStepsFreqEf+0x128>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	68fa      	ldr	r2, [r7, #12]
 800198c:	0852      	lsrs	r2, r2, #1
 800198e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_TIM_ENABLE(&htim1);
 8001990:	4b06      	ldr	r3, [pc, #24]	@ (80019ac <_ZN7Stepper12setStepsFreqEf+0x128>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	681a      	ldr	r2, [r3, #0]
 8001996:	4b05      	ldr	r3, [pc, #20]	@ (80019ac <_ZN7Stepper12setStepsFreqEf+0x128>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f042 0201 	orr.w	r2, r2, #1
 800199e:	601a      	str	r2, [r3, #0]
}
 80019a0:	3710      	adds	r7, #16
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
 80019a6:	bf00      	nop
 80019a8:	49742400 	.word	0x49742400
 80019ac:	20000160 	.word	0x20000160

080019b0 <_ZN7Stepper12Rpm_to_StepSEf>:

float Stepper::Rpm_to_StepS (float rpm){
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
 80019b8:	6039      	str	r1, [r7, #0]
	return (resolution*rpm)/60;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	685b      	ldr	r3, [r3, #4]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fc80 	bl	80002c4 <__aeabi_i2f>
 80019c4:	4603      	mov	r3, r0
 80019c6:	6839      	ldr	r1, [r7, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fccf 	bl	800036c <__aeabi_fmul>
 80019ce:	4603      	mov	r3, r0
 80019d0:	4904      	ldr	r1, [pc, #16]	@ (80019e4 <_ZN7Stepper12Rpm_to_StepSEf+0x34>)
 80019d2:	4618      	mov	r0, r3
 80019d4:	f7fe fd7e 	bl	80004d4 <__aeabi_fdiv>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	42700000 	.word	0x42700000

080019e8 <_Z15UARTStream_Initv>:



/* funzione di inizializzazione da chiamare in MX_FREERTOS_Init() */
void UARTStream_Init(void)
{
 80019e8:	b580      	push	{r7, lr}
 80019ea:	b084      	sub	sp, #16
 80019ec:	af02      	add	r7, sp, #8
    /* crea code: POOL_SIZE indici uint32_t */
    qFreeBuffers  = xQueueCreate(POOL_SIZE, sizeof(uint32_t));
 80019ee:	2200      	movs	r2, #0
 80019f0:	2104      	movs	r1, #4
 80019f2:	200c      	movs	r0, #12
 80019f4:	f003 fc61 	bl	80052ba <xQueueGenericCreate>
 80019f8:	4603      	mov	r3, r0
 80019fa:	4a24      	ldr	r2, [pc, #144]	@ (8001a8c <_Z15UARTStream_Initv+0xa4>)
 80019fc:	6013      	str	r3, [r2, #0]
    qReadyBuffers = xQueueCreate(POOL_SIZE, sizeof(uint32_t));
 80019fe:	2200      	movs	r2, #0
 8001a00:	2104      	movs	r1, #4
 8001a02:	200c      	movs	r0, #12
 8001a04:	f003 fc59 	bl	80052ba <xQueueGenericCreate>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4a21      	ldr	r2, [pc, #132]	@ (8001a90 <_Z15UARTStream_Initv+0xa8>)
 8001a0c:	6013      	str	r3, [r2, #0]
    if (qFreeBuffers == NULL || qReadyBuffers == NULL) {
 8001a0e:	4b1f      	ldr	r3, [pc, #124]	@ (8001a8c <_Z15UARTStream_Initv+0xa4>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d003      	beq.n	8001a1e <_Z15UARTStream_Initv+0x36>
 8001a16:	4b1e      	ldr	r3, [pc, #120]	@ (8001a90 <_Z15UARTStream_Initv+0xa8>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d101      	bne.n	8001a22 <_Z15UARTStream_Initv+0x3a>
        /* errore: heap insufficiente */
        Error_Handler();
 8001a1e:	f000 fa8e 	bl	8001f3e <Error_Handler>
    }

    /* riempio la lista di buffer liberi con indici 0..POOL_SIZE-1 */
    for (uint32_t i = 0; i < POOL_SIZE; ++i) {
 8001a22:	2300      	movs	r3, #0
 8001a24:	603b      	str	r3, [r7, #0]
 8001a26:	e009      	b.n	8001a3c <_Z15UARTStream_Initv+0x54>
        xQueueSend(qFreeBuffers, &i, 0);
 8001a28:	4b18      	ldr	r3, [pc, #96]	@ (8001a8c <_Z15UARTStream_Initv+0xa4>)
 8001a2a:	6818      	ldr	r0, [r3, #0]
 8001a2c:	4639      	mov	r1, r7
 8001a2e:	2300      	movs	r3, #0
 8001a30:	2200      	movs	r2, #0
 8001a32:	f003 fca1 	bl	8005378 <xQueueGenericSend>
    for (uint32_t i = 0; i < POOL_SIZE; ++i) {
 8001a36:	683b      	ldr	r3, [r7, #0]
 8001a38:	3301      	adds	r3, #1
 8001a3a:	603b      	str	r3, [r7, #0]
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	2b0b      	cmp	r3, #11
 8001a40:	d9f2      	bls.n	8001a28 <_Z15UARTStream_Initv+0x40>
    }

    /* creo il task analizzatore (stack es. 512 parole) */
    BaseType_t ok = xTaskCreate(vAnalyzerTask, "Analyzer", 512, NULL, tskIDLE_PRIORITY + 2, NULL);
 8001a42:	2300      	movs	r3, #0
 8001a44:	9301      	str	r3, [sp, #4]
 8001a46:	2302      	movs	r3, #2
 8001a48:	9300      	str	r3, [sp, #0]
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a50:	4910      	ldr	r1, [pc, #64]	@ (8001a94 <_Z15UARTStream_Initv+0xac>)
 8001a52:	4811      	ldr	r0, [pc, #68]	@ (8001a98 <_Z15UARTStream_Initv+0xb0>)
 8001a54:	f004 f960 	bl	8005d18 <xTaskCreate>
 8001a58:	6078      	str	r0, [r7, #4]
    if (ok != pdPASS) {
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b01      	cmp	r3, #1
 8001a5e:	d001      	beq.n	8001a64 <_Z15UARTStream_Initv+0x7c>
        Error_Handler();
 8001a60:	f000 fa6d 	bl	8001f3e <Error_Handler>
    }

    /* avvio la prima ricezione interrupt: quando arrivano PACKET_SIZE byte verrà chiamata la callback */
    if (HAL_UART_Receive_IT(&huart1, rx_tmp, PACKET_SIZE) != HAL_OK) {
 8001a64:	2210      	movs	r2, #16
 8001a66:	490d      	ldr	r1, [pc, #52]	@ (8001a9c <_Z15UARTStream_Initv+0xb4>)
 8001a68:	480d      	ldr	r0, [pc, #52]	@ (8001aa0 <_Z15UARTStream_Initv+0xb8>)
 8001a6a:	f002 fbcd 	bl	8004208 <HAL_UART_Receive_IT>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	bf14      	ite	ne
 8001a74:	2301      	movne	r3, #1
 8001a76:	2300      	moveq	r3, #0
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	2b00      	cmp	r3, #0
 8001a7c:	d001      	beq.n	8001a82 <_Z15UARTStream_Initv+0x9a>
        Error_Handler();
 8001a7e:	f000 fa5e 	bl	8001f3e <Error_Handler>
    }
}
 8001a82:	bf00      	nop
 8001a84:	3708      	adds	r7, #8
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2000014c 	.word	0x2000014c
 8001a90:	20000150 	.word	0x20000150
 8001a94:	08008310 	.word	0x08008310
 8001a98:	08001b8d 	.word	0x08001b8d
 8001a9c:	2000007c 	.word	0x2000007c
 8001aa0:	200001a8 	.word	0x200001a8

08001aa4 <HAL_UART_RxCpltCallback>:

/* chiamata da HAL quando arrivano PACKET_SIZE byte (ISR context) */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001aa4:	b5b0      	push	{r4, r5, r7, lr}
 8001aa6:	b084      	sub	sp, #16
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	6078      	str	r0, [r7, #4]
    BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 8001aac:	2300      	movs	r3, #0
 8001aae:	60fb      	str	r3, [r7, #12]
    if (huart->Instance == USART1)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a21      	ldr	r2, [pc, #132]	@ (8001b3c <HAL_UART_RxCpltCallback+0x98>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d13b      	bne.n	8001b32 <HAL_UART_RxCpltCallback+0x8e>
    {
        uint32_t idx;
        /* prendo un buffer libero (non blocco) */
        if (xQueueReceiveFromISR(qFreeBuffers, &idx, &xHigherPriorityTaskWoken) == pdTRUE)
 8001aba:	4b21      	ldr	r3, [pc, #132]	@ (8001b40 <HAL_UART_RxCpltCallback+0x9c>)
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f107 020c 	add.w	r2, r7, #12
 8001ac2:	f107 0108 	add.w	r1, r7, #8
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	f003 fed8 	bl	800587c <xQueueReceiveFromISR>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b01      	cmp	r3, #1
 8001ad0:	bf0c      	ite	eq
 8001ad2:	2301      	moveq	r3, #1
 8001ad4:	2300      	movne	r3, #0
 8001ad6:	b2db      	uxtb	r3, r3
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d015      	beq.n	8001b08 <HAL_UART_RxCpltCallback+0x64>
        {
            /* copio i dati nel buffer del pool */
            memcpy(rx_pool[idx], rx_tmp, PACKET_SIZE);
 8001adc:	68bb      	ldr	r3, [r7, #8]
 8001ade:	011b      	lsls	r3, r3, #4
 8001ae0:	4a18      	ldr	r2, [pc, #96]	@ (8001b44 <HAL_UART_RxCpltCallback+0xa0>)
 8001ae2:	4413      	add	r3, r2
 8001ae4:	4a18      	ldr	r2, [pc, #96]	@ (8001b48 <HAL_UART_RxCpltCallback+0xa4>)
 8001ae6:	461c      	mov	r4, r3
 8001ae8:	4615      	mov	r5, r2
 8001aea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001aec:	6020      	str	r0, [r4, #0]
 8001aee:	6061      	str	r1, [r4, #4]
 8001af0:	60a2      	str	r2, [r4, #8]
 8001af2:	60e3      	str	r3, [r4, #12]

            /* segnalo che il buffer è pronto */
            xQueueSendFromISR(qReadyBuffers, &idx, &xHigherPriorityTaskWoken);
 8001af4:	4b15      	ldr	r3, [pc, #84]	@ (8001b4c <HAL_UART_RxCpltCallback+0xa8>)
 8001af6:	6818      	ldr	r0, [r3, #0]
 8001af8:	f107 020c 	add.w	r2, r7, #12
 8001afc:	f107 0108 	add.w	r1, r7, #8
 8001b00:	2300      	movs	r3, #0
 8001b02:	f003 fd3b 	bl	800557c <xQueueGenericSendFromISR>
 8001b06:	e004      	b.n	8001b12 <HAL_UART_RxCpltCallback+0x6e>
        }
        else
        {
            /* nessun buffer libero -> scarto il pacchetto */
            uart_dropped_packets++;
 8001b08:	4b11      	ldr	r3, [pc, #68]	@ (8001b50 <HAL_UART_RxCpltCallback+0xac>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	4a10      	ldr	r2, [pc, #64]	@ (8001b50 <HAL_UART_RxCpltCallback+0xac>)
 8001b10:	6013      	str	r3, [r2, #0]
        }

        /* riarmo la ricezione per i prossimi PACKET_SIZE byte */
        HAL_UART_Receive_IT(&huart1, rx_tmp, PACKET_SIZE);
 8001b12:	2210      	movs	r2, #16
 8001b14:	490c      	ldr	r1, [pc, #48]	@ (8001b48 <HAL_UART_RxCpltCallback+0xa4>)
 8001b16:	480f      	ldr	r0, [pc, #60]	@ (8001b54 <HAL_UART_RxCpltCallback+0xb0>)
 8001b18:	f002 fb76 	bl	8004208 <HAL_UART_Receive_IT>

        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d007      	beq.n	8001b32 <HAL_UART_RxCpltCallback+0x8e>
 8001b22:	4b0d      	ldr	r3, [pc, #52]	@ (8001b58 <HAL_UART_RxCpltCallback+0xb4>)
 8001b24:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001b28:	601a      	str	r2, [r3, #0]
 8001b2a:	f3bf 8f4f 	dsb	sy
 8001b2e:	f3bf 8f6f 	isb	sy
    }
}
 8001b32:	bf00      	nop
 8001b34:	3710      	adds	r7, #16
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bdb0      	pop	{r4, r5, r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	40013800 	.word	0x40013800
 8001b40:	2000014c 	.word	0x2000014c
 8001b44:	2000008c 	.word	0x2000008c
 8001b48:	2000007c 	.word	0x2000007c
 8001b4c:	20000150 	.word	0x20000150
 8001b50:	20000154 	.word	0x20000154
 8001b54:	200001a8 	.word	0x200001a8
 8001b58:	e000ed04 	.word	0xe000ed04

08001b5c <HAL_UART_ErrorCallback>:

/* callback errori: riavvio ricezione */
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b082      	sub	sp, #8
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART1) {
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	4a05      	ldr	r2, [pc, #20]	@ (8001b80 <HAL_UART_ErrorCallback+0x24>)
 8001b6a:	4293      	cmp	r3, r2
 8001b6c:	d104      	bne.n	8001b78 <HAL_UART_ErrorCallback+0x1c>
        HAL_UART_Receive_IT(&huart1, rx_tmp, PACKET_SIZE);
 8001b6e:	2210      	movs	r2, #16
 8001b70:	4904      	ldr	r1, [pc, #16]	@ (8001b84 <HAL_UART_ErrorCallback+0x28>)
 8001b72:	4805      	ldr	r0, [pc, #20]	@ (8001b88 <HAL_UART_ErrorCallback+0x2c>)
 8001b74:	f002 fb48 	bl	8004208 <HAL_UART_Receive_IT>
    }
}
 8001b78:	bf00      	nop
 8001b7a:	3708      	adds	r7, #8
 8001b7c:	46bd      	mov	sp, r7
 8001b7e:	bd80      	pop	{r7, pc}
 8001b80:	40013800 	.word	0x40013800
 8001b84:	2000007c 	.word	0x2000007c
 8001b88:	200001a8 	.word	0x200001a8

08001b8c <_ZL13vAnalyzerTaskPv>:

/* task che prende i blocchi, concatena e parser */
static void vAnalyzerTask(void *params)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	f5ad 6d83 	sub.w	sp, sp, #1048	@ 0x418
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001b98:	f2a3 4314 	subw	r3, r3, #1044	@ 0x414
 8001b9c:	6018      	str	r0, [r3, #0]
    uint8_t parserBuf[PARSER_BUF_SIZE];
    size_t parserLen = 0;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
    uint32_t idx;

    for (;;)
    {
        /* aspetto per sempre un blocco pronto */
        if (xQueueReceive(qReadyBuffers, &idx, portMAX_DELAY) == pdTRUE)
 8001ba4:	4b52      	ldr	r3, [pc, #328]	@ (8001cf0 <_ZL13vAnalyzerTaskPv+0x164>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f107 0108 	add.w	r1, r7, #8
 8001bac:	f04f 32ff 	mov.w	r2, #4294967295
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f003 fd81 	bl	80056b8 <xQueueReceive>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	2b01      	cmp	r3, #1
 8001bba:	bf0c      	ite	eq
 8001bbc:	2301      	moveq	r3, #1
 8001bbe:	2300      	movne	r3, #0
 8001bc0:	b2db      	uxtb	r3, r3
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d0ee      	beq.n	8001ba4 <_ZL13vAnalyzerTaskPv+0x18>
        {
            /* append al buffer di parsing se c'è spazio */
            if (parserLen + PACKET_SIZE <= PARSER_BUF_SIZE) {
 8001bc6:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8001bca:	3310      	adds	r3, #16
 8001bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001bd0:	d816      	bhi.n	8001c00 <_ZL13vAnalyzerTaskPv+0x74>
                memcpy(parserBuf + parserLen, rx_pool[idx], PACKET_SIZE);
 8001bd2:	f107 020c 	add.w	r2, r7, #12
 8001bd6:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8001bda:	18d0      	adds	r0, r2, r3
 8001bdc:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001be0:	f5a3 6382 	sub.w	r3, r3, #1040	@ 0x410
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	011b      	lsls	r3, r3, #4
 8001be8:	4a42      	ldr	r2, [pc, #264]	@ (8001cf4 <_ZL13vAnalyzerTaskPv+0x168>)
 8001bea:	4413      	add	r3, r2
 8001bec:	2210      	movs	r2, #16
 8001bee:	4619      	mov	r1, r3
 8001bf0:	f005 fef6 	bl	80079e0 <memcpy>
                parserLen += PACKET_SIZE;
 8001bf4:	f8d7 3414 	ldr.w	r3, [r7, #1044]	@ 0x414
 8001bf8:	3310      	adds	r3, #16
 8001bfa:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
 8001bfe:	e002      	b.n	8001c06 <_ZL13vAnalyzerTaskPv+0x7a>
            } else {
                /* overflow parser -> reseto tutto */
                parserLen = 0;
 8001c00:	2300      	movs	r3, #0
 8001c02:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
            }

            /* restituisco il buffer al pool libero */
            xQueueSend(qFreeBuffers, &idx, 0);
 8001c06:	4b3c      	ldr	r3, [pc, #240]	@ (8001cf8 <_ZL13vAnalyzerTaskPv+0x16c>)
 8001c08:	6818      	ldr	r0, [r3, #0]
 8001c0a:	f107 0108 	add.w	r1, r7, #8
 8001c0e:	2300      	movs	r3, #0
 8001c10:	2200      	movs	r2, #0
 8001c12:	f003 fbb1 	bl	8005378 <xQueueGenericSend>

            /* parsing: cerco header e messaggi completi [0xAA][LEN][payload] */
            size_t pos = 0;
 8001c16:	2300      	movs	r3, #0
 8001c18:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
            while (parserLen - pos >= 2) { // almeno header+len
 8001c1c:	e042      	b.n	8001ca4 <_ZL13vAnalyzerTaskPv+0x118>
                if (parserBuf[pos] != HEADER_BYTE) {
 8001c1e:	f507 6383 	add.w	r3, r7, #1048	@ 0x418
 8001c22:	f2a3 420c 	subw	r2, r3, #1036	@ 0x40c
 8001c26:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8001c2a:	4413      	add	r3, r2
 8001c2c:	781b      	ldrb	r3, [r3, #0]
 8001c2e:	2baa      	cmp	r3, #170	@ 0xaa
 8001c30:	d005      	beq.n	8001c3e <_ZL13vAnalyzerTaskPv+0xb2>
                    pos++;
 8001c32:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8001c36:	3301      	adds	r3, #1
 8001c38:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
                    continue;
 8001c3c:	e032      	b.n	8001ca4 <_ZL13vAnalyzerTaskPv+0x118>
                }
                uint8_t msg_len = parserBuf[pos + 1];
 8001c3e:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8001c42:	3301      	adds	r3, #1
 8001c44:	f507 6283 	add.w	r2, r7, #1048	@ 0x418
 8001c48:	f2a2 420c 	subw	r2, r2, #1036	@ 0x40c
 8001c4c:	5cd3      	ldrb	r3, [r2, r3]
 8001c4e:	f887 340f 	strb.w	r3, [r7, #1039]	@ 0x40f
                if (msg_len < 2 || msg_len > MAX_MSG_LEN) {
 8001c52:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d903      	bls.n	8001c62 <_ZL13vAnalyzerTaskPv+0xd6>
 8001c5a:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 8001c5e:	2bfa      	cmp	r3, #250	@ 0xfa
 8001c60:	d905      	bls.n	8001c6e <_ZL13vAnalyzerTaskPv+0xe2>
                    /* valore di lunghezza invalido -> scarto header */
                    pos++;
 8001c62:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8001c66:	3301      	adds	r3, #1
 8001c68:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
                    continue;
 8001c6c:	e01a      	b.n	8001ca4 <_ZL13vAnalyzerTaskPv+0x118>
                }
                if (parserLen - pos >= msg_len) {
 8001c6e:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8001c72:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8001c76:	1ad2      	subs	r2, r2, r3
 8001c78:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d319      	bcc.n	8001cb4 <_ZL13vAnalyzerTaskPv+0x128>
                    /* messaggio completo disponibile */
                    internal_processMessage(&parserBuf[pos], msg_len);
 8001c80:	f107 020c 	add.w	r2, r7, #12
 8001c84:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8001c88:	4413      	add	r3, r2
 8001c8a:	f897 240f 	ldrb.w	r2, [r7, #1039]	@ 0x40f
 8001c8e:	4611      	mov	r1, r2
 8001c90:	4618      	mov	r0, r3
 8001c92:	f000 f833 	bl	8001cfc <_ZL23internal_processMessagePhh>
                    pos += msg_len;
 8001c96:	f897 340f 	ldrb.w	r3, [r7, #1039]	@ 0x40f
 8001c9a:	f8d7 2410 	ldr.w	r2, [r7, #1040]	@ 0x410
 8001c9e:	4413      	add	r3, r2
 8001ca0:	f8c7 3410 	str.w	r3, [r7, #1040]	@ 0x410
            while (parserLen - pos >= 2) { // almeno header+len
 8001ca4:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8001ca8:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8001cac:	1ad3      	subs	r3, r2, r3
 8001cae:	2b01      	cmp	r3, #1
 8001cb0:	d8b5      	bhi.n	8001c1e <_ZL13vAnalyzerTaskPv+0x92>
 8001cb2:	e000      	b.n	8001cb6 <_ZL13vAnalyzerTaskPv+0x12a>
                } else {
                    /* messaggio incompleto, attendiamo altri blocchi */
                    break;
 8001cb4:	bf00      	nop
                }
            }
            /* shift del rimanente all'inizio */
            if (pos > 0) {
 8001cb6:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	f43f af72 	beq.w	8001ba4 <_ZL13vAnalyzerTaskPv+0x18>
                memmove(parserBuf, parserBuf + pos, parserLen - pos);
 8001cc0:	f107 020c 	add.w	r2, r7, #12
 8001cc4:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8001cc8:	18d1      	adds	r1, r2, r3
 8001cca:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8001cce:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8001cd2:	1ad2      	subs	r2, r2, r3
 8001cd4:	f107 030c 	add.w	r3, r7, #12
 8001cd8:	4618      	mov	r0, r3
 8001cda:	f005 fe33 	bl	8007944 <memmove>
                parserLen -= pos;
 8001cde:	f8d7 2414 	ldr.w	r2, [r7, #1044]	@ 0x414
 8001ce2:	f8d7 3410 	ldr.w	r3, [r7, #1040]	@ 0x410
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	f8c7 3414 	str.w	r3, [r7, #1044]	@ 0x414
            }
        }
    }
 8001cec:	e75a      	b.n	8001ba4 <_ZL13vAnalyzerTaskPv+0x18>
 8001cee:	bf00      	nop
 8001cf0:	20000150 	.word	0x20000150
 8001cf4:	2000008c 	.word	0x2000008c
 8001cf8:	2000014c 	.word	0x2000014c

08001cfc <_ZL23internal_processMessagePhh>:
}

/* qui metti cosa vuoi fare con ogni messaggio estratto (header incluso) */
static void internal_processMessage(uint8_t *msg, uint8_t len)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b0a4      	sub	sp, #144	@ 0x90
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	460b      	mov	r3, r1
 8001d06:	70fb      	strb	r3, [r7, #3]
    /* Esempio: stampa su UART (attenzione: se usi stessa UART per debug, evita blocchi lunghi) */
    char out[128];
    int off = snprintf(out, sizeof(out), "MSG len=%d: ", len);
 8001d08:	78fb      	ldrb	r3, [r7, #3]
 8001d0a:	f107 0008 	add.w	r0, r7, #8
 8001d0e:	4a28      	ldr	r2, [pc, #160]	@ (8001db0 <_ZL23internal_processMessagePhh+0xb4>)
 8001d10:	2180      	movs	r1, #128	@ 0x80
 8001d12:	f005 fde1 	bl	80078d8 <sniprintf>
 8001d16:	f8c7 008c 	str.w	r0, [r7, #140]	@ 0x8c
    for (int i = 0; i < len && off < (int)sizeof(out) - 4; ++i) {
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001d20:	e01b      	b.n	8001d5a <_ZL23internal_processMessagePhh+0x5e>
        off += snprintf(out + off, sizeof(out) - off, "%02X ", msg[i]);
 8001d22:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d26:	f107 0208 	add.w	r2, r7, #8
 8001d2a:	18d0      	adds	r0, r2, r3
 8001d2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d30:	f1c3 0180 	rsb	r1, r3, #128	@ 0x80
 8001d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d38:	687a      	ldr	r2, [r7, #4]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	781b      	ldrb	r3, [r3, #0]
 8001d3e:	4a1d      	ldr	r2, [pc, #116]	@ (8001db4 <_ZL23internal_processMessagePhh+0xb8>)
 8001d40:	f005 fdca 	bl	80078d8 <sniprintf>
 8001d44:	4602      	mov	r2, r0
 8001d46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d4a:	4413      	add	r3, r2
 8001d4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    for (int i = 0; i < len && off < (int)sizeof(out) - 4; ++i) {
 8001d50:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8001d54:	3301      	adds	r3, #1
 8001d56:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8001d5a:	78fb      	ldrb	r3, [r7, #3]
 8001d5c:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8001d60:	429a      	cmp	r2, r3
 8001d62:	da03      	bge.n	8001d6c <_ZL23internal_processMessagePhh+0x70>
 8001d64:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d68:	2b7b      	cmp	r3, #123	@ 0x7b
 8001d6a:	ddda      	ble.n	8001d22 <_ZL23internal_processMessagePhh+0x26>
    }
    off += snprintf(out + off, sizeof(out) - off, "\r\n");
 8001d6c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d70:	f107 0208 	add.w	r2, r7, #8
 8001d74:	18d0      	adds	r0, r2, r3
 8001d76:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d7a:	f1c3 0380 	rsb	r3, r3, #128	@ 0x80
 8001d7e:	4a0e      	ldr	r2, [pc, #56]	@ (8001db8 <_ZL23internal_processMessagePhh+0xbc>)
 8001d80:	4619      	mov	r1, r3
 8001d82:	f005 fda9 	bl	80078d8 <sniprintf>
 8001d86:	4602      	mov	r2, r0
 8001d88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d8c:	4413      	add	r3, r2
 8001d8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    HAL_UART_Transmit(&huart1, (uint8_t*)out, off, HAL_MAX_DELAY);
 8001d92:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	f107 0108 	add.w	r1, r7, #8
 8001d9c:	f04f 33ff 	mov.w	r3, #4294967295
 8001da0:	4806      	ldr	r0, [pc, #24]	@ (8001dbc <_ZL23internal_processMessagePhh+0xc0>)
 8001da2:	f002 f9a6 	bl	80040f2 <HAL_UART_Transmit>
}
 8001da6:	bf00      	nop
 8001da8:	3790      	adds	r7, #144	@ 0x90
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	0800831c 	.word	0x0800831c
 8001db4:	0800832c 	.word	0x0800832c
 8001db8:	08008334 	.word	0x08008334
 8001dbc:	200001a8 	.word	0x200001a8

08001dc0 <_Z16MX_FREERTOS_Initv>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001dc4:	4a05      	ldr	r2, [pc, #20]	@ (8001ddc <_Z16MX_FREERTOS_Initv+0x1c>)
 8001dc6:	2100      	movs	r1, #0
 8001dc8:	4805      	ldr	r0, [pc, #20]	@ (8001de0 <_Z16MX_FREERTOS_Initv+0x20>)
 8001dca:	f002 ffff 	bl	8004dcc <osThreadNew>
 8001dce:	4603      	mov	r3, r0
 8001dd0:	4a04      	ldr	r2, [pc, #16]	@ (8001de4 <_Z16MX_FREERTOS_Initv+0x24>)
 8001dd2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* inizializza il modulo uart_stream: crea queue, task e avvia la prima ricezione */
  UARTStream_Init();
 8001dd4:	f7ff fe08 	bl	80019e8 <_Z15UARTStream_Initv>

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8001dd8:	bf00      	nop
 8001dda:	bd80      	pop	{r7, pc}
 8001ddc:	0800835c 	.word	0x0800835c
 8001de0:	08001de9 	.word	0x08001de9
 8001de4:	20000158 	.word	0x20000158

08001de8 <_Z16StartDefaultTaskPv>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001de8:	b580      	push	{r7, lr}
 8001dea:	b082      	sub	sp, #8
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8001df0:	2001      	movs	r0, #1
 8001df2:	f003 f87d 	bl	8004ef0 <osDelay>
 8001df6:	e7fb      	b.n	8001df0 <_Z16StartDefaultTaskPv+0x8>

08001df8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	b086      	sub	sp, #24
 8001dfc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001dfe:	f107 0308 	add.w	r3, r7, #8
 8001e02:	2200      	movs	r2, #0
 8001e04:	601a      	str	r2, [r3, #0]
 8001e06:	605a      	str	r2, [r3, #4]
 8001e08:	609a      	str	r2, [r3, #8]
 8001e0a:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e0c:	4b13      	ldr	r3, [pc, #76]	@ (8001e5c <MX_GPIO_Init+0x64>)
 8001e0e:	699b      	ldr	r3, [r3, #24]
 8001e10:	4a12      	ldr	r2, [pc, #72]	@ (8001e5c <MX_GPIO_Init+0x64>)
 8001e12:	f043 0304 	orr.w	r3, r3, #4
 8001e16:	6193      	str	r3, [r2, #24]
 8001e18:	4b10      	ldr	r3, [pc, #64]	@ (8001e5c <MX_GPIO_Init+0x64>)
 8001e1a:	699b      	ldr	r3, [r3, #24]
 8001e1c:	f003 0304 	and.w	r3, r3, #4
 8001e20:	607b      	str	r3, [r7, #4]
 8001e22:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Reset_Pin|Sleep_Pin, GPIO_PIN_SET);
 8001e24:	2201      	movs	r2, #1
 8001e26:	2130      	movs	r1, #48	@ 0x30
 8001e28:	480d      	ldr	r0, [pc, #52]	@ (8001e60 <MX_GPIO_Init+0x68>)
 8001e2a:	f000 feb7 	bl	8002b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Direction_Pin|Enable_Pin, GPIO_PIN_RESET);
 8001e2e:	2200      	movs	r2, #0
 8001e30:	21c0      	movs	r1, #192	@ 0xc0
 8001e32:	480b      	ldr	r0, [pc, #44]	@ (8001e60 <MX_GPIO_Init+0x68>)
 8001e34:	f000 feb2 	bl	8002b9c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : Reset_Pin Sleep_Pin Direction_Pin Enable_Pin */
  GPIO_InitStruct.Pin = Reset_Pin|Sleep_Pin|Direction_Pin|Enable_Pin;
 8001e38:	23f0      	movs	r3, #240	@ 0xf0
 8001e3a:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e40:	2300      	movs	r3, #0
 8001e42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e44:	2302      	movs	r3, #2
 8001e46:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e48:	f107 0308 	add.w	r3, r7, #8
 8001e4c:	4619      	mov	r1, r3
 8001e4e:	4804      	ldr	r0, [pc, #16]	@ (8001e60 <MX_GPIO_Init+0x68>)
 8001e50:	f000 fd20 	bl	8002894 <HAL_GPIO_Init>

}
 8001e54:	bf00      	nop
 8001e56:	3718      	adds	r7, #24
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	40021000 	.word	0x40021000
 8001e60:	40010800 	.word	0x40010800

08001e64 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001e6a:	f000 facd 	bl	8002408 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001e6e:	f000 f81b 	bl	8001ea8 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001e72:	f7ff ffc1 	bl	8001df8 <MX_GPIO_Init>
  MX_TIM1_Init();
 8001e76:	f000 f931 	bl	80020dc <MX_TIM1_Init>
  MX_USART1_UART_Init();
 8001e7a:	f000 fa21 	bl	80022c0 <MX_USART1_UART_Init>
  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001e7e:	f7ff ff9f 	bl	8001dc0 <_Z16MX_FREERTOS_Initv>

  /* Start scheduler */
  osKernelStart();
 8001e82:	f002 ff7d 	bl	8004d80 <osKernelStart>
  /* USER CODE BEGIN 2 */
  Stepper Nema(1, 200, 100);
 8001e86:	4638      	mov	r0, r7
 8001e88:	4b06      	ldr	r3, [pc, #24]	@ (8001ea4 <main+0x40>)
 8001e8a:	22c8      	movs	r2, #200	@ 0xc8
 8001e8c:	2101      	movs	r1, #1
 8001e8e:	f7ff fc25 	bl	80016dc <_ZN7StepperC1Ealf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Nema.ProfileVelocity();
 8001e92:	463b      	mov	r3, r7
 8001e94:	4618      	mov	r0, r3
 8001e96:	f7ff fc59 	bl	800174c <_ZN7Stepper15ProfileVelocityEv>
	  HAL_Delay(1);
 8001e9a:	2001      	movs	r0, #1
 8001e9c:	f000 fb16 	bl	80024cc <HAL_Delay>
	  Nema.ProfileVelocity();
 8001ea0:	bf00      	nop
 8001ea2:	e7f6      	b.n	8001e92 <main+0x2e>
 8001ea4:	42c80000 	.word	0x42c80000

08001ea8 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b090      	sub	sp, #64	@ 0x40
 8001eac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001eae:	f107 0318 	add.w	r3, r7, #24
 8001eb2:	2228      	movs	r2, #40	@ 0x28
 8001eb4:	2100      	movs	r1, #0
 8001eb6:	4618      	mov	r0, r3
 8001eb8:	f005 fd5e 	bl	8007978 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001ebc:	1d3b      	adds	r3, r7, #4
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	601a      	str	r2, [r3, #0]
 8001ec2:	605a      	str	r2, [r3, #4]
 8001ec4:	609a      	str	r2, [r3, #8]
 8001ec6:	60da      	str	r2, [r3, #12]
 8001ec8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001eca:	2302      	movs	r3, #2
 8001ecc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001ed2:	2310      	movs	r3, #16
 8001ed4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001ed6:	2302      	movs	r3, #2
 8001ed8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001eda:	2300      	movs	r3, #0
 8001edc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001ede:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001ee4:	f107 0318 	add.w	r3, r7, #24
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f000 fe6f 	bl	8002bcc <HAL_RCC_OscConfig>
 8001eee:	4603      	mov	r3, r0
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	bf14      	ite	ne
 8001ef4:	2301      	movne	r3, #1
 8001ef6:	2300      	moveq	r3, #0
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b00      	cmp	r3, #0
 8001efc:	d001      	beq.n	8001f02 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 8001efe:	f000 f81e 	bl	8001f3e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001f02:	230f      	movs	r3, #15
 8001f04:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001f06:	2302      	movs	r3, #2
 8001f08:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001f0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f12:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001f14:	2300      	movs	r3, #0
 8001f16:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001f18:	1d3b      	adds	r3, r7, #4
 8001f1a:	2102      	movs	r1, #2
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	f001 f8d7 	bl	80030d0 <HAL_RCC_ClockConfig>
 8001f22:	4603      	mov	r3, r0
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	bf14      	ite	ne
 8001f28:	2301      	movne	r3, #1
 8001f2a:	2300      	moveq	r3, #0
 8001f2c:	b2db      	uxtb	r3, r3
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d001      	beq.n	8001f36 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8001f32:	f000 f804 	bl	8001f3e <Error_Handler>
  }
}
 8001f36:	bf00      	nop
 8001f38:	3740      	adds	r7, #64	@ 0x40
 8001f3a:	46bd      	mov	sp, r7
 8001f3c:	bd80      	pop	{r7, pc}

08001f3e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f42:	b672      	cpsid	i
}
 8001f44:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f46:	bf00      	nop
 8001f48:	e7fd      	b.n	8001f46 <Error_Handler+0x8>
	...

08001f4c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f4c:	b580      	push	{r7, lr}
 8001f4e:	b084      	sub	sp, #16
 8001f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001f52:	4b18      	ldr	r3, [pc, #96]	@ (8001fb4 <HAL_MspInit+0x68>)
 8001f54:	699b      	ldr	r3, [r3, #24]
 8001f56:	4a17      	ldr	r2, [pc, #92]	@ (8001fb4 <HAL_MspInit+0x68>)
 8001f58:	f043 0301 	orr.w	r3, r3, #1
 8001f5c:	6193      	str	r3, [r2, #24]
 8001f5e:	4b15      	ldr	r3, [pc, #84]	@ (8001fb4 <HAL_MspInit+0x68>)
 8001f60:	699b      	ldr	r3, [r3, #24]
 8001f62:	f003 0301 	and.w	r3, r3, #1
 8001f66:	60bb      	str	r3, [r7, #8]
 8001f68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f6a:	4b12      	ldr	r3, [pc, #72]	@ (8001fb4 <HAL_MspInit+0x68>)
 8001f6c:	69db      	ldr	r3, [r3, #28]
 8001f6e:	4a11      	ldr	r2, [pc, #68]	@ (8001fb4 <HAL_MspInit+0x68>)
 8001f70:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f74:	61d3      	str	r3, [r2, #28]
 8001f76:	4b0f      	ldr	r3, [pc, #60]	@ (8001fb4 <HAL_MspInit+0x68>)
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f7e:	607b      	str	r3, [r7, #4]
 8001f80:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f82:	2200      	movs	r2, #0
 8001f84:	210f      	movs	r1, #15
 8001f86:	f06f 0001 	mvn.w	r0, #1
 8001f8a:	f000 fb9a 	bl	80026c2 <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001f8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001fb8 <HAL_MspInit+0x6c>)
 8001f90:	685b      	ldr	r3, [r3, #4]
 8001f92:	60fb      	str	r3, [r7, #12]
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	4a04      	ldr	r2, [pc, #16]	@ (8001fb8 <HAL_MspInit+0x6c>)
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001faa:	bf00      	nop
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40021000 	.word	0x40021000
 8001fb8:	40010000 	.word	0x40010000

08001fbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001fc0:	bf00      	nop
 8001fc2:	e7fd      	b.n	8001fc0 <NMI_Handler+0x4>

08001fc4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001fc8:	bf00      	nop
 8001fca:	e7fd      	b.n	8001fc8 <HardFault_Handler+0x4>

08001fcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001fd0:	bf00      	nop
 8001fd2:	e7fd      	b.n	8001fd0 <MemManage_Handler+0x4>

08001fd4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001fd4:	b480      	push	{r7}
 8001fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001fd8:	bf00      	nop
 8001fda:	e7fd      	b.n	8001fd8 <BusFault_Handler+0x4>

08001fdc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001fe0:	bf00      	nop
 8001fe2:	e7fd      	b.n	8001fe0 <UsageFault_Handler+0x4>

08001fe4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001fe4:	b480      	push	{r7}
 8001fe6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001fe8:	bf00      	nop
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bc80      	pop	{r7}
 8001fee:	4770      	bx	lr

08001ff0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001ff4:	f000 fa4e 	bl	8002494 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 8001ff8:	f004 fc56 	bl	80068a8 <xTaskGetSchedulerState>
 8001ffc:	4603      	mov	r3, r0
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d001      	beq.n	8002006 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 8002002:	f005 f9f9 	bl	80073f8 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002006:	bf00      	nop
 8002008:	bd80      	pop	{r7, pc}
	...

0800200c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002010:	4802      	ldr	r0, [pc, #8]	@ (800201c <USART1_IRQHandler+0x10>)
 8002012:	f002 f91f 	bl	8004254 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	200001a8 	.word	0x200001a8

08002020 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002020:	b480      	push	{r7}
 8002022:	af00      	add	r7, sp, #0
  return 1;
 8002024:	2301      	movs	r3, #1
}
 8002026:	4618      	mov	r0, r3
 8002028:	46bd      	mov	sp, r7
 800202a:	bc80      	pop	{r7}
 800202c:	4770      	bx	lr

0800202e <_kill>:

int _kill(int pid, int sig)
{
 800202e:	b580      	push	{r7, lr}
 8002030:	b082      	sub	sp, #8
 8002032:	af00      	add	r7, sp, #0
 8002034:	6078      	str	r0, [r7, #4]
 8002036:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002038:	f005 fca6 	bl	8007988 <__errno>
 800203c:	4603      	mov	r3, r0
 800203e:	2216      	movs	r2, #22
 8002040:	601a      	str	r2, [r3, #0]
  return -1;
 8002042:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}

0800204e <_exit>:

void _exit (int status)
{
 800204e:	b580      	push	{r7, lr}
 8002050:	b082      	sub	sp, #8
 8002052:	af00      	add	r7, sp, #0
 8002054:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002056:	f04f 31ff 	mov.w	r1, #4294967295
 800205a:	6878      	ldr	r0, [r7, #4]
 800205c:	f7ff ffe7 	bl	800202e <_kill>
  while (1) {}    /* Make sure we hang here */
 8002060:	bf00      	nop
 8002062:	e7fd      	b.n	8002060 <_exit+0x12>

08002064 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b086      	sub	sp, #24
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800206c:	4a14      	ldr	r2, [pc, #80]	@ (80020c0 <_sbrk+0x5c>)
 800206e:	4b15      	ldr	r3, [pc, #84]	@ (80020c4 <_sbrk+0x60>)
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002074:	697b      	ldr	r3, [r7, #20]
 8002076:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002078:	4b13      	ldr	r3, [pc, #76]	@ (80020c8 <_sbrk+0x64>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d102      	bne.n	8002086 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002080:	4b11      	ldr	r3, [pc, #68]	@ (80020c8 <_sbrk+0x64>)
 8002082:	4a12      	ldr	r2, [pc, #72]	@ (80020cc <_sbrk+0x68>)
 8002084:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002086:	4b10      	ldr	r3, [pc, #64]	@ (80020c8 <_sbrk+0x64>)
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	4413      	add	r3, r2
 800208e:	693a      	ldr	r2, [r7, #16]
 8002090:	429a      	cmp	r2, r3
 8002092:	d207      	bcs.n	80020a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002094:	f005 fc78 	bl	8007988 <__errno>
 8002098:	4603      	mov	r3, r0
 800209a:	220c      	movs	r2, #12
 800209c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800209e:	f04f 33ff 	mov.w	r3, #4294967295
 80020a2:	e009      	b.n	80020b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020a4:	4b08      	ldr	r3, [pc, #32]	@ (80020c8 <_sbrk+0x64>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020aa:	4b07      	ldr	r3, [pc, #28]	@ (80020c8 <_sbrk+0x64>)
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4413      	add	r3, r2
 80020b2:	4a05      	ldr	r2, [pc, #20]	@ (80020c8 <_sbrk+0x64>)
 80020b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020b6:	68fb      	ldr	r3, [r7, #12]
}
 80020b8:	4618      	mov	r0, r3
 80020ba:	3718      	adds	r7, #24
 80020bc:	46bd      	mov	sp, r7
 80020be:	bd80      	pop	{r7, pc}
 80020c0:	20005000 	.word	0x20005000
 80020c4:	00000400 	.word	0x00000400
 80020c8:	2000015c 	.word	0x2000015c
 80020cc:	20001c90 	.word	0x20001c90

080020d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80020d4:	bf00      	nop
 80020d6:	46bd      	mov	sp, r7
 80020d8:	bc80      	pop	{r7}
 80020da:	4770      	bx	lr

080020dc <MX_TIM1_Init>:

TIM_HandleTypeDef htim1;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b096      	sub	sp, #88	@ 0x58
 80020e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80020e2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80020e6:	2200      	movs	r2, #0
 80020e8:	601a      	str	r2, [r3, #0]
 80020ea:	605a      	str	r2, [r3, #4]
 80020ec:	609a      	str	r2, [r3, #8]
 80020ee:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80020f0:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80020fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80020fe:	2200      	movs	r2, #0
 8002100:	601a      	str	r2, [r3, #0]
 8002102:	605a      	str	r2, [r3, #4]
 8002104:	609a      	str	r2, [r3, #8]
 8002106:	60da      	str	r2, [r3, #12]
 8002108:	611a      	str	r2, [r3, #16]
 800210a:	615a      	str	r2, [r3, #20]
 800210c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800210e:	1d3b      	adds	r3, r7, #4
 8002110:	2220      	movs	r2, #32
 8002112:	2100      	movs	r1, #0
 8002114:	4618      	mov	r0, r3
 8002116:	f005 fc2f 	bl	8007978 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800211a:	4b3e      	ldr	r3, [pc, #248]	@ (8002214 <MX_TIM1_Init+0x138>)
 800211c:	4a3e      	ldr	r2, [pc, #248]	@ (8002218 <MX_TIM1_Init+0x13c>)
 800211e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 63;
 8002120:	4b3c      	ldr	r3, [pc, #240]	@ (8002214 <MX_TIM1_Init+0x138>)
 8002122:	223f      	movs	r2, #63	@ 0x3f
 8002124:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002126:	4b3b      	ldr	r3, [pc, #236]	@ (8002214 <MX_TIM1_Init+0x138>)
 8002128:	2200      	movs	r2, #0
 800212a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 800212c:	4b39      	ldr	r3, [pc, #228]	@ (8002214 <MX_TIM1_Init+0x138>)
 800212e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002132:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002134:	4b37      	ldr	r3, [pc, #220]	@ (8002214 <MX_TIM1_Init+0x138>)
 8002136:	2200      	movs	r2, #0
 8002138:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800213a:	4b36      	ldr	r3, [pc, #216]	@ (8002214 <MX_TIM1_Init+0x138>)
 800213c:	2200      	movs	r2, #0
 800213e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002140:	4b34      	ldr	r3, [pc, #208]	@ (8002214 <MX_TIM1_Init+0x138>)
 8002142:	2200      	movs	r2, #0
 8002144:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002146:	4833      	ldr	r0, [pc, #204]	@ (8002214 <MX_TIM1_Init+0x138>)
 8002148:	f001 f950 	bl	80033ec <HAL_TIM_Base_Init>
 800214c:	4603      	mov	r3, r0
 800214e:	2b00      	cmp	r3, #0
 8002150:	d001      	beq.n	8002156 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8002152:	f7ff fef4 	bl	8001f3e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002156:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800215a:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800215c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002160:	4619      	mov	r1, r3
 8002162:	482c      	ldr	r0, [pc, #176]	@ (8002214 <MX_TIM1_Init+0x138>)
 8002164:	f001 fb4e 	bl	8003804 <HAL_TIM_ConfigClockSource>
 8002168:	4603      	mov	r3, r0
 800216a:	2b00      	cmp	r3, #0
 800216c:	d001      	beq.n	8002172 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 800216e:	f7ff fee6 	bl	8001f3e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8002172:	4828      	ldr	r0, [pc, #160]	@ (8002214 <MX_TIM1_Init+0x138>)
 8002174:	f001 f989 	bl	800348a <HAL_TIM_PWM_Init>
 8002178:	4603      	mov	r3, r0
 800217a:	2b00      	cmp	r3, #0
 800217c:	d001      	beq.n	8002182 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 800217e:	f7ff fede 	bl	8001f3e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002182:	2300      	movs	r3, #0
 8002184:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002186:	2300      	movs	r3, #0
 8002188:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800218a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800218e:	4619      	mov	r1, r3
 8002190:	4820      	ldr	r0, [pc, #128]	@ (8002214 <MX_TIM1_Init+0x138>)
 8002192:	f001 feaf 	bl	8003ef4 <HAL_TIMEx_MasterConfigSynchronization>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800219c:	f7ff fecf 	bl	8001f3e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80021a0:	2360      	movs	r3, #96	@ 0x60
 80021a2:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80021a4:	2300      	movs	r3, #0
 80021a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80021a8:	2300      	movs	r3, #0
 80021aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80021ac:	2300      	movs	r3, #0
 80021ae:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80021b0:	2300      	movs	r3, #0
 80021b2:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80021b4:	2300      	movs	r3, #0
 80021b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80021b8:	2300      	movs	r3, #0
 80021ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80021bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80021c0:	2200      	movs	r2, #0
 80021c2:	4619      	mov	r1, r3
 80021c4:	4813      	ldr	r0, [pc, #76]	@ (8002214 <MX_TIM1_Init+0x138>)
 80021c6:	f001 fa5b 	bl	8003680 <HAL_TIM_PWM_ConfigChannel>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80021d0:	f7ff feb5 	bl	8001f3e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80021d4:	2300      	movs	r3, #0
 80021d6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80021d8:	2300      	movs	r3, #0
 80021da:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80021dc:	2300      	movs	r3, #0
 80021de:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80021e0:	2300      	movs	r3, #0
 80021e2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80021e4:	2300      	movs	r3, #0
 80021e6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80021e8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80021ec:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80021ee:	2300      	movs	r3, #0
 80021f0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80021f2:	1d3b      	adds	r3, r7, #4
 80021f4:	4619      	mov	r1, r3
 80021f6:	4807      	ldr	r0, [pc, #28]	@ (8002214 <MX_TIM1_Init+0x138>)
 80021f8:	f001 feda 	bl	8003fb0 <HAL_TIMEx_ConfigBreakDeadTime>
 80021fc:	4603      	mov	r3, r0
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d001      	beq.n	8002206 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002202:	f7ff fe9c 	bl	8001f3e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002206:	4803      	ldr	r0, [pc, #12]	@ (8002214 <MX_TIM1_Init+0x138>)
 8002208:	f000 f826 	bl	8002258 <HAL_TIM_MspPostInit>

}
 800220c:	bf00      	nop
 800220e:	3758      	adds	r7, #88	@ 0x58
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20000160 	.word	0x20000160
 8002218:	40012c00 	.word	0x40012c00

0800221c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800221c:	b480      	push	{r7}
 800221e:	b085      	sub	sp, #20
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	4a09      	ldr	r2, [pc, #36]	@ (8002250 <HAL_TIM_Base_MspInit+0x34>)
 800222a:	4293      	cmp	r3, r2
 800222c:	d10b      	bne.n	8002246 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800222e:	4b09      	ldr	r3, [pc, #36]	@ (8002254 <HAL_TIM_Base_MspInit+0x38>)
 8002230:	699b      	ldr	r3, [r3, #24]
 8002232:	4a08      	ldr	r2, [pc, #32]	@ (8002254 <HAL_TIM_Base_MspInit+0x38>)
 8002234:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002238:	6193      	str	r3, [r2, #24]
 800223a:	4b06      	ldr	r3, [pc, #24]	@ (8002254 <HAL_TIM_Base_MspInit+0x38>)
 800223c:	699b      	ldr	r3, [r3, #24]
 800223e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002242:	60fb      	str	r3, [r7, #12]
 8002244:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8002246:	bf00      	nop
 8002248:	3714      	adds	r7, #20
 800224a:	46bd      	mov	sp, r7
 800224c:	bc80      	pop	{r7}
 800224e:	4770      	bx	lr
 8002250:	40012c00 	.word	0x40012c00
 8002254:	40021000 	.word	0x40021000

08002258 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b088      	sub	sp, #32
 800225c:	af00      	add	r7, sp, #0
 800225e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002260:	f107 0310 	add.w	r3, r7, #16
 8002264:	2200      	movs	r2, #0
 8002266:	601a      	str	r2, [r3, #0]
 8002268:	605a      	str	r2, [r3, #4]
 800226a:	609a      	str	r2, [r3, #8]
 800226c:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a10      	ldr	r2, [pc, #64]	@ (80022b4 <HAL_TIM_MspPostInit+0x5c>)
 8002274:	4293      	cmp	r3, r2
 8002276:	d118      	bne.n	80022aa <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002278:	4b0f      	ldr	r3, [pc, #60]	@ (80022b8 <HAL_TIM_MspPostInit+0x60>)
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	4a0e      	ldr	r2, [pc, #56]	@ (80022b8 <HAL_TIM_MspPostInit+0x60>)
 800227e:	f043 0304 	orr.w	r3, r3, #4
 8002282:	6193      	str	r3, [r2, #24]
 8002284:	4b0c      	ldr	r3, [pc, #48]	@ (80022b8 <HAL_TIM_MspPostInit+0x60>)
 8002286:	699b      	ldr	r3, [r3, #24]
 8002288:	f003 0304 	and.w	r3, r3, #4
 800228c:	60fb      	str	r3, [r7, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002290:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002294:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002296:	2302      	movs	r3, #2
 8002298:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229a:	2302      	movs	r3, #2
 800229c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800229e:	f107 0310 	add.w	r3, r7, #16
 80022a2:	4619      	mov	r1, r3
 80022a4:	4805      	ldr	r0, [pc, #20]	@ (80022bc <HAL_TIM_MspPostInit+0x64>)
 80022a6:	f000 faf5 	bl	8002894 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80022aa:	bf00      	nop
 80022ac:	3720      	adds	r7, #32
 80022ae:	46bd      	mov	sp, r7
 80022b0:	bd80      	pop	{r7, pc}
 80022b2:	bf00      	nop
 80022b4:	40012c00 	.word	0x40012c00
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40010800 	.word	0x40010800

080022c0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80022c4:	4b11      	ldr	r3, [pc, #68]	@ (800230c <MX_USART1_UART_Init+0x4c>)
 80022c6:	4a12      	ldr	r2, [pc, #72]	@ (8002310 <MX_USART1_UART_Init+0x50>)
 80022c8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80022ca:	4b10      	ldr	r3, [pc, #64]	@ (800230c <MX_USART1_UART_Init+0x4c>)
 80022cc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80022d0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80022d2:	4b0e      	ldr	r3, [pc, #56]	@ (800230c <MX_USART1_UART_Init+0x4c>)
 80022d4:	2200      	movs	r2, #0
 80022d6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80022d8:	4b0c      	ldr	r3, [pc, #48]	@ (800230c <MX_USART1_UART_Init+0x4c>)
 80022da:	2200      	movs	r2, #0
 80022dc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80022de:	4b0b      	ldr	r3, [pc, #44]	@ (800230c <MX_USART1_UART_Init+0x4c>)
 80022e0:	2200      	movs	r2, #0
 80022e2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80022e4:	4b09      	ldr	r3, [pc, #36]	@ (800230c <MX_USART1_UART_Init+0x4c>)
 80022e6:	220c      	movs	r2, #12
 80022e8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ea:	4b08      	ldr	r3, [pc, #32]	@ (800230c <MX_USART1_UART_Init+0x4c>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80022f0:	4b06      	ldr	r3, [pc, #24]	@ (800230c <MX_USART1_UART_Init+0x4c>)
 80022f2:	2200      	movs	r2, #0
 80022f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80022f6:	4805      	ldr	r0, [pc, #20]	@ (800230c <MX_USART1_UART_Init+0x4c>)
 80022f8:	f001 feab 	bl	8004052 <HAL_UART_Init>
 80022fc:	4603      	mov	r3, r0
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d001      	beq.n	8002306 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002302:	f7ff fe1c 	bl	8001f3e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002306:	bf00      	nop
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200001a8 	.word	0x200001a8
 8002310:	40013800 	.word	0x40013800

08002314 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b088      	sub	sp, #32
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800231c:	f107 0310 	add.w	r3, r7, #16
 8002320:	2200      	movs	r2, #0
 8002322:	601a      	str	r2, [r3, #0]
 8002324:	605a      	str	r2, [r3, #4]
 8002326:	609a      	str	r2, [r3, #8]
 8002328:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4a20      	ldr	r2, [pc, #128]	@ (80023b0 <HAL_UART_MspInit+0x9c>)
 8002330:	4293      	cmp	r3, r2
 8002332:	d139      	bne.n	80023a8 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002334:	4b1f      	ldr	r3, [pc, #124]	@ (80023b4 <HAL_UART_MspInit+0xa0>)
 8002336:	699b      	ldr	r3, [r3, #24]
 8002338:	4a1e      	ldr	r2, [pc, #120]	@ (80023b4 <HAL_UART_MspInit+0xa0>)
 800233a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800233e:	6193      	str	r3, [r2, #24]
 8002340:	4b1c      	ldr	r3, [pc, #112]	@ (80023b4 <HAL_UART_MspInit+0xa0>)
 8002342:	699b      	ldr	r3, [r3, #24]
 8002344:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002348:	60fb      	str	r3, [r7, #12]
 800234a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800234c:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <HAL_UART_MspInit+0xa0>)
 800234e:	699b      	ldr	r3, [r3, #24]
 8002350:	4a18      	ldr	r2, [pc, #96]	@ (80023b4 <HAL_UART_MspInit+0xa0>)
 8002352:	f043 0304 	orr.w	r3, r3, #4
 8002356:	6193      	str	r3, [r2, #24]
 8002358:	4b16      	ldr	r3, [pc, #88]	@ (80023b4 <HAL_UART_MspInit+0xa0>)
 800235a:	699b      	ldr	r3, [r3, #24]
 800235c:	f003 0304 	and.w	r3, r3, #4
 8002360:	60bb      	str	r3, [r7, #8]
 8002362:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002364:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8002368:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800236a:	2302      	movs	r3, #2
 800236c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800236e:	2303      	movs	r3, #3
 8002370:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002372:	f107 0310 	add.w	r3, r7, #16
 8002376:	4619      	mov	r1, r3
 8002378:	480f      	ldr	r0, [pc, #60]	@ (80023b8 <HAL_UART_MspInit+0xa4>)
 800237a:	f000 fa8b 	bl	8002894 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800237e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002382:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002384:	2300      	movs	r3, #0
 8002386:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002388:	2300      	movs	r3, #0
 800238a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800238c:	f107 0310 	add.w	r3, r7, #16
 8002390:	4619      	mov	r1, r3
 8002392:	4809      	ldr	r0, [pc, #36]	@ (80023b8 <HAL_UART_MspInit+0xa4>)
 8002394:	f000 fa7e 	bl	8002894 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002398:	2200      	movs	r2, #0
 800239a:	2105      	movs	r1, #5
 800239c:	2025      	movs	r0, #37	@ 0x25
 800239e:	f000 f990 	bl	80026c2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80023a2:	2025      	movs	r0, #37	@ 0x25
 80023a4:	f000 f9a9 	bl	80026fa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80023a8:	bf00      	nop
 80023aa:	3720      	adds	r7, #32
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40013800 	.word	0x40013800
 80023b4:	40021000 	.word	0x40021000
 80023b8:	40010800 	.word	0x40010800

080023bc <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80023bc:	f7ff fe88 	bl	80020d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023c0:	480b      	ldr	r0, [pc, #44]	@ (80023f0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80023c2:	490c      	ldr	r1, [pc, #48]	@ (80023f4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80023c4:	4a0c      	ldr	r2, [pc, #48]	@ (80023f8 <LoopFillZerobss+0x16>)
  movs r3, #0
 80023c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80023c8:	e002      	b.n	80023d0 <LoopCopyDataInit>

080023ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023ce:	3304      	adds	r3, #4

080023d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023d4:	d3f9      	bcc.n	80023ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023d6:	4a09      	ldr	r2, [pc, #36]	@ (80023fc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80023d8:	4c09      	ldr	r4, [pc, #36]	@ (8002400 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80023da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023dc:	e001      	b.n	80023e2 <LoopFillZerobss>

080023de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023e0:	3204      	adds	r2, #4

080023e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023e4:	d3fb      	bcc.n	80023de <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80023e6:	f005 fad5 	bl	8007994 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80023ea:	f7ff fd3b 	bl	8001e64 <main>
  bx lr
 80023ee:	4770      	bx	lr
  ldr r0, =_sdata
 80023f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023f4:	20000060 	.word	0x20000060
  ldr r2, =_sidata
 80023f8:	080084dc 	.word	0x080084dc
  ldr r2, =_sbss
 80023fc:	20000060 	.word	0x20000060
  ldr r4, =_ebss
 8002400:	20001c8c 	.word	0x20001c8c

08002404 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002404:	e7fe      	b.n	8002404 <ADC1_2_IRQHandler>
	...

08002408 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800240c:	4b08      	ldr	r3, [pc, #32]	@ (8002430 <HAL_Init+0x28>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a07      	ldr	r2, [pc, #28]	@ (8002430 <HAL_Init+0x28>)
 8002412:	f043 0310 	orr.w	r3, r3, #16
 8002416:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002418:	2003      	movs	r0, #3
 800241a:	f000 f947 	bl	80026ac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800241e:	200f      	movs	r0, #15
 8002420:	f000 f808 	bl	8002434 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002424:	f7ff fd92 	bl	8001f4c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002428:	2300      	movs	r3, #0
}
 800242a:	4618      	mov	r0, r3
 800242c:	bd80      	pop	{r7, pc}
 800242e:	bf00      	nop
 8002430:	40022000 	.word	0x40022000

08002434 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b082      	sub	sp, #8
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800243c:	4b12      	ldr	r3, [pc, #72]	@ (8002488 <HAL_InitTick+0x54>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	4b12      	ldr	r3, [pc, #72]	@ (800248c <HAL_InitTick+0x58>)
 8002442:	781b      	ldrb	r3, [r3, #0]
 8002444:	4619      	mov	r1, r3
 8002446:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800244a:	fbb3 f3f1 	udiv	r3, r3, r1
 800244e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002452:	4618      	mov	r0, r3
 8002454:	f000 f95f 	bl	8002716 <HAL_SYSTICK_Config>
 8002458:	4603      	mov	r3, r0
 800245a:	2b00      	cmp	r3, #0
 800245c:	d001      	beq.n	8002462 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800245e:	2301      	movs	r3, #1
 8002460:	e00e      	b.n	8002480 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	2b0f      	cmp	r3, #15
 8002466:	d80a      	bhi.n	800247e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002468:	2200      	movs	r2, #0
 800246a:	6879      	ldr	r1, [r7, #4]
 800246c:	f04f 30ff 	mov.w	r0, #4294967295
 8002470:	f000 f927 	bl	80026c2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002474:	4a06      	ldr	r2, [pc, #24]	@ (8002490 <HAL_InitTick+0x5c>)
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800247a:	2300      	movs	r3, #0
 800247c:	e000      	b.n	8002480 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
}
 8002480:	4618      	mov	r0, r3
 8002482:	3708      	adds	r7, #8
 8002484:	46bd      	mov	sp, r7
 8002486:	bd80      	pop	{r7, pc}
 8002488:	20000000 	.word	0x20000000
 800248c:	20000008 	.word	0x20000008
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002494:	b480      	push	{r7}
 8002496:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002498:	4b05      	ldr	r3, [pc, #20]	@ (80024b0 <HAL_IncTick+0x1c>)
 800249a:	781b      	ldrb	r3, [r3, #0]
 800249c:	461a      	mov	r2, r3
 800249e:	4b05      	ldr	r3, [pc, #20]	@ (80024b4 <HAL_IncTick+0x20>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	4413      	add	r3, r2
 80024a4:	4a03      	ldr	r2, [pc, #12]	@ (80024b4 <HAL_IncTick+0x20>)
 80024a6:	6013      	str	r3, [r2, #0]
}
 80024a8:	bf00      	nop
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bc80      	pop	{r7}
 80024ae:	4770      	bx	lr
 80024b0:	20000008 	.word	0x20000008
 80024b4:	200001f0 	.word	0x200001f0

080024b8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80024b8:	b480      	push	{r7}
 80024ba:	af00      	add	r7, sp, #0
  return uwTick;
 80024bc:	4b02      	ldr	r3, [pc, #8]	@ (80024c8 <HAL_GetTick+0x10>)
 80024be:	681b      	ldr	r3, [r3, #0]
}
 80024c0:	4618      	mov	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	bc80      	pop	{r7}
 80024c6:	4770      	bx	lr
 80024c8:	200001f0 	.word	0x200001f0

080024cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80024d4:	f7ff fff0 	bl	80024b8 <HAL_GetTick>
 80024d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d005      	beq.n	80024f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80024e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002510 <HAL_Delay+0x44>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	461a      	mov	r2, r3
 80024ec:	68fb      	ldr	r3, [r7, #12]
 80024ee:	4413      	add	r3, r2
 80024f0:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80024f2:	bf00      	nop
 80024f4:	f7ff ffe0 	bl	80024b8 <HAL_GetTick>
 80024f8:	4602      	mov	r2, r0
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	1ad3      	subs	r3, r2, r3
 80024fe:	68fa      	ldr	r2, [r7, #12]
 8002500:	429a      	cmp	r2, r3
 8002502:	d8f7      	bhi.n	80024f4 <HAL_Delay+0x28>
  {
  }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3710      	adds	r7, #16
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}
 800250e:	bf00      	nop
 8002510:	20000008 	.word	0x20000008

08002514 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002514:	b480      	push	{r7}
 8002516:	b085      	sub	sp, #20
 8002518:	af00      	add	r7, sp, #0
 800251a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	f003 0307 	and.w	r3, r3, #7
 8002522:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002524:	4b0c      	ldr	r3, [pc, #48]	@ (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800252a:	68ba      	ldr	r2, [r7, #8]
 800252c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002530:	4013      	ands	r3, r2
 8002532:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800253c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002540:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002544:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002546:	4a04      	ldr	r2, [pc, #16]	@ (8002558 <__NVIC_SetPriorityGrouping+0x44>)
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	60d3      	str	r3, [r2, #12]
}
 800254c:	bf00      	nop
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	bc80      	pop	{r7}
 8002554:	4770      	bx	lr
 8002556:	bf00      	nop
 8002558:	e000ed00 	.word	0xe000ed00

0800255c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002560:	4b04      	ldr	r3, [pc, #16]	@ (8002574 <__NVIC_GetPriorityGrouping+0x18>)
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	0a1b      	lsrs	r3, r3, #8
 8002566:	f003 0307 	and.w	r3, r3, #7
}
 800256a:	4618      	mov	r0, r3
 800256c:	46bd      	mov	sp, r7
 800256e:	bc80      	pop	{r7}
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	e000ed00 	.word	0xe000ed00

08002578 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002578:	b480      	push	{r7}
 800257a:	b083      	sub	sp, #12
 800257c:	af00      	add	r7, sp, #0
 800257e:	4603      	mov	r3, r0
 8002580:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002582:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002586:	2b00      	cmp	r3, #0
 8002588:	db0b      	blt.n	80025a2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	f003 021f 	and.w	r2, r3, #31
 8002590:	4906      	ldr	r1, [pc, #24]	@ (80025ac <__NVIC_EnableIRQ+0x34>)
 8002592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002596:	095b      	lsrs	r3, r3, #5
 8002598:	2001      	movs	r0, #1
 800259a:	fa00 f202 	lsl.w	r2, r0, r2
 800259e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	e000e100 	.word	0xe000e100

080025b0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b083      	sub	sp, #12
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	4603      	mov	r3, r0
 80025b8:	6039      	str	r1, [r7, #0]
 80025ba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025bc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	db0a      	blt.n	80025da <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	b2da      	uxtb	r2, r3
 80025c8:	490c      	ldr	r1, [pc, #48]	@ (80025fc <__NVIC_SetPriority+0x4c>)
 80025ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025ce:	0112      	lsls	r2, r2, #4
 80025d0:	b2d2      	uxtb	r2, r2
 80025d2:	440b      	add	r3, r1
 80025d4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80025d8:	e00a      	b.n	80025f0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	b2da      	uxtb	r2, r3
 80025de:	4908      	ldr	r1, [pc, #32]	@ (8002600 <__NVIC_SetPriority+0x50>)
 80025e0:	79fb      	ldrb	r3, [r7, #7]
 80025e2:	f003 030f 	and.w	r3, r3, #15
 80025e6:	3b04      	subs	r3, #4
 80025e8:	0112      	lsls	r2, r2, #4
 80025ea:	b2d2      	uxtb	r2, r2
 80025ec:	440b      	add	r3, r1
 80025ee:	761a      	strb	r2, [r3, #24]
}
 80025f0:	bf00      	nop
 80025f2:	370c      	adds	r7, #12
 80025f4:	46bd      	mov	sp, r7
 80025f6:	bc80      	pop	{r7}
 80025f8:	4770      	bx	lr
 80025fa:	bf00      	nop
 80025fc:	e000e100 	.word	0xe000e100
 8002600:	e000ed00 	.word	0xe000ed00

08002604 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002604:	b480      	push	{r7}
 8002606:	b089      	sub	sp, #36	@ 0x24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002610:	68fb      	ldr	r3, [r7, #12]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002618:	69fb      	ldr	r3, [r7, #28]
 800261a:	f1c3 0307 	rsb	r3, r3, #7
 800261e:	2b04      	cmp	r3, #4
 8002620:	bf28      	it	cs
 8002622:	2304      	movcs	r3, #4
 8002624:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	3304      	adds	r3, #4
 800262a:	2b06      	cmp	r3, #6
 800262c:	d902      	bls.n	8002634 <NVIC_EncodePriority+0x30>
 800262e:	69fb      	ldr	r3, [r7, #28]
 8002630:	3b03      	subs	r3, #3
 8002632:	e000      	b.n	8002636 <NVIC_EncodePriority+0x32>
 8002634:	2300      	movs	r3, #0
 8002636:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002638:	f04f 32ff 	mov.w	r2, #4294967295
 800263c:	69bb      	ldr	r3, [r7, #24]
 800263e:	fa02 f303 	lsl.w	r3, r2, r3
 8002642:	43da      	mvns	r2, r3
 8002644:	68bb      	ldr	r3, [r7, #8]
 8002646:	401a      	ands	r2, r3
 8002648:	697b      	ldr	r3, [r7, #20]
 800264a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800264c:	f04f 31ff 	mov.w	r1, #4294967295
 8002650:	697b      	ldr	r3, [r7, #20]
 8002652:	fa01 f303 	lsl.w	r3, r1, r3
 8002656:	43d9      	mvns	r1, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800265c:	4313      	orrs	r3, r2
         );
}
 800265e:	4618      	mov	r0, r3
 8002660:	3724      	adds	r7, #36	@ 0x24
 8002662:	46bd      	mov	sp, r7
 8002664:	bc80      	pop	{r7}
 8002666:	4770      	bx	lr

08002668 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b082      	sub	sp, #8
 800266c:	af00      	add	r7, sp, #0
 800266e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	3b01      	subs	r3, #1
 8002674:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002678:	d301      	bcc.n	800267e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800267a:	2301      	movs	r3, #1
 800267c:	e00f      	b.n	800269e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800267e:	4a0a      	ldr	r2, [pc, #40]	@ (80026a8 <SysTick_Config+0x40>)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	3b01      	subs	r3, #1
 8002684:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002686:	210f      	movs	r1, #15
 8002688:	f04f 30ff 	mov.w	r0, #4294967295
 800268c:	f7ff ff90 	bl	80025b0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002690:	4b05      	ldr	r3, [pc, #20]	@ (80026a8 <SysTick_Config+0x40>)
 8002692:	2200      	movs	r2, #0
 8002694:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002696:	4b04      	ldr	r3, [pc, #16]	@ (80026a8 <SysTick_Config+0x40>)
 8002698:	2207      	movs	r2, #7
 800269a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800269c:	2300      	movs	r3, #0
}
 800269e:	4618      	mov	r0, r3
 80026a0:	3708      	adds	r7, #8
 80026a2:	46bd      	mov	sp, r7
 80026a4:	bd80      	pop	{r7, pc}
 80026a6:	bf00      	nop
 80026a8:	e000e010 	.word	0xe000e010

080026ac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ac:	b580      	push	{r7, lr}
 80026ae:	b082      	sub	sp, #8
 80026b0:	af00      	add	r7, sp, #0
 80026b2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f7ff ff2d 	bl	8002514 <__NVIC_SetPriorityGrouping>
}
 80026ba:	bf00      	nop
 80026bc:	3708      	adds	r7, #8
 80026be:	46bd      	mov	sp, r7
 80026c0:	bd80      	pop	{r7, pc}

080026c2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026c2:	b580      	push	{r7, lr}
 80026c4:	b086      	sub	sp, #24
 80026c6:	af00      	add	r7, sp, #0
 80026c8:	4603      	mov	r3, r0
 80026ca:	60b9      	str	r1, [r7, #8]
 80026cc:	607a      	str	r2, [r7, #4]
 80026ce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026d4:	f7ff ff42 	bl	800255c <__NVIC_GetPriorityGrouping>
 80026d8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68b9      	ldr	r1, [r7, #8]
 80026de:	6978      	ldr	r0, [r7, #20]
 80026e0:	f7ff ff90 	bl	8002604 <NVIC_EncodePriority>
 80026e4:	4602      	mov	r2, r0
 80026e6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80026ea:	4611      	mov	r1, r2
 80026ec:	4618      	mov	r0, r3
 80026ee:	f7ff ff5f 	bl	80025b0 <__NVIC_SetPriority>
}
 80026f2:	bf00      	nop
 80026f4:	3718      	adds	r7, #24
 80026f6:	46bd      	mov	sp, r7
 80026f8:	bd80      	pop	{r7, pc}

080026fa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80026fa:	b580      	push	{r7, lr}
 80026fc:	b082      	sub	sp, #8
 80026fe:	af00      	add	r7, sp, #0
 8002700:	4603      	mov	r3, r0
 8002702:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002704:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002708:	4618      	mov	r0, r3
 800270a:	f7ff ff35 	bl	8002578 <__NVIC_EnableIRQ>
}
 800270e:	bf00      	nop
 8002710:	3708      	adds	r7, #8
 8002712:	46bd      	mov	sp, r7
 8002714:	bd80      	pop	{r7, pc}

08002716 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002716:	b580      	push	{r7, lr}
 8002718:	b082      	sub	sp, #8
 800271a:	af00      	add	r7, sp, #0
 800271c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f7ff ffa2 	bl	8002668 <SysTick_Config>
 8002724:	4603      	mov	r3, r0
}
 8002726:	4618      	mov	r0, r3
 8002728:	3708      	adds	r7, #8
 800272a:	46bd      	mov	sp, r7
 800272c:	bd80      	pop	{r7, pc}

0800272e <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800272e:	b480      	push	{r7}
 8002730:	b085      	sub	sp, #20
 8002732:	af00      	add	r7, sp, #0
 8002734:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002736:	2300      	movs	r3, #0
 8002738:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002740:	b2db      	uxtb	r3, r3
 8002742:	2b02      	cmp	r3, #2
 8002744:	d008      	beq.n	8002758 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2204      	movs	r2, #4
 800274a:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2200      	movs	r2, #0
 8002750:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002754:	2301      	movs	r3, #1
 8002756:	e020      	b.n	800279a <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	681a      	ldr	r2, [r3, #0]
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f022 020e 	bic.w	r2, r2, #14
 8002766:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	f022 0201 	bic.w	r2, r2, #1
 8002776:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002780:	2101      	movs	r1, #1
 8002782:	fa01 f202 	lsl.w	r2, r1, r2
 8002786:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	2201      	movs	r2, #1
 800278c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2200      	movs	r2, #0
 8002794:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002798:	7bfb      	ldrb	r3, [r7, #15]
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bc80      	pop	{r7}
 80027a2:	4770      	bx	lr

080027a4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b084      	sub	sp, #16
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80027ac:	2300      	movs	r3, #0
 80027ae:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80027b6:	b2db      	uxtb	r3, r3
 80027b8:	2b02      	cmp	r3, #2
 80027ba:	d005      	beq.n	80027c8 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2204      	movs	r2, #4
 80027c0:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 80027c2:	2301      	movs	r3, #1
 80027c4:	73fb      	strb	r3, [r7, #15]
 80027c6:	e051      	b.n	800286c <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f022 020e 	bic.w	r2, r2, #14
 80027d6:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f022 0201 	bic.w	r2, r2, #1
 80027e6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a22      	ldr	r2, [pc, #136]	@ (8002878 <HAL_DMA_Abort_IT+0xd4>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d029      	beq.n	8002846 <HAL_DMA_Abort_IT+0xa2>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a21      	ldr	r2, [pc, #132]	@ (800287c <HAL_DMA_Abort_IT+0xd8>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d022      	beq.n	8002842 <HAL_DMA_Abort_IT+0x9e>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a1f      	ldr	r2, [pc, #124]	@ (8002880 <HAL_DMA_Abort_IT+0xdc>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d01a      	beq.n	800283c <HAL_DMA_Abort_IT+0x98>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a1e      	ldr	r2, [pc, #120]	@ (8002884 <HAL_DMA_Abort_IT+0xe0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d012      	beq.n	8002836 <HAL_DMA_Abort_IT+0x92>
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a1c      	ldr	r2, [pc, #112]	@ (8002888 <HAL_DMA_Abort_IT+0xe4>)
 8002816:	4293      	cmp	r3, r2
 8002818:	d00a      	beq.n	8002830 <HAL_DMA_Abort_IT+0x8c>
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	4a1b      	ldr	r2, [pc, #108]	@ (800288c <HAL_DMA_Abort_IT+0xe8>)
 8002820:	4293      	cmp	r3, r2
 8002822:	d102      	bne.n	800282a <HAL_DMA_Abort_IT+0x86>
 8002824:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002828:	e00e      	b.n	8002848 <HAL_DMA_Abort_IT+0xa4>
 800282a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800282e:	e00b      	b.n	8002848 <HAL_DMA_Abort_IT+0xa4>
 8002830:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002834:	e008      	b.n	8002848 <HAL_DMA_Abort_IT+0xa4>
 8002836:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800283a:	e005      	b.n	8002848 <HAL_DMA_Abort_IT+0xa4>
 800283c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002840:	e002      	b.n	8002848 <HAL_DMA_Abort_IT+0xa4>
 8002842:	2310      	movs	r3, #16
 8002844:	e000      	b.n	8002848 <HAL_DMA_Abort_IT+0xa4>
 8002846:	2301      	movs	r3, #1
 8002848:	4a11      	ldr	r2, [pc, #68]	@ (8002890 <HAL_DMA_Abort_IT+0xec>)
 800284a:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2200      	movs	r2, #0
 8002858:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002860:	2b00      	cmp	r3, #0
 8002862:	d003      	beq.n	800286c <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002868:	6878      	ldr	r0, [r7, #4]
 800286a:	4798      	blx	r3
    } 
  }
  return status;
 800286c:	7bfb      	ldrb	r3, [r7, #15]
}
 800286e:	4618      	mov	r0, r3
 8002870:	3710      	adds	r7, #16
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	40020008 	.word	0x40020008
 800287c:	4002001c 	.word	0x4002001c
 8002880:	40020030 	.word	0x40020030
 8002884:	40020044 	.word	0x40020044
 8002888:	40020058 	.word	0x40020058
 800288c:	4002006c 	.word	0x4002006c
 8002890:	40020000 	.word	0x40020000

08002894 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002894:	b480      	push	{r7}
 8002896:	b08b      	sub	sp, #44	@ 0x2c
 8002898:	af00      	add	r7, sp, #0
 800289a:	6078      	str	r0, [r7, #4]
 800289c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800289e:	2300      	movs	r3, #0
 80028a0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80028a2:	2300      	movs	r3, #0
 80028a4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80028a6:	e169      	b.n	8002b7c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80028a8:	2201      	movs	r2, #1
 80028aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028ac:	fa02 f303 	lsl.w	r3, r2, r3
 80028b0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	69fa      	ldr	r2, [r7, #28]
 80028b8:	4013      	ands	r3, r2
 80028ba:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	69fb      	ldr	r3, [r7, #28]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	f040 8158 	bne.w	8002b76 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4a9a      	ldr	r2, [pc, #616]	@ (8002b34 <HAL_GPIO_Init+0x2a0>)
 80028cc:	4293      	cmp	r3, r2
 80028ce:	d05e      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028d0:	4a98      	ldr	r2, [pc, #608]	@ (8002b34 <HAL_GPIO_Init+0x2a0>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d875      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028d6:	4a98      	ldr	r2, [pc, #608]	@ (8002b38 <HAL_GPIO_Init+0x2a4>)
 80028d8:	4293      	cmp	r3, r2
 80028da:	d058      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028dc:	4a96      	ldr	r2, [pc, #600]	@ (8002b38 <HAL_GPIO_Init+0x2a4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d86f      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028e2:	4a96      	ldr	r2, [pc, #600]	@ (8002b3c <HAL_GPIO_Init+0x2a8>)
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d052      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028e8:	4a94      	ldr	r2, [pc, #592]	@ (8002b3c <HAL_GPIO_Init+0x2a8>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d869      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028ee:	4a94      	ldr	r2, [pc, #592]	@ (8002b40 <HAL_GPIO_Init+0x2ac>)
 80028f0:	4293      	cmp	r3, r2
 80028f2:	d04c      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 80028f4:	4a92      	ldr	r2, [pc, #584]	@ (8002b40 <HAL_GPIO_Init+0x2ac>)
 80028f6:	4293      	cmp	r3, r2
 80028f8:	d863      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 80028fa:	4a92      	ldr	r2, [pc, #584]	@ (8002b44 <HAL_GPIO_Init+0x2b0>)
 80028fc:	4293      	cmp	r3, r2
 80028fe:	d046      	beq.n	800298e <HAL_GPIO_Init+0xfa>
 8002900:	4a90      	ldr	r2, [pc, #576]	@ (8002b44 <HAL_GPIO_Init+0x2b0>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d85d      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 8002906:	2b12      	cmp	r3, #18
 8002908:	d82a      	bhi.n	8002960 <HAL_GPIO_Init+0xcc>
 800290a:	2b12      	cmp	r3, #18
 800290c:	d859      	bhi.n	80029c2 <HAL_GPIO_Init+0x12e>
 800290e:	a201      	add	r2, pc, #4	@ (adr r2, 8002914 <HAL_GPIO_Init+0x80>)
 8002910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002914:	0800298f 	.word	0x0800298f
 8002918:	08002969 	.word	0x08002969
 800291c:	0800297b 	.word	0x0800297b
 8002920:	080029bd 	.word	0x080029bd
 8002924:	080029c3 	.word	0x080029c3
 8002928:	080029c3 	.word	0x080029c3
 800292c:	080029c3 	.word	0x080029c3
 8002930:	080029c3 	.word	0x080029c3
 8002934:	080029c3 	.word	0x080029c3
 8002938:	080029c3 	.word	0x080029c3
 800293c:	080029c3 	.word	0x080029c3
 8002940:	080029c3 	.word	0x080029c3
 8002944:	080029c3 	.word	0x080029c3
 8002948:	080029c3 	.word	0x080029c3
 800294c:	080029c3 	.word	0x080029c3
 8002950:	080029c3 	.word	0x080029c3
 8002954:	080029c3 	.word	0x080029c3
 8002958:	08002971 	.word	0x08002971
 800295c:	08002985 	.word	0x08002985
 8002960:	4a79      	ldr	r2, [pc, #484]	@ (8002b48 <HAL_GPIO_Init+0x2b4>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d013      	beq.n	800298e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002966:	e02c      	b.n	80029c2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	68db      	ldr	r3, [r3, #12]
 800296c:	623b      	str	r3, [r7, #32]
          break;
 800296e:	e029      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	68db      	ldr	r3, [r3, #12]
 8002974:	3304      	adds	r3, #4
 8002976:	623b      	str	r3, [r7, #32]
          break;
 8002978:	e024      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	68db      	ldr	r3, [r3, #12]
 800297e:	3308      	adds	r3, #8
 8002980:	623b      	str	r3, [r7, #32]
          break;
 8002982:	e01f      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	68db      	ldr	r3, [r3, #12]
 8002988:	330c      	adds	r3, #12
 800298a:	623b      	str	r3, [r7, #32]
          break;
 800298c:	e01a      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800298e:	683b      	ldr	r3, [r7, #0]
 8002990:	689b      	ldr	r3, [r3, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d102      	bne.n	800299c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002996:	2304      	movs	r3, #4
 8002998:	623b      	str	r3, [r7, #32]
          break;
 800299a:	e013      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800299c:	683b      	ldr	r3, [r7, #0]
 800299e:	689b      	ldr	r3, [r3, #8]
 80029a0:	2b01      	cmp	r3, #1
 80029a2:	d105      	bne.n	80029b0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029a4:	2308      	movs	r3, #8
 80029a6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	69fa      	ldr	r2, [r7, #28]
 80029ac:	611a      	str	r2, [r3, #16]
          break;
 80029ae:	e009      	b.n	80029c4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80029b0:	2308      	movs	r3, #8
 80029b2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69fa      	ldr	r2, [r7, #28]
 80029b8:	615a      	str	r2, [r3, #20]
          break;
 80029ba:	e003      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80029bc:	2300      	movs	r3, #0
 80029be:	623b      	str	r3, [r7, #32]
          break;
 80029c0:	e000      	b.n	80029c4 <HAL_GPIO_Init+0x130>
          break;
 80029c2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80029c4:	69bb      	ldr	r3, [r7, #24]
 80029c6:	2bff      	cmp	r3, #255	@ 0xff
 80029c8:	d801      	bhi.n	80029ce <HAL_GPIO_Init+0x13a>
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	e001      	b.n	80029d2 <HAL_GPIO_Init+0x13e>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3304      	adds	r3, #4
 80029d2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	2bff      	cmp	r3, #255	@ 0xff
 80029d8:	d802      	bhi.n	80029e0 <HAL_GPIO_Init+0x14c>
 80029da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029dc:	009b      	lsls	r3, r3, #2
 80029de:	e002      	b.n	80029e6 <HAL_GPIO_Init+0x152>
 80029e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029e2:	3b08      	subs	r3, #8
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	681a      	ldr	r2, [r3, #0]
 80029ec:	210f      	movs	r1, #15
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	fa01 f303 	lsl.w	r3, r1, r3
 80029f4:	43db      	mvns	r3, r3
 80029f6:	401a      	ands	r2, r3
 80029f8:	6a39      	ldr	r1, [r7, #32]
 80029fa:	693b      	ldr	r3, [r7, #16]
 80029fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002a00:	431a      	orrs	r2, r3
 8002a02:	697b      	ldr	r3, [r7, #20]
 8002a04:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	685b      	ldr	r3, [r3, #4]
 8002a0a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 80b1 	beq.w	8002b76 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002a14:	4b4d      	ldr	r3, [pc, #308]	@ (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002a16:	699b      	ldr	r3, [r3, #24]
 8002a18:	4a4c      	ldr	r2, [pc, #304]	@ (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002a1a:	f043 0301 	orr.w	r3, r3, #1
 8002a1e:	6193      	str	r3, [r2, #24]
 8002a20:	4b4a      	ldr	r3, [pc, #296]	@ (8002b4c <HAL_GPIO_Init+0x2b8>)
 8002a22:	699b      	ldr	r3, [r3, #24]
 8002a24:	f003 0301 	and.w	r3, r3, #1
 8002a28:	60bb      	str	r3, [r7, #8]
 8002a2a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002a2c:	4a48      	ldr	r2, [pc, #288]	@ (8002b50 <HAL_GPIO_Init+0x2bc>)
 8002a2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a30:	089b      	lsrs	r3, r3, #2
 8002a32:	3302      	adds	r3, #2
 8002a34:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a38:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002a3a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a3c:	f003 0303 	and.w	r3, r3, #3
 8002a40:	009b      	lsls	r3, r3, #2
 8002a42:	220f      	movs	r2, #15
 8002a44:	fa02 f303 	lsl.w	r3, r2, r3
 8002a48:	43db      	mvns	r3, r3
 8002a4a:	68fa      	ldr	r2, [r7, #12]
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	4a40      	ldr	r2, [pc, #256]	@ (8002b54 <HAL_GPIO_Init+0x2c0>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d013      	beq.n	8002a80 <HAL_GPIO_Init+0x1ec>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b58 <HAL_GPIO_Init+0x2c4>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d00d      	beq.n	8002a7c <HAL_GPIO_Init+0x1e8>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	4a3e      	ldr	r2, [pc, #248]	@ (8002b5c <HAL_GPIO_Init+0x2c8>)
 8002a64:	4293      	cmp	r3, r2
 8002a66:	d007      	beq.n	8002a78 <HAL_GPIO_Init+0x1e4>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	4a3d      	ldr	r2, [pc, #244]	@ (8002b60 <HAL_GPIO_Init+0x2cc>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d101      	bne.n	8002a74 <HAL_GPIO_Init+0x1e0>
 8002a70:	2303      	movs	r3, #3
 8002a72:	e006      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a74:	2304      	movs	r3, #4
 8002a76:	e004      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a78:	2302      	movs	r3, #2
 8002a7a:	e002      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a7c:	2301      	movs	r3, #1
 8002a7e:	e000      	b.n	8002a82 <HAL_GPIO_Init+0x1ee>
 8002a80:	2300      	movs	r3, #0
 8002a82:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002a84:	f002 0203 	and.w	r2, r2, #3
 8002a88:	0092      	lsls	r2, r2, #2
 8002a8a:	4093      	lsls	r3, r2
 8002a8c:	68fa      	ldr	r2, [r7, #12]
 8002a8e:	4313      	orrs	r3, r2
 8002a90:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002a92:	492f      	ldr	r1, [pc, #188]	@ (8002b50 <HAL_GPIO_Init+0x2bc>)
 8002a94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a96:	089b      	lsrs	r3, r3, #2
 8002a98:	3302      	adds	r3, #2
 8002a9a:	68fa      	ldr	r2, [r7, #12]
 8002a9c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d006      	beq.n	8002aba <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002aac:	4b2d      	ldr	r3, [pc, #180]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002aae:	689a      	ldr	r2, [r3, #8]
 8002ab0:	492c      	ldr	r1, [pc, #176]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ab2:	69bb      	ldr	r3, [r7, #24]
 8002ab4:	4313      	orrs	r3, r2
 8002ab6:	608b      	str	r3, [r1, #8]
 8002ab8:	e006      	b.n	8002ac8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002aba:	4b2a      	ldr	r3, [pc, #168]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002abc:	689a      	ldr	r2, [r3, #8]
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	43db      	mvns	r3, r3
 8002ac2:	4928      	ldr	r1, [pc, #160]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ac4:	4013      	ands	r3, r2
 8002ac6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	685b      	ldr	r3, [r3, #4]
 8002acc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d006      	beq.n	8002ae2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ad4:	4b23      	ldr	r3, [pc, #140]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ad6:	68da      	ldr	r2, [r3, #12]
 8002ad8:	4922      	ldr	r1, [pc, #136]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ada:	69bb      	ldr	r3, [r7, #24]
 8002adc:	4313      	orrs	r3, r2
 8002ade:	60cb      	str	r3, [r1, #12]
 8002ae0:	e006      	b.n	8002af0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ae2:	4b20      	ldr	r3, [pc, #128]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002ae4:	68da      	ldr	r2, [r3, #12]
 8002ae6:	69bb      	ldr	r3, [r7, #24]
 8002ae8:	43db      	mvns	r3, r3
 8002aea:	491e      	ldr	r1, [pc, #120]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002aec:	4013      	ands	r3, r2
 8002aee:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002af0:	683b      	ldr	r3, [r7, #0]
 8002af2:	685b      	ldr	r3, [r3, #4]
 8002af4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d006      	beq.n	8002b0a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002afc:	4b19      	ldr	r3, [pc, #100]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002afe:	685a      	ldr	r2, [r3, #4]
 8002b00:	4918      	ldr	r1, [pc, #96]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b02:	69bb      	ldr	r3, [r7, #24]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	604b      	str	r3, [r1, #4]
 8002b08:	e006      	b.n	8002b18 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002b0a:	4b16      	ldr	r3, [pc, #88]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b0c:	685a      	ldr	r2, [r3, #4]
 8002b0e:	69bb      	ldr	r3, [r7, #24]
 8002b10:	43db      	mvns	r3, r3
 8002b12:	4914      	ldr	r1, [pc, #80]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b14:	4013      	ands	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b18:	683b      	ldr	r3, [r7, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d021      	beq.n	8002b68 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002b24:	4b0f      	ldr	r3, [pc, #60]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b26:	681a      	ldr	r2, [r3, #0]
 8002b28:	490e      	ldr	r1, [pc, #56]	@ (8002b64 <HAL_GPIO_Init+0x2d0>)
 8002b2a:	69bb      	ldr	r3, [r7, #24]
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	600b      	str	r3, [r1, #0]
 8002b30:	e021      	b.n	8002b76 <HAL_GPIO_Init+0x2e2>
 8002b32:	bf00      	nop
 8002b34:	10320000 	.word	0x10320000
 8002b38:	10310000 	.word	0x10310000
 8002b3c:	10220000 	.word	0x10220000
 8002b40:	10210000 	.word	0x10210000
 8002b44:	10120000 	.word	0x10120000
 8002b48:	10110000 	.word	0x10110000
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40010000 	.word	0x40010000
 8002b54:	40010800 	.word	0x40010800
 8002b58:	40010c00 	.word	0x40010c00
 8002b5c:	40011000 	.word	0x40011000
 8002b60:	40011400 	.word	0x40011400
 8002b64:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002b68:	4b0b      	ldr	r3, [pc, #44]	@ (8002b98 <HAL_GPIO_Init+0x304>)
 8002b6a:	681a      	ldr	r2, [r3, #0]
 8002b6c:	69bb      	ldr	r3, [r7, #24]
 8002b6e:	43db      	mvns	r3, r3
 8002b70:	4909      	ldr	r1, [pc, #36]	@ (8002b98 <HAL_GPIO_Init+0x304>)
 8002b72:	4013      	ands	r3, r2
 8002b74:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002b76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b78:	3301      	adds	r3, #1
 8002b7a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	681a      	ldr	r2, [r3, #0]
 8002b80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b82:	fa22 f303 	lsr.w	r3, r2, r3
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	f47f ae8e 	bne.w	80028a8 <HAL_GPIO_Init+0x14>
  }
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	372c      	adds	r7, #44	@ 0x2c
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	40010400 	.word	0x40010400

08002b9c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	807b      	strh	r3, [r7, #2]
 8002ba8:	4613      	mov	r3, r2
 8002baa:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002bac:	787b      	ldrb	r3, [r7, #1]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d003      	beq.n	8002bba <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002bb2:	887a      	ldrh	r2, [r7, #2]
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002bb8:	e003      	b.n	8002bc2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002bba:	887b      	ldrh	r3, [r7, #2]
 8002bbc:	041a      	lsls	r2, r3, #16
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	611a      	str	r2, [r3, #16]
}
 8002bc2:	bf00      	nop
 8002bc4:	370c      	adds	r7, #12
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bc80      	pop	{r7}
 8002bca:	4770      	bx	lr

08002bcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b086      	sub	sp, #24
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d101      	bne.n	8002bde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e272      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0301 	and.w	r3, r3, #1
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 8087 	beq.w	8002cfa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002bec:	4b92      	ldr	r3, [pc, #584]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002bee:	685b      	ldr	r3, [r3, #4]
 8002bf0:	f003 030c 	and.w	r3, r3, #12
 8002bf4:	2b04      	cmp	r3, #4
 8002bf6:	d00c      	beq.n	8002c12 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002bf8:	4b8f      	ldr	r3, [pc, #572]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002bfa:	685b      	ldr	r3, [r3, #4]
 8002bfc:	f003 030c 	and.w	r3, r3, #12
 8002c00:	2b08      	cmp	r3, #8
 8002c02:	d112      	bne.n	8002c2a <HAL_RCC_OscConfig+0x5e>
 8002c04:	4b8c      	ldr	r3, [pc, #560]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c06:	685b      	ldr	r3, [r3, #4]
 8002c08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c10:	d10b      	bne.n	8002c2a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c12:	4b89      	ldr	r3, [pc, #548]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d06c      	beq.n	8002cf8 <HAL_RCC_OscConfig+0x12c>
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	685b      	ldr	r3, [r3, #4]
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d168      	bne.n	8002cf8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002c26:	2301      	movs	r3, #1
 8002c28:	e24c      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002c32:	d106      	bne.n	8002c42 <HAL_RCC_OscConfig+0x76>
 8002c34:	4b80      	ldr	r3, [pc, #512]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a7f      	ldr	r2, [pc, #508]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c3a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c3e:	6013      	str	r3, [r2, #0]
 8002c40:	e02e      	b.n	8002ca0 <HAL_RCC_OscConfig+0xd4>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d10c      	bne.n	8002c64 <HAL_RCC_OscConfig+0x98>
 8002c4a:	4b7b      	ldr	r3, [pc, #492]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	4a7a      	ldr	r2, [pc, #488]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c50:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c54:	6013      	str	r3, [r2, #0]
 8002c56:	4b78      	ldr	r3, [pc, #480]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a77      	ldr	r2, [pc, #476]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c5c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c60:	6013      	str	r3, [r2, #0]
 8002c62:	e01d      	b.n	8002ca0 <HAL_RCC_OscConfig+0xd4>
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	685b      	ldr	r3, [r3, #4]
 8002c68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002c6c:	d10c      	bne.n	8002c88 <HAL_RCC_OscConfig+0xbc>
 8002c6e:	4b72      	ldr	r3, [pc, #456]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4a71      	ldr	r2, [pc, #452]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002c78:	6013      	str	r3, [r2, #0]
 8002c7a:	4b6f      	ldr	r3, [pc, #444]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	4a6e      	ldr	r2, [pc, #440]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002c84:	6013      	str	r3, [r2, #0]
 8002c86:	e00b      	b.n	8002ca0 <HAL_RCC_OscConfig+0xd4>
 8002c88:	4b6b      	ldr	r3, [pc, #428]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a6a      	ldr	r2, [pc, #424]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c8e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002c92:	6013      	str	r3, [r2, #0]
 8002c94:	4b68      	ldr	r3, [pc, #416]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	4a67      	ldr	r2, [pc, #412]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002c9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002c9e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	685b      	ldr	r3, [r3, #4]
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d013      	beq.n	8002cd0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ca8:	f7ff fc06 	bl	80024b8 <HAL_GetTick>
 8002cac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cae:	e008      	b.n	8002cc2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cb0:	f7ff fc02 	bl	80024b8 <HAL_GetTick>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	693b      	ldr	r3, [r7, #16]
 8002cb8:	1ad3      	subs	r3, r2, r3
 8002cba:	2b64      	cmp	r3, #100	@ 0x64
 8002cbc:	d901      	bls.n	8002cc2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002cbe:	2303      	movs	r3, #3
 8002cc0:	e200      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cc2:	4b5d      	ldr	r3, [pc, #372]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d0f0      	beq.n	8002cb0 <HAL_RCC_OscConfig+0xe4>
 8002cce:	e014      	b.n	8002cfa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cd0:	f7ff fbf2 	bl	80024b8 <HAL_GetTick>
 8002cd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cd6:	e008      	b.n	8002cea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002cd8:	f7ff fbee 	bl	80024b8 <HAL_GetTick>
 8002cdc:	4602      	mov	r2, r0
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	1ad3      	subs	r3, r2, r3
 8002ce2:	2b64      	cmp	r3, #100	@ 0x64
 8002ce4:	d901      	bls.n	8002cea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ce6:	2303      	movs	r3, #3
 8002ce8:	e1ec      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002cea:	4b53      	ldr	r3, [pc, #332]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d1f0      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x10c>
 8002cf6:	e000      	b.n	8002cfa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cf8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d063      	beq.n	8002dce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002d06:	4b4c      	ldr	r3, [pc, #304]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	f003 030c 	and.w	r3, r3, #12
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d00b      	beq.n	8002d2a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002d12:	4b49      	ldr	r3, [pc, #292]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002d14:	685b      	ldr	r3, [r3, #4]
 8002d16:	f003 030c 	and.w	r3, r3, #12
 8002d1a:	2b08      	cmp	r3, #8
 8002d1c:	d11c      	bne.n	8002d58 <HAL_RCC_OscConfig+0x18c>
 8002d1e:	4b46      	ldr	r3, [pc, #280]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002d20:	685b      	ldr	r3, [r3, #4]
 8002d22:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d116      	bne.n	8002d58 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d2a:	4b43      	ldr	r3, [pc, #268]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	f003 0302 	and.w	r3, r3, #2
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d005      	beq.n	8002d42 <HAL_RCC_OscConfig+0x176>
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b01      	cmp	r3, #1
 8002d3c:	d001      	beq.n	8002d42 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e1c0      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d42:	4b3d      	ldr	r3, [pc, #244]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	695b      	ldr	r3, [r3, #20]
 8002d4e:	00db      	lsls	r3, r3, #3
 8002d50:	4939      	ldr	r1, [pc, #228]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002d52:	4313      	orrs	r3, r2
 8002d54:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002d56:	e03a      	b.n	8002dce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	691b      	ldr	r3, [r3, #16]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d020      	beq.n	8002da2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002d60:	4b36      	ldr	r3, [pc, #216]	@ (8002e3c <HAL_RCC_OscConfig+0x270>)
 8002d62:	2201      	movs	r2, #1
 8002d64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d66:	f7ff fba7 	bl	80024b8 <HAL_GetTick>
 8002d6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d6c:	e008      	b.n	8002d80 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002d6e:	f7ff fba3 	bl	80024b8 <HAL_GetTick>
 8002d72:	4602      	mov	r2, r0
 8002d74:	693b      	ldr	r3, [r7, #16]
 8002d76:	1ad3      	subs	r3, r2, r3
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d901      	bls.n	8002d80 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002d7c:	2303      	movs	r3, #3
 8002d7e:	e1a1      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d80:	4b2d      	ldr	r3, [pc, #180]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	f003 0302 	and.w	r3, r3, #2
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d0f0      	beq.n	8002d6e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002d8c:	4b2a      	ldr	r3, [pc, #168]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	695b      	ldr	r3, [r3, #20]
 8002d98:	00db      	lsls	r3, r3, #3
 8002d9a:	4927      	ldr	r1, [pc, #156]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	600b      	str	r3, [r1, #0]
 8002da0:	e015      	b.n	8002dce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002da2:	4b26      	ldr	r3, [pc, #152]	@ (8002e3c <HAL_RCC_OscConfig+0x270>)
 8002da4:	2200      	movs	r2, #0
 8002da6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7ff fb86 	bl	80024b8 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002db0:	f7ff fb82 	bl	80024b8 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e180      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002dc2:	4b1d      	ldr	r3, [pc, #116]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d1f0      	bne.n	8002db0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f003 0308 	and.w	r3, r3, #8
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d03a      	beq.n	8002e50 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	699b      	ldr	r3, [r3, #24]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d019      	beq.n	8002e16 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002de2:	4b17      	ldr	r3, [pc, #92]	@ (8002e40 <HAL_RCC_OscConfig+0x274>)
 8002de4:	2201      	movs	r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002de8:	f7ff fb66 	bl	80024b8 <HAL_GetTick>
 8002dec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002dee:	e008      	b.n	8002e02 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002df0:	f7ff fb62 	bl	80024b8 <HAL_GetTick>
 8002df4:	4602      	mov	r2, r0
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	1ad3      	subs	r3, r2, r3
 8002dfa:	2b02      	cmp	r3, #2
 8002dfc:	d901      	bls.n	8002e02 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002dfe:	2303      	movs	r3, #3
 8002e00:	e160      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e02:	4b0d      	ldr	r3, [pc, #52]	@ (8002e38 <HAL_RCC_OscConfig+0x26c>)
 8002e04:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e06:	f003 0302 	and.w	r3, r3, #2
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d0f0      	beq.n	8002df0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002e0e:	2001      	movs	r0, #1
 8002e10:	f000 face 	bl	80033b0 <RCC_Delay>
 8002e14:	e01c      	b.n	8002e50 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002e16:	4b0a      	ldr	r3, [pc, #40]	@ (8002e40 <HAL_RCC_OscConfig+0x274>)
 8002e18:	2200      	movs	r2, #0
 8002e1a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e1c:	f7ff fb4c 	bl	80024b8 <HAL_GetTick>
 8002e20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e22:	e00f      	b.n	8002e44 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002e24:	f7ff fb48 	bl	80024b8 <HAL_GetTick>
 8002e28:	4602      	mov	r2, r0
 8002e2a:	693b      	ldr	r3, [r7, #16]
 8002e2c:	1ad3      	subs	r3, r2, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d908      	bls.n	8002e44 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e146      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
 8002e36:	bf00      	nop
 8002e38:	40021000 	.word	0x40021000
 8002e3c:	42420000 	.word	0x42420000
 8002e40:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002e44:	4b92      	ldr	r3, [pc, #584]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002e46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e48:	f003 0302 	and.w	r3, r3, #2
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d1e9      	bne.n	8002e24 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	f003 0304 	and.w	r3, r3, #4
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	f000 80a6 	beq.w	8002faa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002e62:	4b8b      	ldr	r3, [pc, #556]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002e64:	69db      	ldr	r3, [r3, #28]
 8002e66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10d      	bne.n	8002e8a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002e6e:	4b88      	ldr	r3, [pc, #544]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002e70:	69db      	ldr	r3, [r3, #28]
 8002e72:	4a87      	ldr	r2, [pc, #540]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002e74:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002e78:	61d3      	str	r3, [r2, #28]
 8002e7a:	4b85      	ldr	r3, [pc, #532]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002e7c:	69db      	ldr	r3, [r3, #28]
 8002e7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e82:	60bb      	str	r3, [r7, #8]
 8002e84:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002e86:	2301      	movs	r3, #1
 8002e88:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002e8a:	4b82      	ldr	r3, [pc, #520]	@ (8003094 <HAL_RCC_OscConfig+0x4c8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d118      	bne.n	8002ec8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002e96:	4b7f      	ldr	r3, [pc, #508]	@ (8003094 <HAL_RCC_OscConfig+0x4c8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4a7e      	ldr	r2, [pc, #504]	@ (8003094 <HAL_RCC_OscConfig+0x4c8>)
 8002e9c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002ea0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002ea2:	f7ff fb09 	bl	80024b8 <HAL_GetTick>
 8002ea6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ea8:	e008      	b.n	8002ebc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002eaa:	f7ff fb05 	bl	80024b8 <HAL_GetTick>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	693b      	ldr	r3, [r7, #16]
 8002eb2:	1ad3      	subs	r3, r2, r3
 8002eb4:	2b64      	cmp	r3, #100	@ 0x64
 8002eb6:	d901      	bls.n	8002ebc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002eb8:	2303      	movs	r3, #3
 8002eba:	e103      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ebc:	4b75      	ldr	r3, [pc, #468]	@ (8003094 <HAL_RCC_OscConfig+0x4c8>)
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d0f0      	beq.n	8002eaa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d106      	bne.n	8002ede <HAL_RCC_OscConfig+0x312>
 8002ed0:	4b6f      	ldr	r3, [pc, #444]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4a6e      	ldr	r2, [pc, #440]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002ed6:	f043 0301 	orr.w	r3, r3, #1
 8002eda:	6213      	str	r3, [r2, #32]
 8002edc:	e02d      	b.n	8002f3a <HAL_RCC_OscConfig+0x36e>
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	68db      	ldr	r3, [r3, #12]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d10c      	bne.n	8002f00 <HAL_RCC_OscConfig+0x334>
 8002ee6:	4b6a      	ldr	r3, [pc, #424]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002ee8:	6a1b      	ldr	r3, [r3, #32]
 8002eea:	4a69      	ldr	r2, [pc, #420]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002eec:	f023 0301 	bic.w	r3, r3, #1
 8002ef0:	6213      	str	r3, [r2, #32]
 8002ef2:	4b67      	ldr	r3, [pc, #412]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002ef4:	6a1b      	ldr	r3, [r3, #32]
 8002ef6:	4a66      	ldr	r2, [pc, #408]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002ef8:	f023 0304 	bic.w	r3, r3, #4
 8002efc:	6213      	str	r3, [r2, #32]
 8002efe:	e01c      	b.n	8002f3a <HAL_RCC_OscConfig+0x36e>
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	68db      	ldr	r3, [r3, #12]
 8002f04:	2b05      	cmp	r3, #5
 8002f06:	d10c      	bne.n	8002f22 <HAL_RCC_OscConfig+0x356>
 8002f08:	4b61      	ldr	r3, [pc, #388]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f0a:	6a1b      	ldr	r3, [r3, #32]
 8002f0c:	4a60      	ldr	r2, [pc, #384]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f0e:	f043 0304 	orr.w	r3, r3, #4
 8002f12:	6213      	str	r3, [r2, #32]
 8002f14:	4b5e      	ldr	r3, [pc, #376]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f16:	6a1b      	ldr	r3, [r3, #32]
 8002f18:	4a5d      	ldr	r2, [pc, #372]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f1a:	f043 0301 	orr.w	r3, r3, #1
 8002f1e:	6213      	str	r3, [r2, #32]
 8002f20:	e00b      	b.n	8002f3a <HAL_RCC_OscConfig+0x36e>
 8002f22:	4b5b      	ldr	r3, [pc, #364]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f24:	6a1b      	ldr	r3, [r3, #32]
 8002f26:	4a5a      	ldr	r2, [pc, #360]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f28:	f023 0301 	bic.w	r3, r3, #1
 8002f2c:	6213      	str	r3, [r2, #32]
 8002f2e:	4b58      	ldr	r3, [pc, #352]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f30:	6a1b      	ldr	r3, [r3, #32]
 8002f32:	4a57      	ldr	r2, [pc, #348]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f34:	f023 0304 	bic.w	r3, r3, #4
 8002f38:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	68db      	ldr	r3, [r3, #12]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d015      	beq.n	8002f6e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f42:	f7ff fab9 	bl	80024b8 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f48:	e00a      	b.n	8002f60 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f4a:	f7ff fab5 	bl	80024b8 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f58:	4293      	cmp	r3, r2
 8002f5a:	d901      	bls.n	8002f60 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002f5c:	2303      	movs	r3, #3
 8002f5e:	e0b1      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002f60:	4b4b      	ldr	r3, [pc, #300]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f62:	6a1b      	ldr	r3, [r3, #32]
 8002f64:	f003 0302 	and.w	r3, r3, #2
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d0ee      	beq.n	8002f4a <HAL_RCC_OscConfig+0x37e>
 8002f6c:	e014      	b.n	8002f98 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f6e:	f7ff faa3 	bl	80024b8 <HAL_GetTick>
 8002f72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f74:	e00a      	b.n	8002f8c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002f76:	f7ff fa9f 	bl	80024b8 <HAL_GetTick>
 8002f7a:	4602      	mov	r2, r0
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	1ad3      	subs	r3, r2, r3
 8002f80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d901      	bls.n	8002f8c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002f88:	2303      	movs	r3, #3
 8002f8a:	e09b      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002f8c:	4b40      	ldr	r3, [pc, #256]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002f8e:	6a1b      	ldr	r3, [r3, #32]
 8002f90:	f003 0302 	and.w	r3, r3, #2
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d1ee      	bne.n	8002f76 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002f98:	7dfb      	ldrb	r3, [r7, #23]
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d105      	bne.n	8002faa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002f9e:	4b3c      	ldr	r3, [pc, #240]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002fa0:	69db      	ldr	r3, [r3, #28]
 8002fa2:	4a3b      	ldr	r2, [pc, #236]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002fa4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002fa8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	69db      	ldr	r3, [r3, #28]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8087 	beq.w	80030c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002fb4:	4b36      	ldr	r3, [pc, #216]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	f003 030c 	and.w	r3, r3, #12
 8002fbc:	2b08      	cmp	r3, #8
 8002fbe:	d061      	beq.n	8003084 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	69db      	ldr	r3, [r3, #28]
 8002fc4:	2b02      	cmp	r3, #2
 8002fc6:	d146      	bne.n	8003056 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002fc8:	4b33      	ldr	r3, [pc, #204]	@ (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8002fca:	2200      	movs	r2, #0
 8002fcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fce:	f7ff fa73 	bl	80024b8 <HAL_GetTick>
 8002fd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fd4:	e008      	b.n	8002fe8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002fd6:	f7ff fa6f 	bl	80024b8 <HAL_GetTick>
 8002fda:	4602      	mov	r2, r0
 8002fdc:	693b      	ldr	r3, [r7, #16]
 8002fde:	1ad3      	subs	r3, r2, r3
 8002fe0:	2b02      	cmp	r3, #2
 8002fe2:	d901      	bls.n	8002fe8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002fe4:	2303      	movs	r3, #3
 8002fe6:	e06d      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002fe8:	4b29      	ldr	r3, [pc, #164]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d1f0      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	6a1b      	ldr	r3, [r3, #32]
 8002ff8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ffc:	d108      	bne.n	8003010 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002ffe:	4b24      	ldr	r3, [pc, #144]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8003000:	685b      	ldr	r3, [r3, #4]
 8003002:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	4921      	ldr	r1, [pc, #132]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 800300c:	4313      	orrs	r3, r2
 800300e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003010:	4b1f      	ldr	r3, [pc, #124]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6a19      	ldr	r1, [r3, #32]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003020:	430b      	orrs	r3, r1
 8003022:	491b      	ldr	r1, [pc, #108]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8003024:	4313      	orrs	r3, r2
 8003026:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003028:	4b1b      	ldr	r3, [pc, #108]	@ (8003098 <HAL_RCC_OscConfig+0x4cc>)
 800302a:	2201      	movs	r2, #1
 800302c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800302e:	f7ff fa43 	bl	80024b8 <HAL_GetTick>
 8003032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003034:	e008      	b.n	8003048 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003036:	f7ff fa3f 	bl	80024b8 <HAL_GetTick>
 800303a:	4602      	mov	r2, r0
 800303c:	693b      	ldr	r3, [r7, #16]
 800303e:	1ad3      	subs	r3, r2, r3
 8003040:	2b02      	cmp	r3, #2
 8003042:	d901      	bls.n	8003048 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003044:	2303      	movs	r3, #3
 8003046:	e03d      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003048:	4b11      	ldr	r3, [pc, #68]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003050:	2b00      	cmp	r3, #0
 8003052:	d0f0      	beq.n	8003036 <HAL_RCC_OscConfig+0x46a>
 8003054:	e035      	b.n	80030c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003056:	4b10      	ldr	r3, [pc, #64]	@ (8003098 <HAL_RCC_OscConfig+0x4cc>)
 8003058:	2200      	movs	r2, #0
 800305a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800305c:	f7ff fa2c 	bl	80024b8 <HAL_GetTick>
 8003060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003062:	e008      	b.n	8003076 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003064:	f7ff fa28 	bl	80024b8 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	693b      	ldr	r3, [r7, #16]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	2b02      	cmp	r3, #2
 8003070:	d901      	bls.n	8003076 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003072:	2303      	movs	r3, #3
 8003074:	e026      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003076:	4b06      	ldr	r3, [pc, #24]	@ (8003090 <HAL_RCC_OscConfig+0x4c4>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d1f0      	bne.n	8003064 <HAL_RCC_OscConfig+0x498>
 8003082:	e01e      	b.n	80030c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	2b01      	cmp	r3, #1
 800308a:	d107      	bne.n	800309c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800308c:	2301      	movs	r3, #1
 800308e:	e019      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
 8003090:	40021000 	.word	0x40021000
 8003094:	40007000 	.word	0x40007000
 8003098:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800309c:	4b0b      	ldr	r3, [pc, #44]	@ (80030cc <HAL_RCC_OscConfig+0x500>)
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	6a1b      	ldr	r3, [r3, #32]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d106      	bne.n	80030be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80030ba:	429a      	cmp	r2, r3
 80030bc:	d001      	beq.n	80030c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e000      	b.n	80030c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80030c2:	2300      	movs	r3, #0
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3718      	adds	r7, #24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	bd80      	pop	{r7, pc}
 80030cc:	40021000 	.word	0x40021000

080030d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b084      	sub	sp, #16
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d101      	bne.n	80030e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80030e0:	2301      	movs	r3, #1
 80030e2:	e0d0      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80030e4:	4b6a      	ldr	r3, [pc, #424]	@ (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	683a      	ldr	r2, [r7, #0]
 80030ee:	429a      	cmp	r2, r3
 80030f0:	d910      	bls.n	8003114 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80030f2:	4b67      	ldr	r3, [pc, #412]	@ (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	f023 0207 	bic.w	r2, r3, #7
 80030fa:	4965      	ldr	r1, [pc, #404]	@ (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	4313      	orrs	r3, r2
 8003100:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003102:	4b63      	ldr	r3, [pc, #396]	@ (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f003 0307 	and.w	r3, r3, #7
 800310a:	683a      	ldr	r2, [r7, #0]
 800310c:	429a      	cmp	r2, r3
 800310e:	d001      	beq.n	8003114 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003110:	2301      	movs	r3, #1
 8003112:	e0b8      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	f003 0302 	and.w	r3, r3, #2
 800311c:	2b00      	cmp	r3, #0
 800311e:	d020      	beq.n	8003162 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d005      	beq.n	8003138 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800312c:	4b59      	ldr	r3, [pc, #356]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	4a58      	ldr	r2, [pc, #352]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003132:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003136:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 0308 	and.w	r3, r3, #8
 8003140:	2b00      	cmp	r3, #0
 8003142:	d005      	beq.n	8003150 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003144:	4b53      	ldr	r3, [pc, #332]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003146:	685b      	ldr	r3, [r3, #4]
 8003148:	4a52      	ldr	r2, [pc, #328]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800314a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800314e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003150:	4b50      	ldr	r3, [pc, #320]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	689b      	ldr	r3, [r3, #8]
 800315c:	494d      	ldr	r1, [pc, #308]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800315e:	4313      	orrs	r3, r2
 8003160:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0301 	and.w	r3, r3, #1
 800316a:	2b00      	cmp	r3, #0
 800316c:	d040      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	685b      	ldr	r3, [r3, #4]
 8003172:	2b01      	cmp	r3, #1
 8003174:	d107      	bne.n	8003186 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003176:	4b47      	ldr	r3, [pc, #284]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d115      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	e07f      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	2b02      	cmp	r3, #2
 800318c:	d107      	bne.n	800319e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800318e:	4b41      	ldr	r3, [pc, #260]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	e073      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800319e:	4b3d      	ldr	r3, [pc, #244]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f003 0302 	and.w	r3, r3, #2
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d101      	bne.n	80031ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80031aa:	2301      	movs	r3, #1
 80031ac:	e06b      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80031ae:	4b39      	ldr	r3, [pc, #228]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	f023 0203 	bic.w	r2, r3, #3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	4936      	ldr	r1, [pc, #216]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031bc:	4313      	orrs	r3, r2
 80031be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80031c0:	f7ff f97a 	bl	80024b8 <HAL_GetTick>
 80031c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031c6:	e00a      	b.n	80031de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80031c8:	f7ff f976 	bl	80024b8 <HAL_GetTick>
 80031cc:	4602      	mov	r2, r0
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	1ad3      	subs	r3, r2, r3
 80031d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d901      	bls.n	80031de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80031da:	2303      	movs	r3, #3
 80031dc:	e053      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80031de:	4b2d      	ldr	r3, [pc, #180]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f003 020c 	and.w	r2, r3, #12
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	429a      	cmp	r2, r3
 80031ee:	d1eb      	bne.n	80031c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80031f0:	4b27      	ldr	r3, [pc, #156]	@ (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	683a      	ldr	r2, [r7, #0]
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d210      	bcs.n	8003220 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031fe:	4b24      	ldr	r3, [pc, #144]	@ (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f023 0207 	bic.w	r2, r3, #7
 8003206:	4922      	ldr	r1, [pc, #136]	@ (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	4313      	orrs	r3, r2
 800320c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800320e:	4b20      	ldr	r3, [pc, #128]	@ (8003290 <HAL_RCC_ClockConfig+0x1c0>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	f003 0307 	and.w	r3, r3, #7
 8003216:	683a      	ldr	r2, [r7, #0]
 8003218:	429a      	cmp	r2, r3
 800321a:	d001      	beq.n	8003220 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800321c:	2301      	movs	r3, #1
 800321e:	e032      	b.n	8003286 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d008      	beq.n	800323e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800322c:	4b19      	ldr	r3, [pc, #100]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	68db      	ldr	r3, [r3, #12]
 8003238:	4916      	ldr	r1, [pc, #88]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800323a:	4313      	orrs	r3, r2
 800323c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	681b      	ldr	r3, [r3, #0]
 8003242:	f003 0308 	and.w	r3, r3, #8
 8003246:	2b00      	cmp	r3, #0
 8003248:	d009      	beq.n	800325e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800324a:	4b12      	ldr	r3, [pc, #72]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	691b      	ldr	r3, [r3, #16]
 8003256:	00db      	lsls	r3, r3, #3
 8003258:	490e      	ldr	r1, [pc, #56]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 800325a:	4313      	orrs	r3, r2
 800325c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800325e:	f000 f821 	bl	80032a4 <HAL_RCC_GetSysClockFreq>
 8003262:	4602      	mov	r2, r0
 8003264:	4b0b      	ldr	r3, [pc, #44]	@ (8003294 <HAL_RCC_ClockConfig+0x1c4>)
 8003266:	685b      	ldr	r3, [r3, #4]
 8003268:	091b      	lsrs	r3, r3, #4
 800326a:	f003 030f 	and.w	r3, r3, #15
 800326e:	490a      	ldr	r1, [pc, #40]	@ (8003298 <HAL_RCC_ClockConfig+0x1c8>)
 8003270:	5ccb      	ldrb	r3, [r1, r3]
 8003272:	fa22 f303 	lsr.w	r3, r2, r3
 8003276:	4a09      	ldr	r2, [pc, #36]	@ (800329c <HAL_RCC_ClockConfig+0x1cc>)
 8003278:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800327a:	4b09      	ldr	r3, [pc, #36]	@ (80032a0 <HAL_RCC_ClockConfig+0x1d0>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff f8d8 	bl	8002434 <HAL_InitTick>

  return HAL_OK;
 8003284:	2300      	movs	r3, #0
}
 8003286:	4618      	mov	r0, r3
 8003288:	3710      	adds	r7, #16
 800328a:	46bd      	mov	sp, r7
 800328c:	bd80      	pop	{r7, pc}
 800328e:	bf00      	nop
 8003290:	40022000 	.word	0x40022000
 8003294:	40021000 	.word	0x40021000
 8003298:	08008380 	.word	0x08008380
 800329c:	20000000 	.word	0x20000000
 80032a0:	20000004 	.word	0x20000004

080032a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b087      	sub	sp, #28
 80032a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80032aa:	2300      	movs	r3, #0
 80032ac:	60fb      	str	r3, [r7, #12]
 80032ae:	2300      	movs	r3, #0
 80032b0:	60bb      	str	r3, [r7, #8]
 80032b2:	2300      	movs	r3, #0
 80032b4:	617b      	str	r3, [r7, #20]
 80032b6:	2300      	movs	r3, #0
 80032b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80032ba:	2300      	movs	r3, #0
 80032bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80032be:	4b1e      	ldr	r3, [pc, #120]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x94>)
 80032c0:	685b      	ldr	r3, [r3, #4]
 80032c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	f003 030c 	and.w	r3, r3, #12
 80032ca:	2b04      	cmp	r3, #4
 80032cc:	d002      	beq.n	80032d4 <HAL_RCC_GetSysClockFreq+0x30>
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d003      	beq.n	80032da <HAL_RCC_GetSysClockFreq+0x36>
 80032d2:	e027      	b.n	8003324 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80032d4:	4b19      	ldr	r3, [pc, #100]	@ (800333c <HAL_RCC_GetSysClockFreq+0x98>)
 80032d6:	613b      	str	r3, [r7, #16]
      break;
 80032d8:	e027      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	0c9b      	lsrs	r3, r3, #18
 80032de:	f003 030f 	and.w	r3, r3, #15
 80032e2:	4a17      	ldr	r2, [pc, #92]	@ (8003340 <HAL_RCC_GetSysClockFreq+0x9c>)
 80032e4:	5cd3      	ldrb	r3, [r2, r3]
 80032e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d010      	beq.n	8003314 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80032f2:	4b11      	ldr	r3, [pc, #68]	@ (8003338 <HAL_RCC_GetSysClockFreq+0x94>)
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	0c5b      	lsrs	r3, r3, #17
 80032f8:	f003 0301 	and.w	r3, r3, #1
 80032fc:	4a11      	ldr	r2, [pc, #68]	@ (8003344 <HAL_RCC_GetSysClockFreq+0xa0>)
 80032fe:	5cd3      	ldrb	r3, [r2, r3]
 8003300:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	4a0d      	ldr	r2, [pc, #52]	@ (800333c <HAL_RCC_GetSysClockFreq+0x98>)
 8003306:	fb03 f202 	mul.w	r2, r3, r2
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	617b      	str	r3, [r7, #20]
 8003312:	e004      	b.n	800331e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	4a0c      	ldr	r2, [pc, #48]	@ (8003348 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003318:	fb02 f303 	mul.w	r3, r2, r3
 800331c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	613b      	str	r3, [r7, #16]
      break;
 8003322:	e002      	b.n	800332a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003324:	4b05      	ldr	r3, [pc, #20]	@ (800333c <HAL_RCC_GetSysClockFreq+0x98>)
 8003326:	613b      	str	r3, [r7, #16]
      break;
 8003328:	bf00      	nop
    }
  }
  return sysclockfreq;
 800332a:	693b      	ldr	r3, [r7, #16]
}
 800332c:	4618      	mov	r0, r3
 800332e:	371c      	adds	r7, #28
 8003330:	46bd      	mov	sp, r7
 8003332:	bc80      	pop	{r7}
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40021000 	.word	0x40021000
 800333c:	007a1200 	.word	0x007a1200
 8003340:	08008398 	.word	0x08008398
 8003344:	080083a8 	.word	0x080083a8
 8003348:	003d0900 	.word	0x003d0900

0800334c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800334c:	b480      	push	{r7}
 800334e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003350:	4b02      	ldr	r3, [pc, #8]	@ (800335c <HAL_RCC_GetHCLKFreq+0x10>)
 8003352:	681b      	ldr	r3, [r3, #0]
}
 8003354:	4618      	mov	r0, r3
 8003356:	46bd      	mov	sp, r7
 8003358:	bc80      	pop	{r7}
 800335a:	4770      	bx	lr
 800335c:	20000000 	.word	0x20000000

08003360 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003360:	b580      	push	{r7, lr}
 8003362:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003364:	f7ff fff2 	bl	800334c <HAL_RCC_GetHCLKFreq>
 8003368:	4602      	mov	r2, r0
 800336a:	4b05      	ldr	r3, [pc, #20]	@ (8003380 <HAL_RCC_GetPCLK1Freq+0x20>)
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	0a1b      	lsrs	r3, r3, #8
 8003370:	f003 0307 	and.w	r3, r3, #7
 8003374:	4903      	ldr	r1, [pc, #12]	@ (8003384 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003376:	5ccb      	ldrb	r3, [r1, r3]
 8003378:	fa22 f303 	lsr.w	r3, r2, r3
}
 800337c:	4618      	mov	r0, r3
 800337e:	bd80      	pop	{r7, pc}
 8003380:	40021000 	.word	0x40021000
 8003384:	08008390 	.word	0x08008390

08003388 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800338c:	f7ff ffde 	bl	800334c <HAL_RCC_GetHCLKFreq>
 8003390:	4602      	mov	r2, r0
 8003392:	4b05      	ldr	r3, [pc, #20]	@ (80033a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	0adb      	lsrs	r3, r3, #11
 8003398:	f003 0307 	and.w	r3, r3, #7
 800339c:	4903      	ldr	r1, [pc, #12]	@ (80033ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800339e:	5ccb      	ldrb	r3, [r1, r3]
 80033a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033a4:	4618      	mov	r0, r3
 80033a6:	bd80      	pop	{r7, pc}
 80033a8:	40021000 	.word	0x40021000
 80033ac:	08008390 	.word	0x08008390

080033b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80033b0:	b480      	push	{r7}
 80033b2:	b085      	sub	sp, #20
 80033b4:	af00      	add	r7, sp, #0
 80033b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80033b8:	4b0a      	ldr	r3, [pc, #40]	@ (80033e4 <RCC_Delay+0x34>)
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	4a0a      	ldr	r2, [pc, #40]	@ (80033e8 <RCC_Delay+0x38>)
 80033be:	fba2 2303 	umull	r2, r3, r2, r3
 80033c2:	0a5b      	lsrs	r3, r3, #9
 80033c4:	687a      	ldr	r2, [r7, #4]
 80033c6:	fb02 f303 	mul.w	r3, r2, r3
 80033ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80033cc:	bf00      	nop
  }
  while (Delay --);
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	1e5a      	subs	r2, r3, #1
 80033d2:	60fa      	str	r2, [r7, #12]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d1f9      	bne.n	80033cc <RCC_Delay+0x1c>
}
 80033d8:	bf00      	nop
 80033da:	bf00      	nop
 80033dc:	3714      	adds	r7, #20
 80033de:	46bd      	mov	sp, r7
 80033e0:	bc80      	pop	{r7}
 80033e2:	4770      	bx	lr
 80033e4:	20000000 	.word	0x20000000
 80033e8:	10624dd3 	.word	0x10624dd3

080033ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b082      	sub	sp, #8
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d101      	bne.n	80033fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e041      	b.n	8003482 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003404:	b2db      	uxtb	r3, r3
 8003406:	2b00      	cmp	r3, #0
 8003408:	d106      	bne.n	8003418 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	2200      	movs	r2, #0
 800340e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003412:	6878      	ldr	r0, [r7, #4]
 8003414:	f7fe ff02 	bl	800221c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2202      	movs	r2, #2
 800341c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	3304      	adds	r3, #4
 8003428:	4619      	mov	r1, r3
 800342a:	4610      	mov	r0, r2
 800342c:	f000 fab2 	bl	8003994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2201      	movs	r2, #1
 8003434:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2201      	movs	r2, #1
 800343c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	2201      	movs	r2, #1
 8003454:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	2201      	movs	r2, #1
 800345c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	2201      	movs	r2, #1
 8003464:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	2201      	movs	r2, #1
 800346c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3708      	adds	r7, #8
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800348a:	b580      	push	{r7, lr}
 800348c:	b082      	sub	sp, #8
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d101      	bne.n	800349c <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003498:	2301      	movs	r3, #1
 800349a:	e041      	b.n	8003520 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d106      	bne.n	80034b6 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80034b0:	6878      	ldr	r0, [r7, #4]
 80034b2:	f000 f839 	bl	8003528 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2202      	movs	r2, #2
 80034ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	3304      	adds	r3, #4
 80034c6:	4619      	mov	r1, r3
 80034c8:	4610      	mov	r0, r2
 80034ca:	f000 fa63 	bl	8003994 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2201      	movs	r2, #1
 80034d2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2201      	movs	r2, #1
 80034da:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	2201      	movs	r2, #1
 80034ea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	2201      	movs	r2, #1
 80034f2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2201      	movs	r2, #1
 80034fa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	2201      	movs	r2, #1
 8003502:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2201      	movs	r2, #1
 8003512:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	2201      	movs	r2, #1
 800351a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800351e:	2300      	movs	r3, #0
}
 8003520:	4618      	mov	r0, r3
 8003522:	3708      	adds	r7, #8
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}

08003528 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003528:	b480      	push	{r7}
 800352a:	b083      	sub	sp, #12
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003530:	bf00      	nop
 8003532:	370c      	adds	r7, #12
 8003534:	46bd      	mov	sp, r7
 8003536:	bc80      	pop	{r7}
 8003538:	4770      	bx	lr
	...

0800353c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800353c:	b580      	push	{r7, lr}
 800353e:	b084      	sub	sp, #16
 8003540:	af00      	add	r7, sp, #0
 8003542:	6078      	str	r0, [r7, #4]
 8003544:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003546:	683b      	ldr	r3, [r7, #0]
 8003548:	2b00      	cmp	r3, #0
 800354a:	d109      	bne.n	8003560 <HAL_TIM_PWM_Start+0x24>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003552:	b2db      	uxtb	r3, r3
 8003554:	2b01      	cmp	r3, #1
 8003556:	bf14      	ite	ne
 8003558:	2301      	movne	r3, #1
 800355a:	2300      	moveq	r3, #0
 800355c:	b2db      	uxtb	r3, r3
 800355e:	e022      	b.n	80035a6 <HAL_TIM_PWM_Start+0x6a>
 8003560:	683b      	ldr	r3, [r7, #0]
 8003562:	2b04      	cmp	r3, #4
 8003564:	d109      	bne.n	800357a <HAL_TIM_PWM_Start+0x3e>
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800356c:	b2db      	uxtb	r3, r3
 800356e:	2b01      	cmp	r3, #1
 8003570:	bf14      	ite	ne
 8003572:	2301      	movne	r3, #1
 8003574:	2300      	moveq	r3, #0
 8003576:	b2db      	uxtb	r3, r3
 8003578:	e015      	b.n	80035a6 <HAL_TIM_PWM_Start+0x6a>
 800357a:	683b      	ldr	r3, [r7, #0]
 800357c:	2b08      	cmp	r3, #8
 800357e:	d109      	bne.n	8003594 <HAL_TIM_PWM_Start+0x58>
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003586:	b2db      	uxtb	r3, r3
 8003588:	2b01      	cmp	r3, #1
 800358a:	bf14      	ite	ne
 800358c:	2301      	movne	r3, #1
 800358e:	2300      	moveq	r3, #0
 8003590:	b2db      	uxtb	r3, r3
 8003592:	e008      	b.n	80035a6 <HAL_TIM_PWM_Start+0x6a>
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	bf14      	ite	ne
 80035a0:	2301      	movne	r3, #1
 80035a2:	2300      	moveq	r3, #0
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d001      	beq.n	80035ae <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80035aa:	2301      	movs	r3, #1
 80035ac:	e05e      	b.n	800366c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d104      	bne.n	80035be <HAL_TIM_PWM_Start+0x82>
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	2202      	movs	r2, #2
 80035b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80035bc:	e013      	b.n	80035e6 <HAL_TIM_PWM_Start+0xaa>
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d104      	bne.n	80035ce <HAL_TIM_PWM_Start+0x92>
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2202      	movs	r2, #2
 80035c8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80035cc:	e00b      	b.n	80035e6 <HAL_TIM_PWM_Start+0xaa>
 80035ce:	683b      	ldr	r3, [r7, #0]
 80035d0:	2b08      	cmp	r3, #8
 80035d2:	d104      	bne.n	80035de <HAL_TIM_PWM_Start+0xa2>
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	2202      	movs	r2, #2
 80035d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80035dc:	e003      	b.n	80035e6 <HAL_TIM_PWM_Start+0xaa>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2202      	movs	r2, #2
 80035e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	2201      	movs	r2, #1
 80035ec:	6839      	ldr	r1, [r7, #0]
 80035ee:	4618      	mov	r0, r3
 80035f0:	f000 fc5c 	bl	8003eac <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4a1e      	ldr	r2, [pc, #120]	@ (8003674 <HAL_TIM_PWM_Start+0x138>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d107      	bne.n	800360e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800360c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	4a18      	ldr	r2, [pc, #96]	@ (8003674 <HAL_TIM_PWM_Start+0x138>)
 8003614:	4293      	cmp	r3, r2
 8003616:	d00e      	beq.n	8003636 <HAL_TIM_PWM_Start+0xfa>
 8003618:	687b      	ldr	r3, [r7, #4]
 800361a:	681b      	ldr	r3, [r3, #0]
 800361c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003620:	d009      	beq.n	8003636 <HAL_TIM_PWM_Start+0xfa>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a14      	ldr	r2, [pc, #80]	@ (8003678 <HAL_TIM_PWM_Start+0x13c>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d004      	beq.n	8003636 <HAL_TIM_PWM_Start+0xfa>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a12      	ldr	r2, [pc, #72]	@ (800367c <HAL_TIM_PWM_Start+0x140>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d111      	bne.n	800365a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689b      	ldr	r3, [r3, #8]
 800363c:	f003 0307 	and.w	r3, r3, #7
 8003640:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2b06      	cmp	r3, #6
 8003646:	d010      	beq.n	800366a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	681a      	ldr	r2, [r3, #0]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f042 0201 	orr.w	r2, r2, #1
 8003656:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003658:	e007      	b.n	800366a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f042 0201 	orr.w	r2, r2, #1
 8003668:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800366a:	2300      	movs	r3, #0
}
 800366c:	4618      	mov	r0, r3
 800366e:	3710      	adds	r7, #16
 8003670:	46bd      	mov	sp, r7
 8003672:	bd80      	pop	{r7, pc}
 8003674:	40012c00 	.word	0x40012c00
 8003678:	40000400 	.word	0x40000400
 800367c:	40000800 	.word	0x40000800

08003680 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b086      	sub	sp, #24
 8003684:	af00      	add	r7, sp, #0
 8003686:	60f8      	str	r0, [r7, #12]
 8003688:	60b9      	str	r1, [r7, #8]
 800368a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800368c:	2300      	movs	r3, #0
 800368e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003696:	2b01      	cmp	r3, #1
 8003698:	d101      	bne.n	800369e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800369a:	2302      	movs	r3, #2
 800369c:	e0ae      	b.n	80037fc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	2b0c      	cmp	r3, #12
 80036aa:	f200 809f 	bhi.w	80037ec <HAL_TIM_PWM_ConfigChannel+0x16c>
 80036ae:	a201      	add	r2, pc, #4	@ (adr r2, 80036b4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80036b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80036b4:	080036e9 	.word	0x080036e9
 80036b8:	080037ed 	.word	0x080037ed
 80036bc:	080037ed 	.word	0x080037ed
 80036c0:	080037ed 	.word	0x080037ed
 80036c4:	08003729 	.word	0x08003729
 80036c8:	080037ed 	.word	0x080037ed
 80036cc:	080037ed 	.word	0x080037ed
 80036d0:	080037ed 	.word	0x080037ed
 80036d4:	0800376b 	.word	0x0800376b
 80036d8:	080037ed 	.word	0x080037ed
 80036dc:	080037ed 	.word	0x080037ed
 80036e0:	080037ed 	.word	0x080037ed
 80036e4:	080037ab 	.word	0x080037ab
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68b9      	ldr	r1, [r7, #8]
 80036ee:	4618      	mov	r0, r3
 80036f0:	f000 f9be 	bl	8003a70 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699a      	ldr	r2, [r3, #24]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	f042 0208 	orr.w	r2, r2, #8
 8003702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f022 0204 	bic.w	r2, r2, #4
 8003712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6999      	ldr	r1, [r3, #24]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	619a      	str	r2, [r3, #24]
      break;
 8003726:	e064      	b.n	80037f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68b9      	ldr	r1, [r7, #8]
 800372e:	4618      	mov	r0, r3
 8003730:	f000 fa04 	bl	8003b3c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	699a      	ldr	r2, [r3, #24]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003742:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	681b      	ldr	r3, [r3, #0]
 8003748:	699a      	ldr	r2, [r3, #24]
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003752:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	6999      	ldr	r1, [r3, #24]
 800375a:	68bb      	ldr	r3, [r7, #8]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	021a      	lsls	r2, r3, #8
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	430a      	orrs	r2, r1
 8003766:	619a      	str	r2, [r3, #24]
      break;
 8003768:	e043      	b.n	80037f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	68b9      	ldr	r1, [r7, #8]
 8003770:	4618      	mov	r0, r3
 8003772:	f000 fa4d 	bl	8003c10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	69da      	ldr	r2, [r3, #28]
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f042 0208 	orr.w	r2, r2, #8
 8003784:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f022 0204 	bic.w	r2, r2, #4
 8003794:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	69d9      	ldr	r1, [r3, #28]
 800379c:	68bb      	ldr	r3, [r7, #8]
 800379e:	691a      	ldr	r2, [r3, #16]
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	430a      	orrs	r2, r1
 80037a6:	61da      	str	r2, [r3, #28]
      break;
 80037a8:	e023      	b.n	80037f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	68b9      	ldr	r1, [r7, #8]
 80037b0:	4618      	mov	r0, r3
 80037b2:	f000 fa97 	bl	8003ce4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	69da      	ldr	r2, [r3, #28]
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80037c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	69da      	ldr	r2, [r3, #28]
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	69d9      	ldr	r1, [r3, #28]
 80037dc:	68bb      	ldr	r3, [r7, #8]
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	021a      	lsls	r2, r3, #8
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	430a      	orrs	r2, r1
 80037e8:	61da      	str	r2, [r3, #28]
      break;
 80037ea:	e002      	b.n	80037f2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80037ec:	2301      	movs	r3, #1
 80037ee:	75fb      	strb	r3, [r7, #23]
      break;
 80037f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	2200      	movs	r2, #0
 80037f6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80037fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80037fc:	4618      	mov	r0, r3
 80037fe:	3718      	adds	r7, #24
 8003800:	46bd      	mov	sp, r7
 8003802:	bd80      	pop	{r7, pc}

08003804 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003804:	b580      	push	{r7, lr}
 8003806:	b084      	sub	sp, #16
 8003808:	af00      	add	r7, sp, #0
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800380e:	2300      	movs	r3, #0
 8003810:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_TIM_ConfigClockSource+0x1c>
 800381c:	2302      	movs	r3, #2
 800381e:	e0b4      	b.n	800398a <HAL_TIM_ConfigClockSource+0x186>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800383e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003846:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	68ba      	ldr	r2, [r7, #8]
 800384e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003858:	d03e      	beq.n	80038d8 <HAL_TIM_ConfigClockSource+0xd4>
 800385a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800385e:	f200 8087 	bhi.w	8003970 <HAL_TIM_ConfigClockSource+0x16c>
 8003862:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003866:	f000 8086 	beq.w	8003976 <HAL_TIM_ConfigClockSource+0x172>
 800386a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800386e:	d87f      	bhi.n	8003970 <HAL_TIM_ConfigClockSource+0x16c>
 8003870:	2b70      	cmp	r3, #112	@ 0x70
 8003872:	d01a      	beq.n	80038aa <HAL_TIM_ConfigClockSource+0xa6>
 8003874:	2b70      	cmp	r3, #112	@ 0x70
 8003876:	d87b      	bhi.n	8003970 <HAL_TIM_ConfigClockSource+0x16c>
 8003878:	2b60      	cmp	r3, #96	@ 0x60
 800387a:	d050      	beq.n	800391e <HAL_TIM_ConfigClockSource+0x11a>
 800387c:	2b60      	cmp	r3, #96	@ 0x60
 800387e:	d877      	bhi.n	8003970 <HAL_TIM_ConfigClockSource+0x16c>
 8003880:	2b50      	cmp	r3, #80	@ 0x50
 8003882:	d03c      	beq.n	80038fe <HAL_TIM_ConfigClockSource+0xfa>
 8003884:	2b50      	cmp	r3, #80	@ 0x50
 8003886:	d873      	bhi.n	8003970 <HAL_TIM_ConfigClockSource+0x16c>
 8003888:	2b40      	cmp	r3, #64	@ 0x40
 800388a:	d058      	beq.n	800393e <HAL_TIM_ConfigClockSource+0x13a>
 800388c:	2b40      	cmp	r3, #64	@ 0x40
 800388e:	d86f      	bhi.n	8003970 <HAL_TIM_ConfigClockSource+0x16c>
 8003890:	2b30      	cmp	r3, #48	@ 0x30
 8003892:	d064      	beq.n	800395e <HAL_TIM_ConfigClockSource+0x15a>
 8003894:	2b30      	cmp	r3, #48	@ 0x30
 8003896:	d86b      	bhi.n	8003970 <HAL_TIM_ConfigClockSource+0x16c>
 8003898:	2b20      	cmp	r3, #32
 800389a:	d060      	beq.n	800395e <HAL_TIM_ConfigClockSource+0x15a>
 800389c:	2b20      	cmp	r3, #32
 800389e:	d867      	bhi.n	8003970 <HAL_TIM_ConfigClockSource+0x16c>
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d05c      	beq.n	800395e <HAL_TIM_ConfigClockSource+0x15a>
 80038a4:	2b10      	cmp	r3, #16
 80038a6:	d05a      	beq.n	800395e <HAL_TIM_ConfigClockSource+0x15a>
 80038a8:	e062      	b.n	8003970 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038b6:	683b      	ldr	r3, [r7, #0]
 80038b8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038ba:	f000 fad8 	bl	8003e6e <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	689b      	ldr	r3, [r3, #8]
 80038c4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80038cc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	68ba      	ldr	r2, [r7, #8]
 80038d4:	609a      	str	r2, [r3, #8]
      break;
 80038d6:	e04f      	b.n	8003978 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038e4:	683b      	ldr	r3, [r7, #0]
 80038e6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80038e8:	f000 fac1 	bl	8003e6e <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	689a      	ldr	r2, [r3, #8]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80038fa:	609a      	str	r2, [r3, #8]
      break;
 80038fc:	e03c      	b.n	8003978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003902:	683b      	ldr	r3, [r7, #0]
 8003904:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800390a:	461a      	mov	r2, r3
 800390c:	f000 fa38 	bl	8003d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	2150      	movs	r1, #80	@ 0x50
 8003916:	4618      	mov	r0, r3
 8003918:	f000 fa8f 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 800391c:	e02c      	b.n	8003978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800392a:	461a      	mov	r2, r3
 800392c:	f000 fa56 	bl	8003ddc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	2160      	movs	r1, #96	@ 0x60
 8003936:	4618      	mov	r0, r3
 8003938:	f000 fa7f 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 800393c:	e01c      	b.n	8003978 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003942:	683b      	ldr	r3, [r7, #0]
 8003944:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003946:	683b      	ldr	r3, [r7, #0]
 8003948:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800394a:	461a      	mov	r2, r3
 800394c:	f000 fa18 	bl	8003d80 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	2140      	movs	r1, #64	@ 0x40
 8003956:	4618      	mov	r0, r3
 8003958:	f000 fa6f 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 800395c:	e00c      	b.n	8003978 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	681a      	ldr	r2, [r3, #0]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	4619      	mov	r1, r3
 8003968:	4610      	mov	r0, r2
 800396a:	f000 fa66 	bl	8003e3a <TIM_ITRx_SetConfig>
      break;
 800396e:	e003      	b.n	8003978 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003970:	2301      	movs	r3, #1
 8003972:	73fb      	strb	r3, [r7, #15]
      break;
 8003974:	e000      	b.n	8003978 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003976:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	2201      	movs	r2, #1
 800397c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2200      	movs	r2, #0
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003988:	7bfb      	ldrb	r3, [r7, #15]
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003994:	b480      	push	{r7}
 8003996:	b085      	sub	sp, #20
 8003998:	af00      	add	r7, sp, #0
 800399a:	6078      	str	r0, [r7, #4]
 800399c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	4a2f      	ldr	r2, [pc, #188]	@ (8003a64 <TIM_Base_SetConfig+0xd0>)
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d00b      	beq.n	80039c4 <TIM_Base_SetConfig+0x30>
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039b2:	d007      	beq.n	80039c4 <TIM_Base_SetConfig+0x30>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	4a2c      	ldr	r2, [pc, #176]	@ (8003a68 <TIM_Base_SetConfig+0xd4>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d003      	beq.n	80039c4 <TIM_Base_SetConfig+0x30>
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	4a2b      	ldr	r2, [pc, #172]	@ (8003a6c <TIM_Base_SetConfig+0xd8>)
 80039c0:	4293      	cmp	r3, r2
 80039c2:	d108      	bne.n	80039d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80039ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80039cc:	683b      	ldr	r3, [r7, #0]
 80039ce:	685b      	ldr	r3, [r3, #4]
 80039d0:	68fa      	ldr	r2, [r7, #12]
 80039d2:	4313      	orrs	r3, r2
 80039d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	4a22      	ldr	r2, [pc, #136]	@ (8003a64 <TIM_Base_SetConfig+0xd0>)
 80039da:	4293      	cmp	r3, r2
 80039dc:	d00b      	beq.n	80039f6 <TIM_Base_SetConfig+0x62>
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039e4:	d007      	beq.n	80039f6 <TIM_Base_SetConfig+0x62>
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	4a1f      	ldr	r2, [pc, #124]	@ (8003a68 <TIM_Base_SetConfig+0xd4>)
 80039ea:	4293      	cmp	r3, r2
 80039ec:	d003      	beq.n	80039f6 <TIM_Base_SetConfig+0x62>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	4a1e      	ldr	r2, [pc, #120]	@ (8003a6c <TIM_Base_SetConfig+0xd8>)
 80039f2:	4293      	cmp	r3, r2
 80039f4:	d108      	bne.n	8003a08 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80039fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80039fe:	683b      	ldr	r3, [r7, #0]
 8003a00:	68db      	ldr	r3, [r3, #12]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	4313      	orrs	r3, r2
 8003a06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	695b      	ldr	r3, [r3, #20]
 8003a12:	4313      	orrs	r3, r2
 8003a14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	68fa      	ldr	r2, [r7, #12]
 8003a1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003a1c:	683b      	ldr	r3, [r7, #0]
 8003a1e:	689a      	ldr	r2, [r3, #8]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	681a      	ldr	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	4a0d      	ldr	r2, [pc, #52]	@ (8003a64 <TIM_Base_SetConfig+0xd0>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d103      	bne.n	8003a3c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	691a      	ldr	r2, [r3, #16]
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	2201      	movs	r2, #1
 8003a40:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d005      	beq.n	8003a5a <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	691b      	ldr	r3, [r3, #16]
 8003a52:	f023 0201 	bic.w	r2, r3, #1
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	611a      	str	r2, [r3, #16]
  }
}
 8003a5a:	bf00      	nop
 8003a5c:	3714      	adds	r7, #20
 8003a5e:	46bd      	mov	sp, r7
 8003a60:	bc80      	pop	{r7}
 8003a62:	4770      	bx	lr
 8003a64:	40012c00 	.word	0x40012c00
 8003a68:	40000400 	.word	0x40000400
 8003a6c:	40000800 	.word	0x40000800

08003a70 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003a70:	b480      	push	{r7}
 8003a72:	b087      	sub	sp, #28
 8003a74:	af00      	add	r7, sp, #0
 8003a76:	6078      	str	r0, [r7, #4]
 8003a78:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	6a1b      	ldr	r3, [r3, #32]
 8003a7e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	6a1b      	ldr	r3, [r3, #32]
 8003a84:	f023 0201 	bic.w	r2, r3, #1
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	685b      	ldr	r3, [r3, #4]
 8003a90:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	699b      	ldr	r3, [r3, #24]
 8003a96:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	f023 0303 	bic.w	r3, r3, #3
 8003aa6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003aa8:	683b      	ldr	r3, [r7, #0]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	68fa      	ldr	r2, [r7, #12]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f023 0302 	bic.w	r3, r3, #2
 8003ab8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003aba:	683b      	ldr	r3, [r7, #0]
 8003abc:	689b      	ldr	r3, [r3, #8]
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	4313      	orrs	r3, r2
 8003ac2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	4a1c      	ldr	r2, [pc, #112]	@ (8003b38 <TIM_OC1_SetConfig+0xc8>)
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	d10c      	bne.n	8003ae6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003acc:	697b      	ldr	r3, [r7, #20]
 8003ace:	f023 0308 	bic.w	r3, r3, #8
 8003ad2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ad4:	683b      	ldr	r3, [r7, #0]
 8003ad6:	68db      	ldr	r3, [r3, #12]
 8003ad8:	697a      	ldr	r2, [r7, #20]
 8003ada:	4313      	orrs	r3, r2
 8003adc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	f023 0304 	bic.w	r3, r3, #4
 8003ae4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	4a13      	ldr	r2, [pc, #76]	@ (8003b38 <TIM_OC1_SetConfig+0xc8>)
 8003aea:	4293      	cmp	r3, r2
 8003aec:	d111      	bne.n	8003b12 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003af4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003afc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	695b      	ldr	r3, [r3, #20]
 8003b02:	693a      	ldr	r2, [r7, #16]
 8003b04:	4313      	orrs	r3, r2
 8003b06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	699b      	ldr	r3, [r3, #24]
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	4313      	orrs	r3, r2
 8003b10:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	693a      	ldr	r2, [r7, #16]
 8003b16:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	68fa      	ldr	r2, [r7, #12]
 8003b1c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003b1e:	683b      	ldr	r3, [r7, #0]
 8003b20:	685a      	ldr	r2, [r3, #4]
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	697a      	ldr	r2, [r7, #20]
 8003b2a:	621a      	str	r2, [r3, #32]
}
 8003b2c:	bf00      	nop
 8003b2e:	371c      	adds	r7, #28
 8003b30:	46bd      	mov	sp, r7
 8003b32:	bc80      	pop	{r7}
 8003b34:	4770      	bx	lr
 8003b36:	bf00      	nop
 8003b38:	40012c00 	.word	0x40012c00

08003b3c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b3c:	b480      	push	{r7}
 8003b3e:	b087      	sub	sp, #28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
 8003b44:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6a1b      	ldr	r3, [r3, #32]
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a1b      	ldr	r3, [r3, #32]
 8003b50:	f023 0210 	bic.w	r2, r3, #16
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	685b      	ldr	r3, [r3, #4]
 8003b5c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	699b      	ldr	r3, [r3, #24]
 8003b62:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003b6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003b72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b74:	683b      	ldr	r3, [r7, #0]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	021b      	lsls	r3, r3, #8
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	f023 0320 	bic.w	r3, r3, #32
 8003b86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	689b      	ldr	r3, [r3, #8]
 8003b8c:	011b      	lsls	r3, r3, #4
 8003b8e:	697a      	ldr	r2, [r7, #20]
 8003b90:	4313      	orrs	r3, r2
 8003b92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	4a1d      	ldr	r2, [pc, #116]	@ (8003c0c <TIM_OC2_SetConfig+0xd0>)
 8003b98:	4293      	cmp	r3, r2
 8003b9a:	d10d      	bne.n	8003bb8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003b9c:	697b      	ldr	r3, [r7, #20]
 8003b9e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003ba2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003ba4:	683b      	ldr	r3, [r7, #0]
 8003ba6:	68db      	ldr	r3, [r3, #12]
 8003ba8:	011b      	lsls	r3, r3, #4
 8003baa:	697a      	ldr	r2, [r7, #20]
 8003bac:	4313      	orrs	r3, r2
 8003bae:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003bb6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a14      	ldr	r2, [pc, #80]	@ (8003c0c <TIM_OC2_SetConfig+0xd0>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d113      	bne.n	8003be8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003bc0:	693b      	ldr	r3, [r7, #16]
 8003bc2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003bc6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003bc8:	693b      	ldr	r3, [r7, #16]
 8003bca:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003bce:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	693a      	ldr	r2, [r7, #16]
 8003bd8:	4313      	orrs	r3, r2
 8003bda:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003bdc:	683b      	ldr	r3, [r7, #0]
 8003bde:	699b      	ldr	r3, [r3, #24]
 8003be0:	009b      	lsls	r3, r3, #2
 8003be2:	693a      	ldr	r2, [r7, #16]
 8003be4:	4313      	orrs	r3, r2
 8003be6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	68fa      	ldr	r2, [r7, #12]
 8003bf2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003bf4:	683b      	ldr	r3, [r7, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	697a      	ldr	r2, [r7, #20]
 8003c00:	621a      	str	r2, [r3, #32]
}
 8003c02:	bf00      	nop
 8003c04:	371c      	adds	r7, #28
 8003c06:	46bd      	mov	sp, r7
 8003c08:	bc80      	pop	{r7}
 8003c0a:	4770      	bx	lr
 8003c0c:	40012c00 	.word	0x40012c00

08003c10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c10:	b480      	push	{r7}
 8003c12:	b087      	sub	sp, #28
 8003c14:	af00      	add	r7, sp, #0
 8003c16:	6078      	str	r0, [r7, #4]
 8003c18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a1b      	ldr	r3, [r3, #32]
 8003c1e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6a1b      	ldr	r3, [r3, #32]
 8003c24:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	685b      	ldr	r3, [r3, #4]
 8003c30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f023 0303 	bic.w	r3, r3, #3
 8003c46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	68fa      	ldr	r2, [r7, #12]
 8003c4e:	4313      	orrs	r3, r2
 8003c50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003c52:	697b      	ldr	r3, [r7, #20]
 8003c54:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003c58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003c5a:	683b      	ldr	r3, [r7, #0]
 8003c5c:	689b      	ldr	r3, [r3, #8]
 8003c5e:	021b      	lsls	r3, r3, #8
 8003c60:	697a      	ldr	r2, [r7, #20]
 8003c62:	4313      	orrs	r3, r2
 8003c64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	4a1d      	ldr	r2, [pc, #116]	@ (8003ce0 <TIM_OC3_SetConfig+0xd0>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d10d      	bne.n	8003c8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003c6e:	697b      	ldr	r3, [r7, #20]
 8003c70:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003c74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003c76:	683b      	ldr	r3, [r7, #0]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	021b      	lsls	r3, r3, #8
 8003c7c:	697a      	ldr	r2, [r7, #20]
 8003c7e:	4313      	orrs	r3, r2
 8003c80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003c82:	697b      	ldr	r3, [r7, #20]
 8003c84:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003c88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	4a14      	ldr	r2, [pc, #80]	@ (8003ce0 <TIM_OC3_SetConfig+0xd0>)
 8003c8e:	4293      	cmp	r3, r2
 8003c90:	d113      	bne.n	8003cba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003c98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003c9a:	693b      	ldr	r3, [r7, #16]
 8003c9c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003ca0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	695b      	ldr	r3, [r3, #20]
 8003ca6:	011b      	lsls	r3, r3, #4
 8003ca8:	693a      	ldr	r2, [r7, #16]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003cae:	683b      	ldr	r3, [r7, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	011b      	lsls	r3, r3, #4
 8003cb4:	693a      	ldr	r2, [r7, #16]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	693a      	ldr	r2, [r7, #16]
 8003cbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	68fa      	ldr	r2, [r7, #12]
 8003cc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	685a      	ldr	r2, [r3, #4]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	697a      	ldr	r2, [r7, #20]
 8003cd2:	621a      	str	r2, [r3, #32]
}
 8003cd4:	bf00      	nop
 8003cd6:	371c      	adds	r7, #28
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	bc80      	pop	{r7}
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40012c00 	.word	0x40012c00

08003ce4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b087      	sub	sp, #28
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a1b      	ldr	r3, [r3, #32]
 8003cf2:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	6a1b      	ldr	r3, [r3, #32]
 8003cf8:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	69db      	ldr	r3, [r3, #28]
 8003d0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003d12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003d1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	021b      	lsls	r3, r3, #8
 8003d22:	68fa      	ldr	r2, [r7, #12]
 8003d24:	4313      	orrs	r3, r2
 8003d26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003d28:	693b      	ldr	r3, [r7, #16]
 8003d2a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003d2e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003d30:	683b      	ldr	r3, [r7, #0]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	031b      	lsls	r3, r3, #12
 8003d36:	693a      	ldr	r2, [r7, #16]
 8003d38:	4313      	orrs	r3, r2
 8003d3a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	4a0f      	ldr	r2, [pc, #60]	@ (8003d7c <TIM_OC4_SetConfig+0x98>)
 8003d40:	4293      	cmp	r3, r2
 8003d42:	d109      	bne.n	8003d58 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003d44:	697b      	ldr	r3, [r7, #20]
 8003d46:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003d4a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003d4c:	683b      	ldr	r3, [r7, #0]
 8003d4e:	695b      	ldr	r3, [r3, #20]
 8003d50:	019b      	lsls	r3, r3, #6
 8003d52:	697a      	ldr	r2, [r7, #20]
 8003d54:	4313      	orrs	r3, r2
 8003d56:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	697a      	ldr	r2, [r7, #20]
 8003d5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	685a      	ldr	r2, [r3, #4]
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	693a      	ldr	r2, [r7, #16]
 8003d70:	621a      	str	r2, [r3, #32]
}
 8003d72:	bf00      	nop
 8003d74:	371c      	adds	r7, #28
 8003d76:	46bd      	mov	sp, r7
 8003d78:	bc80      	pop	{r7}
 8003d7a:	4770      	bx	lr
 8003d7c:	40012c00 	.word	0x40012c00

08003d80 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b087      	sub	sp, #28
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6a1b      	ldr	r3, [r3, #32]
 8003d90:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6a1b      	ldr	r3, [r3, #32]
 8003d96:	f023 0201 	bic.w	r2, r3, #1
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	699b      	ldr	r3, [r3, #24]
 8003da2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003da4:	693b      	ldr	r3, [r7, #16]
 8003da6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003daa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	011b      	lsls	r3, r3, #4
 8003db0:	693a      	ldr	r2, [r7, #16]
 8003db2:	4313      	orrs	r3, r2
 8003db4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f023 030a 	bic.w	r3, r3, #10
 8003dbc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003dbe:	697a      	ldr	r2, [r7, #20]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	4313      	orrs	r3, r2
 8003dc4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	693a      	ldr	r2, [r7, #16]
 8003dca:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	621a      	str	r2, [r3, #32]
}
 8003dd2:	bf00      	nop
 8003dd4:	371c      	adds	r7, #28
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bc80      	pop	{r7}
 8003dda:	4770      	bx	lr

08003ddc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ddc:	b480      	push	{r7}
 8003dde:	b087      	sub	sp, #28
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	6a1b      	ldr	r3, [r3, #32]
 8003dec:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	6a1b      	ldr	r3, [r3, #32]
 8003df2:	f023 0210 	bic.w	r2, r3, #16
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	699b      	ldr	r3, [r3, #24]
 8003dfe:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003e06:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	031b      	lsls	r3, r3, #12
 8003e0c:	693a      	ldr	r2, [r7, #16]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003e18:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003e1a:	68bb      	ldr	r3, [r7, #8]
 8003e1c:	011b      	lsls	r3, r3, #4
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	4313      	orrs	r3, r2
 8003e22:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	693a      	ldr	r2, [r7, #16]
 8003e28:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	697a      	ldr	r2, [r7, #20]
 8003e2e:	621a      	str	r2, [r3, #32]
}
 8003e30:	bf00      	nop
 8003e32:	371c      	adds	r7, #28
 8003e34:	46bd      	mov	sp, r7
 8003e36:	bc80      	pop	{r7}
 8003e38:	4770      	bx	lr

08003e3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003e3a:	b480      	push	{r7}
 8003e3c:	b085      	sub	sp, #20
 8003e3e:	af00      	add	r7, sp, #0
 8003e40:	6078      	str	r0, [r7, #4]
 8003e42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003e50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003e52:	683a      	ldr	r2, [r7, #0]
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	4313      	orrs	r3, r2
 8003e58:	f043 0307 	orr.w	r3, r3, #7
 8003e5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68fa      	ldr	r2, [r7, #12]
 8003e62:	609a      	str	r2, [r3, #8]
}
 8003e64:	bf00      	nop
 8003e66:	3714      	adds	r7, #20
 8003e68:	46bd      	mov	sp, r7
 8003e6a:	bc80      	pop	{r7}
 8003e6c:	4770      	bx	lr

08003e6e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003e6e:	b480      	push	{r7}
 8003e70:	b087      	sub	sp, #28
 8003e72:	af00      	add	r7, sp, #0
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	607a      	str	r2, [r7, #4]
 8003e7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	689b      	ldr	r3, [r3, #8]
 8003e80:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e88:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	021a      	lsls	r2, r3, #8
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	431a      	orrs	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4313      	orrs	r3, r2
 8003e96:	697a      	ldr	r2, [r7, #20]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	697a      	ldr	r2, [r7, #20]
 8003ea0:	609a      	str	r2, [r3, #8]
}
 8003ea2:	bf00      	nop
 8003ea4:	371c      	adds	r7, #28
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	bc80      	pop	{r7}
 8003eaa:	4770      	bx	lr

08003eac <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b087      	sub	sp, #28
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	f003 031f 	and.w	r3, r3, #31
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	6a1a      	ldr	r2, [r3, #32]
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	43db      	mvns	r3, r3
 8003ece:	401a      	ands	r2, r3
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6a1a      	ldr	r2, [r3, #32]
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f003 031f 	and.w	r3, r3, #31
 8003ede:	6879      	ldr	r1, [r7, #4]
 8003ee0:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee4:	431a      	orrs	r2, r3
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	621a      	str	r2, [r3, #32]
}
 8003eea:	bf00      	nop
 8003eec:	371c      	adds	r7, #28
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bc80      	pop	{r7}
 8003ef2:	4770      	bx	lr

08003ef4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003ef4:	b480      	push	{r7}
 8003ef6:	b085      	sub	sp, #20
 8003ef8:	af00      	add	r7, sp, #0
 8003efa:	6078      	str	r0, [r7, #4]
 8003efc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003f04:	2b01      	cmp	r3, #1
 8003f06:	d101      	bne.n	8003f0c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003f08:	2302      	movs	r3, #2
 8003f0a:	e046      	b.n	8003f9a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2202      	movs	r2, #2
 8003f18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	685b      	ldr	r3, [r3, #4]
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	689b      	ldr	r3, [r3, #8]
 8003f2a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003f32:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003f34:	683b      	ldr	r3, [r7, #0]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68fa      	ldr	r2, [r7, #12]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	4a16      	ldr	r2, [pc, #88]	@ (8003fa4 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003f4c:	4293      	cmp	r3, r2
 8003f4e:	d00e      	beq.n	8003f6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003f58:	d009      	beq.n	8003f6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	4a12      	ldr	r2, [pc, #72]	@ (8003fa8 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d004      	beq.n	8003f6e <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4a10      	ldr	r2, [pc, #64]	@ (8003fac <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003f6a:	4293      	cmp	r3, r2
 8003f6c:	d10c      	bne.n	8003f88 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003f6e:	68bb      	ldr	r3, [r7, #8]
 8003f70:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003f74:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	685b      	ldr	r3, [r3, #4]
 8003f7a:	68ba      	ldr	r2, [r7, #8]
 8003f7c:	4313      	orrs	r3, r2
 8003f7e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	68ba      	ldr	r2, [r7, #8]
 8003f86:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2201      	movs	r2, #1
 8003f8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003f98:	2300      	movs	r3, #0
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	3714      	adds	r7, #20
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr
 8003fa4:	40012c00 	.word	0x40012c00
 8003fa8:	40000400 	.word	0x40000400
 8003fac:	40000800 	.word	0x40000800

08003fb0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003fb0:	b480      	push	{r7}
 8003fb2:	b085      	sub	sp, #20
 8003fb4:	af00      	add	r7, sp, #0
 8003fb6:	6078      	str	r0, [r7, #4]
 8003fb8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fc4:	2b01      	cmp	r3, #1
 8003fc6:	d101      	bne.n	8003fcc <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003fc8:	2302      	movs	r3, #2
 8003fca:	e03d      	b.n	8004048 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2201      	movs	r2, #1
 8003fd0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	68db      	ldr	r3, [r3, #12]
 8003fde:	4313      	orrs	r3, r2
 8003fe0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003fe8:	683b      	ldr	r3, [r7, #0]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	4313      	orrs	r3, r2
 8003fee:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	685b      	ldr	r3, [r3, #4]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4313      	orrs	r3, r2
 800400a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	4313      	orrs	r3, r2
 8004018:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	4313      	orrs	r3, r2
 8004026:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	69db      	ldr	r3, [r3, #28]
 8004032:	4313      	orrs	r3, r2
 8004034:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3714      	adds	r7, #20
 800404c:	46bd      	mov	sp, r7
 800404e:	bc80      	pop	{r7}
 8004050:	4770      	bx	lr

08004052 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004052:	b580      	push	{r7, lr}
 8004054:	b082      	sub	sp, #8
 8004056:	af00      	add	r7, sp, #0
 8004058:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d101      	bne.n	8004064 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004060:	2301      	movs	r3, #1
 8004062:	e042      	b.n	80040ea <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b00      	cmp	r3, #0
 800406e:	d106      	bne.n	800407e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2200      	movs	r2, #0
 8004074:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f7fe f94b 	bl	8002314 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2224      	movs	r2, #36	@ 0x24
 8004082:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	68da      	ldr	r2, [r3, #12]
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004094:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004096:	6878      	ldr	r0, [r7, #4]
 8004098:	f000 fdb0 	bl	8004bfc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	691a      	ldr	r2, [r3, #16]
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80040aa:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	695a      	ldr	r2, [r3, #20]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80040ba:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	68da      	ldr	r2, [r3, #12]
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80040ca:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2200      	movs	r2, #0
 80040d0:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2220      	movs	r2, #32
 80040d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2220      	movs	r2, #32
 80040de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	2200      	movs	r2, #0
 80040e6:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80040e8:	2300      	movs	r3, #0
}
 80040ea:	4618      	mov	r0, r3
 80040ec:	3708      	adds	r7, #8
 80040ee:	46bd      	mov	sp, r7
 80040f0:	bd80      	pop	{r7, pc}

080040f2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f2:	b580      	push	{r7, lr}
 80040f4:	b08a      	sub	sp, #40	@ 0x28
 80040f6:	af02      	add	r7, sp, #8
 80040f8:	60f8      	str	r0, [r7, #12]
 80040fa:	60b9      	str	r1, [r7, #8]
 80040fc:	603b      	str	r3, [r7, #0]
 80040fe:	4613      	mov	r3, r2
 8004100:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004102:	2300      	movs	r3, #0
 8004104:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800410c:	b2db      	uxtb	r3, r3
 800410e:	2b20      	cmp	r3, #32
 8004110:	d175      	bne.n	80041fe <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d002      	beq.n	800411e <HAL_UART_Transmit+0x2c>
 8004118:	88fb      	ldrh	r3, [r7, #6]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e06e      	b.n	8004200 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2200      	movs	r2, #0
 8004126:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	2221      	movs	r2, #33	@ 0x21
 800412c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004130:	f7fe f9c2 	bl	80024b8 <HAL_GetTick>
 8004134:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	88fa      	ldrh	r2, [r7, #6]
 800413a:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	88fa      	ldrh	r2, [r7, #6]
 8004140:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	689b      	ldr	r3, [r3, #8]
 8004146:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800414a:	d108      	bne.n	800415e <HAL_UART_Transmit+0x6c>
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	691b      	ldr	r3, [r3, #16]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d104      	bne.n	800415e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004154:	2300      	movs	r3, #0
 8004156:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	61bb      	str	r3, [r7, #24]
 800415c:	e003      	b.n	8004166 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004162:	2300      	movs	r3, #0
 8004164:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004166:	e02e      	b.n	80041c6 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004168:	683b      	ldr	r3, [r7, #0]
 800416a:	9300      	str	r3, [sp, #0]
 800416c:	697b      	ldr	r3, [r7, #20]
 800416e:	2200      	movs	r2, #0
 8004170:	2180      	movs	r1, #128	@ 0x80
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 fb14 	bl	80047a0 <UART_WaitOnFlagUntilTimeout>
 8004178:	4603      	mov	r3, r0
 800417a:	2b00      	cmp	r3, #0
 800417c:	d005      	beq.n	800418a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	2220      	movs	r2, #32
 8004182:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004186:	2303      	movs	r3, #3
 8004188:	e03a      	b.n	8004200 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10b      	bne.n	80041a8 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004190:	69bb      	ldr	r3, [r7, #24]
 8004192:	881b      	ldrh	r3, [r3, #0]
 8004194:	461a      	mov	r2, r3
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800419e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80041a0:	69bb      	ldr	r3, [r7, #24]
 80041a2:	3302      	adds	r3, #2
 80041a4:	61bb      	str	r3, [r7, #24]
 80041a6:	e007      	b.n	80041b8 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80041a8:	69fb      	ldr	r3, [r7, #28]
 80041aa:	781a      	ldrb	r2, [r3, #0]
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	3301      	adds	r3, #1
 80041b6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041bc:	b29b      	uxth	r3, r3
 80041be:	3b01      	subs	r3, #1
 80041c0:	b29a      	uxth	r2, r3
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80041ca:	b29b      	uxth	r3, r3
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d1cb      	bne.n	8004168 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	697b      	ldr	r3, [r7, #20]
 80041d6:	2200      	movs	r2, #0
 80041d8:	2140      	movs	r1, #64	@ 0x40
 80041da:	68f8      	ldr	r0, [r7, #12]
 80041dc:	f000 fae0 	bl	80047a0 <UART_WaitOnFlagUntilTimeout>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d005      	beq.n	80041f2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	2220      	movs	r2, #32
 80041ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80041ee:	2303      	movs	r3, #3
 80041f0:	e006      	b.n	8004200 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	2220      	movs	r2, #32
 80041f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80041fa:	2300      	movs	r3, #0
 80041fc:	e000      	b.n	8004200 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80041fe:	2302      	movs	r3, #2
  }
}
 8004200:	4618      	mov	r0, r3
 8004202:	3720      	adds	r7, #32
 8004204:	46bd      	mov	sp, r7
 8004206:	bd80      	pop	{r7, pc}

08004208 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b084      	sub	sp, #16
 800420c:	af00      	add	r7, sp, #0
 800420e:	60f8      	str	r0, [r7, #12]
 8004210:	60b9      	str	r1, [r7, #8]
 8004212:	4613      	mov	r3, r2
 8004214:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800421c:	b2db      	uxtb	r3, r3
 800421e:	2b20      	cmp	r3, #32
 8004220:	d112      	bne.n	8004248 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d002      	beq.n	800422e <HAL_UART_Receive_IT+0x26>
 8004228:	88fb      	ldrh	r3, [r7, #6]
 800422a:	2b00      	cmp	r3, #0
 800422c:	d101      	bne.n	8004232 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e00b      	b.n	800424a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	2200      	movs	r2, #0
 8004236:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004238:	88fb      	ldrh	r3, [r7, #6]
 800423a:	461a      	mov	r2, r3
 800423c:	68b9      	ldr	r1, [r7, #8]
 800423e:	68f8      	ldr	r0, [r7, #12]
 8004240:	f000 fb07 	bl	8004852 <UART_Start_Receive_IT>
 8004244:	4603      	mov	r3, r0
 8004246:	e000      	b.n	800424a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004248:	2302      	movs	r3, #2
  }
}
 800424a:	4618      	mov	r0, r3
 800424c:	3710      	adds	r7, #16
 800424e:	46bd      	mov	sp, r7
 8004250:	bd80      	pop	{r7, pc}
	...

08004254 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004254:	b580      	push	{r7, lr}
 8004256:	b0ba      	sub	sp, #232	@ 0xe8
 8004258:	af00      	add	r7, sp, #0
 800425a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800427a:	2300      	movs	r3, #0
 800427c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004280:	2300      	movs	r3, #0
 8004282:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004286:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800428a:	f003 030f 	and.w	r3, r3, #15
 800428e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004292:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004296:	2b00      	cmp	r3, #0
 8004298:	d10f      	bne.n	80042ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800429a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800429e:	f003 0320 	and.w	r3, r3, #32
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d009      	beq.n	80042ba <HAL_UART_IRQHandler+0x66>
 80042a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042aa:	f003 0320 	and.w	r3, r3, #32
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d003      	beq.n	80042ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	f000 fbe3 	bl	8004a7e <UART_Receive_IT>
      return;
 80042b8:	e25b      	b.n	8004772 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80042ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80042be:	2b00      	cmp	r3, #0
 80042c0:	f000 80de 	beq.w	8004480 <HAL_UART_IRQHandler+0x22c>
 80042c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d106      	bne.n	80042de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80042d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042d4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80042d8:	2b00      	cmp	r3, #0
 80042da:	f000 80d1 	beq.w	8004480 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80042de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80042e2:	f003 0301 	and.w	r3, r3, #1
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d00b      	beq.n	8004302 <HAL_UART_IRQHandler+0xae>
 80042ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80042ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d005      	beq.n	8004302 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042fa:	f043 0201 	orr.w	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004306:	f003 0304 	and.w	r3, r3, #4
 800430a:	2b00      	cmp	r3, #0
 800430c:	d00b      	beq.n	8004326 <HAL_UART_IRQHandler+0xd2>
 800430e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004312:	f003 0301 	and.w	r3, r3, #1
 8004316:	2b00      	cmp	r3, #0
 8004318:	d005      	beq.n	8004326 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800431e:	f043 0202 	orr.w	r2, r3, #2
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004326:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800432a:	f003 0302 	and.w	r3, r3, #2
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00b      	beq.n	800434a <HAL_UART_IRQHandler+0xf6>
 8004332:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004336:	f003 0301 	and.w	r3, r3, #1
 800433a:	2b00      	cmp	r3, #0
 800433c:	d005      	beq.n	800434a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004342:	f043 0204 	orr.w	r2, r3, #4
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800434a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800434e:	f003 0308 	and.w	r3, r3, #8
 8004352:	2b00      	cmp	r3, #0
 8004354:	d011      	beq.n	800437a <HAL_UART_IRQHandler+0x126>
 8004356:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800435a:	f003 0320 	and.w	r3, r3, #32
 800435e:	2b00      	cmp	r3, #0
 8004360:	d105      	bne.n	800436e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004362:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004366:	f003 0301 	and.w	r3, r3, #1
 800436a:	2b00      	cmp	r3, #0
 800436c:	d005      	beq.n	800437a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004372:	f043 0208 	orr.w	r2, r3, #8
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800437e:	2b00      	cmp	r3, #0
 8004380:	f000 81f2 	beq.w	8004768 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004384:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004388:	f003 0320 	and.w	r3, r3, #32
 800438c:	2b00      	cmp	r3, #0
 800438e:	d008      	beq.n	80043a2 <HAL_UART_IRQHandler+0x14e>
 8004390:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004394:	f003 0320 	and.w	r3, r3, #32
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800439c:	6878      	ldr	r0, [r7, #4]
 800439e:	f000 fb6e 	bl	8004a7e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	695b      	ldr	r3, [r3, #20]
 80043a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	bf14      	ite	ne
 80043b0:	2301      	movne	r3, #1
 80043b2:	2300      	moveq	r3, #0
 80043b4:	b2db      	uxtb	r3, r3
 80043b6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043be:	f003 0308 	and.w	r3, r3, #8
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d103      	bne.n	80043ce <HAL_UART_IRQHandler+0x17a>
 80043c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d04f      	beq.n	800446e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fa78 	bl	80048c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	695b      	ldr	r3, [r3, #20]
 80043da:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d041      	beq.n	8004466 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	3314      	adds	r3, #20
 80043e8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80043f0:	e853 3f00 	ldrex	r3, [r3]
 80043f4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80043f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80043fc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004400:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	3314      	adds	r3, #20
 800440a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800440e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004412:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004416:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800441a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800441e:	e841 2300 	strex	r3, r2, [r1]
 8004422:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004426:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1d9      	bne.n	80043e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004432:	2b00      	cmp	r3, #0
 8004434:	d013      	beq.n	800445e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800443a:	4a7e      	ldr	r2, [pc, #504]	@ (8004634 <HAL_UART_IRQHandler+0x3e0>)
 800443c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004442:	4618      	mov	r0, r3
 8004444:	f7fe f9ae 	bl	80027a4 <HAL_DMA_Abort_IT>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	d016      	beq.n	800447c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004458:	4610      	mov	r0, r2
 800445a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800445c:	e00e      	b.n	800447c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800445e:	6878      	ldr	r0, [r7, #4]
 8004460:	f7fd fb7c 	bl	8001b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004464:	e00a      	b.n	800447c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004466:	6878      	ldr	r0, [r7, #4]
 8004468:	f7fd fb78 	bl	8001b5c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800446c:	e006      	b.n	800447c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800446e:	6878      	ldr	r0, [r7, #4]
 8004470:	f7fd fb74 	bl	8001b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800447a:	e175      	b.n	8004768 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800447c:	bf00      	nop
    return;
 800447e:	e173      	b.n	8004768 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004484:	2b01      	cmp	r3, #1
 8004486:	f040 814f 	bne.w	8004728 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800448a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800448e:	f003 0310 	and.w	r3, r3, #16
 8004492:	2b00      	cmp	r3, #0
 8004494:	f000 8148 	beq.w	8004728 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004498:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800449c:	f003 0310 	and.w	r3, r3, #16
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 8141 	beq.w	8004728 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80044a6:	2300      	movs	r3, #0
 80044a8:	60bb      	str	r3, [r7, #8]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60bb      	str	r3, [r7, #8]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	685b      	ldr	r3, [r3, #4]
 80044b8:	60bb      	str	r3, [r7, #8]
 80044ba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	695b      	ldr	r3, [r3, #20]
 80044c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 80b6 	beq.w	8004638 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80044d8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80044dc:	2b00      	cmp	r3, #0
 80044de:	f000 8145 	beq.w	800476c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80044e6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044ea:	429a      	cmp	r2, r3
 80044ec:	f080 813e 	bcs.w	800476c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80044f6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	2b20      	cmp	r3, #32
 8004500:	f000 8088 	beq.w	8004614 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	330c      	adds	r3, #12
 800450a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800450e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004512:	e853 3f00 	ldrex	r3, [r3]
 8004516:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800451a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800451e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004522:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	330c      	adds	r3, #12
 800452c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004530:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004534:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004538:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800453c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004540:	e841 2300 	strex	r3, r2, [r1]
 8004544:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004548:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1d9      	bne.n	8004504 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	3314      	adds	r3, #20
 8004556:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004558:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800455a:	e853 3f00 	ldrex	r3, [r3]
 800455e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004560:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004562:	f023 0301 	bic.w	r3, r3, #1
 8004566:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	3314      	adds	r3, #20
 8004570:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004574:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004578:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800457a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800457c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004580:	e841 2300 	strex	r3, r2, [r1]
 8004584:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004586:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004588:	2b00      	cmp	r3, #0
 800458a:	d1e1      	bne.n	8004550 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	3314      	adds	r3, #20
 8004592:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004594:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004596:	e853 3f00 	ldrex	r3, [r3]
 800459a:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800459c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800459e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80045a2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	3314      	adds	r3, #20
 80045ac:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80045b0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80045b2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80045b6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80045be:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e3      	bne.n	800458c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2220      	movs	r2, #32
 80045c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2200      	movs	r2, #0
 80045d0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	330c      	adds	r3, #12
 80045d8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045da:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80045dc:	e853 3f00 	ldrex	r3, [r3]
 80045e0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80045e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80045e4:	f023 0310 	bic.w	r3, r3, #16
 80045e8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	330c      	adds	r3, #12
 80045f2:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80045f6:	65ba      	str	r2, [r7, #88]	@ 0x58
 80045f8:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045fa:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80045fc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80045fe:	e841 2300 	strex	r3, r2, [r1]
 8004602:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004604:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004606:	2b00      	cmp	r3, #0
 8004608:	d1e3      	bne.n	80045d2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800460e:	4618      	mov	r0, r3
 8004610:	f7fe f88d 	bl	800272e <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2202      	movs	r2, #2
 8004618:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004622:	b29b      	uxth	r3, r3
 8004624:	1ad3      	subs	r3, r2, r3
 8004626:	b29b      	uxth	r3, r3
 8004628:	4619      	mov	r1, r3
 800462a:	6878      	ldr	r0, [r7, #4]
 800462c:	f000 f8ad 	bl	800478a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004630:	e09c      	b.n	800476c <HAL_UART_IRQHandler+0x518>
 8004632:	bf00      	nop
 8004634:	08004989 	.word	0x08004989
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004640:	b29b      	uxth	r3, r3
 8004642:	1ad3      	subs	r3, r2, r3
 8004644:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800464c:	b29b      	uxth	r3, r3
 800464e:	2b00      	cmp	r3, #0
 8004650:	f000 808e 	beq.w	8004770 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004654:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004658:	2b00      	cmp	r3, #0
 800465a:	f000 8089 	beq.w	8004770 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	330c      	adds	r3, #12
 8004664:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004666:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004668:	e853 3f00 	ldrex	r3, [r3]
 800466c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800466e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004670:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004674:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	330c      	adds	r3, #12
 800467e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004682:	647a      	str	r2, [r7, #68]	@ 0x44
 8004684:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004686:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004688:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800468a:	e841 2300 	strex	r3, r2, [r1]
 800468e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004690:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004692:	2b00      	cmp	r3, #0
 8004694:	d1e3      	bne.n	800465e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	3314      	adds	r3, #20
 800469c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800469e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80046a0:	e853 3f00 	ldrex	r3, [r3]
 80046a4:	623b      	str	r3, [r7, #32]
   return(result);
 80046a6:	6a3b      	ldr	r3, [r7, #32]
 80046a8:	f023 0301 	bic.w	r3, r3, #1
 80046ac:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	3314      	adds	r3, #20
 80046b6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80046ba:	633a      	str	r2, [r7, #48]	@ 0x30
 80046bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80046c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80046c2:	e841 2300 	strex	r3, r2, [r1]
 80046c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80046c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d1e3      	bne.n	8004696 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	2220      	movs	r2, #32
 80046d2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	2200      	movs	r2, #0
 80046da:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	330c      	adds	r3, #12
 80046e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046e4:	693b      	ldr	r3, [r7, #16]
 80046e6:	e853 3f00 	ldrex	r3, [r3]
 80046ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	f023 0310 	bic.w	r3, r3, #16
 80046f2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	330c      	adds	r3, #12
 80046fc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004700:	61fa      	str	r2, [r7, #28]
 8004702:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004704:	69b9      	ldr	r1, [r7, #24]
 8004706:	69fa      	ldr	r2, [r7, #28]
 8004708:	e841 2300 	strex	r3, r2, [r1]
 800470c:	617b      	str	r3, [r7, #20]
   return(result);
 800470e:	697b      	ldr	r3, [r7, #20]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d1e3      	bne.n	80046dc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2202      	movs	r2, #2
 8004718:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800471a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800471e:	4619      	mov	r1, r3
 8004720:	6878      	ldr	r0, [r7, #4]
 8004722:	f000 f832 	bl	800478a <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004726:	e023      	b.n	8004770 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004728:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800472c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004730:	2b00      	cmp	r3, #0
 8004732:	d009      	beq.n	8004748 <HAL_UART_IRQHandler+0x4f4>
 8004734:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004738:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800473c:	2b00      	cmp	r3, #0
 800473e:	d003      	beq.n	8004748 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004740:	6878      	ldr	r0, [r7, #4]
 8004742:	f000 f935 	bl	80049b0 <UART_Transmit_IT>
    return;
 8004746:	e014      	b.n	8004772 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004748:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800474c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004750:	2b00      	cmp	r3, #0
 8004752:	d00e      	beq.n	8004772 <HAL_UART_IRQHandler+0x51e>
 8004754:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004758:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800475c:	2b00      	cmp	r3, #0
 800475e:	d008      	beq.n	8004772 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004760:	6878      	ldr	r0, [r7, #4]
 8004762:	f000 f974 	bl	8004a4e <UART_EndTransmit_IT>
    return;
 8004766:	e004      	b.n	8004772 <HAL_UART_IRQHandler+0x51e>
    return;
 8004768:	bf00      	nop
 800476a:	e002      	b.n	8004772 <HAL_UART_IRQHandler+0x51e>
      return;
 800476c:	bf00      	nop
 800476e:	e000      	b.n	8004772 <HAL_UART_IRQHandler+0x51e>
      return;
 8004770:	bf00      	nop
  }
}
 8004772:	37e8      	adds	r7, #232	@ 0xe8
 8004774:	46bd      	mov	sp, r7
 8004776:	bd80      	pop	{r7, pc}

08004778 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	bc80      	pop	{r7}
 8004788:	4770      	bx	lr

0800478a <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800478a:	b480      	push	{r7}
 800478c:	b083      	sub	sp, #12
 800478e:	af00      	add	r7, sp, #0
 8004790:	6078      	str	r0, [r7, #4]
 8004792:	460b      	mov	r3, r1
 8004794:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b086      	sub	sp, #24
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	60f8      	str	r0, [r7, #12]
 80047a8:	60b9      	str	r1, [r7, #8]
 80047aa:	603b      	str	r3, [r7, #0]
 80047ac:	4613      	mov	r3, r2
 80047ae:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047b0:	e03b      	b.n	800482a <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047b2:	6a3b      	ldr	r3, [r7, #32]
 80047b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047b8:	d037      	beq.n	800482a <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ba:	f7fd fe7d 	bl	80024b8 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	683b      	ldr	r3, [r7, #0]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	6a3a      	ldr	r2, [r7, #32]
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d302      	bcc.n	80047d0 <UART_WaitOnFlagUntilTimeout+0x30>
 80047ca:	6a3b      	ldr	r3, [r7, #32]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d101      	bne.n	80047d4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e03a      	b.n	800484a <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	68db      	ldr	r3, [r3, #12]
 80047da:	f003 0304 	and.w	r3, r3, #4
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d023      	beq.n	800482a <UART_WaitOnFlagUntilTimeout+0x8a>
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b80      	cmp	r3, #128	@ 0x80
 80047e6:	d020      	beq.n	800482a <UART_WaitOnFlagUntilTimeout+0x8a>
 80047e8:	68bb      	ldr	r3, [r7, #8]
 80047ea:	2b40      	cmp	r3, #64	@ 0x40
 80047ec:	d01d      	beq.n	800482a <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0308 	and.w	r3, r3, #8
 80047f8:	2b08      	cmp	r3, #8
 80047fa:	d116      	bne.n	800482a <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80047fc:	2300      	movs	r3, #0
 80047fe:	617b      	str	r3, [r7, #20]
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	617b      	str	r3, [r7, #20]
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	617b      	str	r3, [r7, #20]
 8004810:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f856 	bl	80048c4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	2208      	movs	r2, #8
 800481c:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	2200      	movs	r2, #0
 8004822:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004826:	2301      	movs	r3, #1
 8004828:	e00f      	b.n	800484a <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	681a      	ldr	r2, [r3, #0]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4013      	ands	r3, r2
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	429a      	cmp	r2, r3
 8004838:	bf0c      	ite	eq
 800483a:	2301      	moveq	r3, #1
 800483c:	2300      	movne	r3, #0
 800483e:	b2db      	uxtb	r3, r3
 8004840:	461a      	mov	r2, r3
 8004842:	79fb      	ldrb	r3, [r7, #7]
 8004844:	429a      	cmp	r2, r3
 8004846:	d0b4      	beq.n	80047b2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004848:	2300      	movs	r3, #0
}
 800484a:	4618      	mov	r0, r3
 800484c:	3718      	adds	r7, #24
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}

08004852 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004852:	b480      	push	{r7}
 8004854:	b085      	sub	sp, #20
 8004856:	af00      	add	r7, sp, #0
 8004858:	60f8      	str	r0, [r7, #12]
 800485a:	60b9      	str	r1, [r7, #8]
 800485c:	4613      	mov	r3, r2
 800485e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	68ba      	ldr	r2, [r7, #8]
 8004864:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	88fa      	ldrh	r2, [r7, #6]
 800486a:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	88fa      	ldrh	r2, [r7, #6]
 8004870:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	2200      	movs	r2, #0
 8004876:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	2222      	movs	r2, #34	@ 0x22
 800487c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	691b      	ldr	r3, [r3, #16]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d007      	beq.n	8004898 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	68da      	ldr	r2, [r3, #12]
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004896:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	695a      	ldr	r2, [r3, #20]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f042 0201 	orr.w	r2, r2, #1
 80048a6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	68da      	ldr	r2, [r3, #12]
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	f042 0220 	orr.w	r2, r2, #32
 80048b6:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80048b8:	2300      	movs	r3, #0
}
 80048ba:	4618      	mov	r0, r3
 80048bc:	3714      	adds	r7, #20
 80048be:	46bd      	mov	sp, r7
 80048c0:	bc80      	pop	{r7}
 80048c2:	4770      	bx	lr

080048c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b095      	sub	sp, #84	@ 0x54
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	330c      	adds	r3, #12
 80048d2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80048d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d6:	e853 3f00 	ldrex	r3, [r3]
 80048da:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80048dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048de:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80048e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	330c      	adds	r3, #12
 80048ea:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80048ec:	643a      	str	r2, [r7, #64]	@ 0x40
 80048ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048f0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80048f2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80048f4:	e841 2300 	strex	r3, r2, [r1]
 80048f8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80048fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d1e5      	bne.n	80048cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	3314      	adds	r3, #20
 8004906:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004908:	6a3b      	ldr	r3, [r7, #32]
 800490a:	e853 3f00 	ldrex	r3, [r3]
 800490e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	f023 0301 	bic.w	r3, r3, #1
 8004916:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	3314      	adds	r3, #20
 800491e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004920:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004922:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004924:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004926:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004928:	e841 2300 	strex	r3, r2, [r1]
 800492c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800492e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004930:	2b00      	cmp	r3, #0
 8004932:	d1e5      	bne.n	8004900 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004938:	2b01      	cmp	r3, #1
 800493a:	d119      	bne.n	8004970 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	330c      	adds	r3, #12
 8004942:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	e853 3f00 	ldrex	r3, [r3]
 800494a:	60bb      	str	r3, [r7, #8]
   return(result);
 800494c:	68bb      	ldr	r3, [r7, #8]
 800494e:	f023 0310 	bic.w	r3, r3, #16
 8004952:	647b      	str	r3, [r7, #68]	@ 0x44
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	330c      	adds	r3, #12
 800495a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800495c:	61ba      	str	r2, [r7, #24]
 800495e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004960:	6979      	ldr	r1, [r7, #20]
 8004962:	69ba      	ldr	r2, [r7, #24]
 8004964:	e841 2300 	strex	r3, r2, [r1]
 8004968:	613b      	str	r3, [r7, #16]
   return(result);
 800496a:	693b      	ldr	r3, [r7, #16]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d1e5      	bne.n	800493c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2220      	movs	r2, #32
 8004974:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2200      	movs	r2, #0
 800497c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800497e:	bf00      	nop
 8004980:	3754      	adds	r7, #84	@ 0x54
 8004982:	46bd      	mov	sp, r7
 8004984:	bc80      	pop	{r7}
 8004986:	4770      	bx	lr

08004988 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004988:	b580      	push	{r7, lr}
 800498a:	b084      	sub	sp, #16
 800498c:	af00      	add	r7, sp, #0
 800498e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004994:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2200      	movs	r2, #0
 800499a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	2200      	movs	r2, #0
 80049a0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80049a2:	68f8      	ldr	r0, [r7, #12]
 80049a4:	f7fd f8da 	bl	8001b5c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80049a8:	bf00      	nop
 80049aa:	3710      	adds	r7, #16
 80049ac:	46bd      	mov	sp, r7
 80049ae:	bd80      	pop	{r7, pc}

080049b0 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80049b0:	b480      	push	{r7}
 80049b2:	b085      	sub	sp, #20
 80049b4:	af00      	add	r7, sp, #0
 80049b6:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049be:	b2db      	uxtb	r3, r3
 80049c0:	2b21      	cmp	r3, #33	@ 0x21
 80049c2:	d13e      	bne.n	8004a42 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049cc:	d114      	bne.n	80049f8 <UART_Transmit_IT+0x48>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	691b      	ldr	r3, [r3, #16]
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d110      	bne.n	80049f8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a1b      	ldr	r3, [r3, #32]
 80049da:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	881b      	ldrh	r3, [r3, #0]
 80049e0:	461a      	mov	r2, r3
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049ea:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	6a1b      	ldr	r3, [r3, #32]
 80049f0:	1c9a      	adds	r2, r3, #2
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	621a      	str	r2, [r3, #32]
 80049f6:	e008      	b.n	8004a0a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	1c59      	adds	r1, r3, #1
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	6211      	str	r1, [r2, #32]
 8004a02:	781a      	ldrb	r2, [r3, #0]
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a0e:	b29b      	uxth	r3, r3
 8004a10:	3b01      	subs	r3, #1
 8004a12:	b29b      	uxth	r3, r3
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	4619      	mov	r1, r3
 8004a18:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10f      	bne.n	8004a3e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	68da      	ldr	r2, [r3, #12]
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004a2c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68da      	ldr	r2, [r3, #12]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004a3c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	e000      	b.n	8004a44 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004a42:	2302      	movs	r3, #2
  }
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3714      	adds	r7, #20
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	bc80      	pop	{r7}
 8004a4c:	4770      	bx	lr

08004a4e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004a4e:	b580      	push	{r7, lr}
 8004a50:	b082      	sub	sp, #8
 8004a52:	af00      	add	r7, sp, #0
 8004a54:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	68da      	ldr	r2, [r3, #12]
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004a64:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	2220      	movs	r2, #32
 8004a6a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f7ff fe82 	bl	8004778 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004a74:	2300      	movs	r3, #0
}
 8004a76:	4618      	mov	r0, r3
 8004a78:	3708      	adds	r7, #8
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}

08004a7e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004a7e:	b580      	push	{r7, lr}
 8004a80:	b08c      	sub	sp, #48	@ 0x30
 8004a82:	af00      	add	r7, sp, #0
 8004a84:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a8c:	b2db      	uxtb	r3, r3
 8004a8e:	2b22      	cmp	r3, #34	@ 0x22
 8004a90:	f040 80ae 	bne.w	8004bf0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	689b      	ldr	r3, [r3, #8]
 8004a98:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004a9c:	d117      	bne.n	8004ace <UART_Receive_IT+0x50>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d113      	bne.n	8004ace <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004aae:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	b29b      	uxth	r3, r3
 8004ab8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004abc:	b29a      	uxth	r2, r3
 8004abe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ac0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ac6:	1c9a      	adds	r2, r3, #2
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	629a      	str	r2, [r3, #40]	@ 0x28
 8004acc:	e026      	b.n	8004b1c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ad2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8004ad4:	2300      	movs	r3, #0
 8004ad6:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ae0:	d007      	beq.n	8004af2 <UART_Receive_IT+0x74>
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	689b      	ldr	r3, [r3, #8]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10a      	bne.n	8004b00 <UART_Receive_IT+0x82>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	691b      	ldr	r3, [r3, #16]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	b2da      	uxtb	r2, r3
 8004afa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004afc:	701a      	strb	r2, [r3, #0]
 8004afe:	e008      	b.n	8004b12 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	b2db      	uxtb	r3, r3
 8004b08:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004b0c:	b2da      	uxtb	r2, r3
 8004b0e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004b10:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004b16:	1c5a      	adds	r2, r3, #1
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004b20:	b29b      	uxth	r3, r3
 8004b22:	3b01      	subs	r3, #1
 8004b24:	b29b      	uxth	r3, r3
 8004b26:	687a      	ldr	r2, [r7, #4]
 8004b28:	4619      	mov	r1, r3
 8004b2a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d15d      	bne.n	8004bec <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	68da      	ldr	r2, [r3, #12]
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	f022 0220 	bic.w	r2, r2, #32
 8004b3e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004b4e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	695a      	ldr	r2, [r3, #20]
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f022 0201 	bic.w	r2, r2, #1
 8004b5e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2220      	movs	r2, #32
 8004b64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b72:	2b01      	cmp	r3, #1
 8004b74:	d135      	bne.n	8004be2 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2200      	movs	r2, #0
 8004b7a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	330c      	adds	r3, #12
 8004b82:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	e853 3f00 	ldrex	r3, [r3]
 8004b8a:	613b      	str	r3, [r7, #16]
   return(result);
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	f023 0310 	bic.w	r3, r3, #16
 8004b92:	627b      	str	r3, [r7, #36]	@ 0x24
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	330c      	adds	r3, #12
 8004b9a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004b9c:	623a      	str	r2, [r7, #32]
 8004b9e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ba0:	69f9      	ldr	r1, [r7, #28]
 8004ba2:	6a3a      	ldr	r2, [r7, #32]
 8004ba4:	e841 2300 	strex	r3, r2, [r1]
 8004ba8:	61bb      	str	r3, [r7, #24]
   return(result);
 8004baa:	69bb      	ldr	r3, [r7, #24]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d1e5      	bne.n	8004b7c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	f003 0310 	and.w	r3, r3, #16
 8004bba:	2b10      	cmp	r3, #16
 8004bbc:	d10a      	bne.n	8004bd4 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60fb      	str	r3, [r7, #12]
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	60fb      	str	r3, [r7, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	685b      	ldr	r3, [r3, #4]
 8004bd0:	60fb      	str	r3, [r7, #12]
 8004bd2:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004bd8:	4619      	mov	r1, r3
 8004bda:	6878      	ldr	r0, [r7, #4]
 8004bdc:	f7ff fdd5 	bl	800478a <HAL_UARTEx_RxEventCallback>
 8004be0:	e002      	b.n	8004be8 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fc ff5e 	bl	8001aa4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	e002      	b.n	8004bf2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004bec:	2300      	movs	r3, #0
 8004bee:	e000      	b.n	8004bf2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004bf0:	2302      	movs	r3, #2
  }
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	3730      	adds	r7, #48	@ 0x30
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	bd80      	pop	{r7, pc}
	...

08004bfc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004bfc:	b580      	push	{r7, lr}
 8004bfe:	b084      	sub	sp, #16
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691b      	ldr	r3, [r3, #16]
 8004c0a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68da      	ldr	r2, [r3, #12]
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	430a      	orrs	r2, r1
 8004c18:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	689a      	ldr	r2, [r3, #8]
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	691b      	ldr	r3, [r3, #16]
 8004c22:	431a      	orrs	r2, r3
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	4313      	orrs	r3, r2
 8004c2a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68db      	ldr	r3, [r3, #12]
 8004c32:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8004c36:	f023 030c 	bic.w	r3, r3, #12
 8004c3a:	687a      	ldr	r2, [r7, #4]
 8004c3c:	6812      	ldr	r2, [r2, #0]
 8004c3e:	68b9      	ldr	r1, [r7, #8]
 8004c40:	430b      	orrs	r3, r1
 8004c42:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	699a      	ldr	r2, [r3, #24]
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	430a      	orrs	r2, r1
 8004c58:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a2c      	ldr	r2, [pc, #176]	@ (8004d10 <UART_SetConfig+0x114>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d103      	bne.n	8004c6c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004c64:	f7fe fb90 	bl	8003388 <HAL_RCC_GetPCLK2Freq>
 8004c68:	60f8      	str	r0, [r7, #12]
 8004c6a:	e002      	b.n	8004c72 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004c6c:	f7fe fb78 	bl	8003360 <HAL_RCC_GetPCLK1Freq>
 8004c70:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004c72:	68fa      	ldr	r2, [r7, #12]
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	009a      	lsls	r2, r3, #2
 8004c7c:	441a      	add	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	009b      	lsls	r3, r3, #2
 8004c84:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c88:	4a22      	ldr	r2, [pc, #136]	@ (8004d14 <UART_SetConfig+0x118>)
 8004c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c8e:	095b      	lsrs	r3, r3, #5
 8004c90:	0119      	lsls	r1, r3, #4
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	4613      	mov	r3, r2
 8004c96:	009b      	lsls	r3, r3, #2
 8004c98:	4413      	add	r3, r2
 8004c9a:	009a      	lsls	r2, r3, #2
 8004c9c:	441a      	add	r2, r3
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	685b      	ldr	r3, [r3, #4]
 8004ca2:	009b      	lsls	r3, r3, #2
 8004ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ca8:	4b1a      	ldr	r3, [pc, #104]	@ (8004d14 <UART_SetConfig+0x118>)
 8004caa:	fba3 0302 	umull	r0, r3, r3, r2
 8004cae:	095b      	lsrs	r3, r3, #5
 8004cb0:	2064      	movs	r0, #100	@ 0x64
 8004cb2:	fb00 f303 	mul.w	r3, r0, r3
 8004cb6:	1ad3      	subs	r3, r2, r3
 8004cb8:	011b      	lsls	r3, r3, #4
 8004cba:	3332      	adds	r3, #50	@ 0x32
 8004cbc:	4a15      	ldr	r2, [pc, #84]	@ (8004d14 <UART_SetConfig+0x118>)
 8004cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8004cc2:	095b      	lsrs	r3, r3, #5
 8004cc4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004cc8:	4419      	add	r1, r3
 8004cca:	68fa      	ldr	r2, [r7, #12]
 8004ccc:	4613      	mov	r3, r2
 8004cce:	009b      	lsls	r3, r3, #2
 8004cd0:	4413      	add	r3, r2
 8004cd2:	009a      	lsls	r2, r3, #2
 8004cd4:	441a      	add	r2, r3
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	685b      	ldr	r3, [r3, #4]
 8004cda:	009b      	lsls	r3, r3, #2
 8004cdc:	fbb2 f2f3 	udiv	r2, r2, r3
 8004ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8004d14 <UART_SetConfig+0x118>)
 8004ce2:	fba3 0302 	umull	r0, r3, r3, r2
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	2064      	movs	r0, #100	@ 0x64
 8004cea:	fb00 f303 	mul.w	r3, r0, r3
 8004cee:	1ad3      	subs	r3, r2, r3
 8004cf0:	011b      	lsls	r3, r3, #4
 8004cf2:	3332      	adds	r3, #50	@ 0x32
 8004cf4:	4a07      	ldr	r2, [pc, #28]	@ (8004d14 <UART_SetConfig+0x118>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	095b      	lsrs	r3, r3, #5
 8004cfc:	f003 020f 	and.w	r2, r3, #15
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	440a      	add	r2, r1
 8004d06:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004d08:	bf00      	nop
 8004d0a:	3710      	adds	r7, #16
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	bd80      	pop	{r7, pc}
 8004d10:	40013800 	.word	0x40013800
 8004d14:	51eb851f 	.word	0x51eb851f

08004d18 <__NVIC_SetPriority>:
{
 8004d18:	b480      	push	{r7}
 8004d1a:	b083      	sub	sp, #12
 8004d1c:	af00      	add	r7, sp, #0
 8004d1e:	4603      	mov	r3, r0
 8004d20:	6039      	str	r1, [r7, #0]
 8004d22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	db0a      	blt.n	8004d42 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	b2da      	uxtb	r2, r3
 8004d30:	490c      	ldr	r1, [pc, #48]	@ (8004d64 <__NVIC_SetPriority+0x4c>)
 8004d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d36:	0112      	lsls	r2, r2, #4
 8004d38:	b2d2      	uxtb	r2, r2
 8004d3a:	440b      	add	r3, r1
 8004d3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004d40:	e00a      	b.n	8004d58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d42:	683b      	ldr	r3, [r7, #0]
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	4908      	ldr	r1, [pc, #32]	@ (8004d68 <__NVIC_SetPriority+0x50>)
 8004d48:	79fb      	ldrb	r3, [r7, #7]
 8004d4a:	f003 030f 	and.w	r3, r3, #15
 8004d4e:	3b04      	subs	r3, #4
 8004d50:	0112      	lsls	r2, r2, #4
 8004d52:	b2d2      	uxtb	r2, r2
 8004d54:	440b      	add	r3, r1
 8004d56:	761a      	strb	r2, [r3, #24]
}
 8004d58:	bf00      	nop
 8004d5a:	370c      	adds	r7, #12
 8004d5c:	46bd      	mov	sp, r7
 8004d5e:	bc80      	pop	{r7}
 8004d60:	4770      	bx	lr
 8004d62:	bf00      	nop
 8004d64:	e000e100 	.word	0xe000e100
 8004d68:	e000ed00 	.word	0xe000ed00

08004d6c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004d6c:	b580      	push	{r7, lr}
 8004d6e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004d70:	2100      	movs	r1, #0
 8004d72:	f06f 0004 	mvn.w	r0, #4
 8004d76:	f7ff ffcf 	bl	8004d18 <__NVIC_SetPriority>
#endif
}
 8004d7a:	bf00      	nop
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b082      	sub	sp, #8
 8004d84:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d86:	f3ef 8305 	mrs	r3, IPSR
 8004d8a:	603b      	str	r3, [r7, #0]
  return(result);
 8004d8c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d003      	beq.n	8004d9a <osKernelStart+0x1a>
    stat = osErrorISR;
 8004d92:	f06f 0305 	mvn.w	r3, #5
 8004d96:	607b      	str	r3, [r7, #4]
 8004d98:	e010      	b.n	8004dbc <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004d9a:	4b0b      	ldr	r3, [pc, #44]	@ (8004dc8 <osKernelStart+0x48>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	2b01      	cmp	r3, #1
 8004da0:	d109      	bne.n	8004db6 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004da2:	f7ff ffe3 	bl	8004d6c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004da6:	4b08      	ldr	r3, [pc, #32]	@ (8004dc8 <osKernelStart+0x48>)
 8004da8:	2202      	movs	r2, #2
 8004daa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004dac:	f001 f930 	bl	8006010 <vTaskStartScheduler>
      stat = osOK;
 8004db0:	2300      	movs	r3, #0
 8004db2:	607b      	str	r3, [r7, #4]
 8004db4:	e002      	b.n	8004dbc <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004db6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004dbc:	687b      	ldr	r3, [r7, #4]
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3708      	adds	r7, #8
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	200001f4 	.word	0x200001f4

08004dcc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b08e      	sub	sp, #56	@ 0x38
 8004dd0:	af04      	add	r7, sp, #16
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004dd8:	2300      	movs	r3, #0
 8004dda:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ddc:	f3ef 8305 	mrs	r3, IPSR
 8004de0:	617b      	str	r3, [r7, #20]
  return(result);
 8004de2:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d17e      	bne.n	8004ee6 <osThreadNew+0x11a>
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d07b      	beq.n	8004ee6 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004dee:	2380      	movs	r3, #128	@ 0x80
 8004df0:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004df2:	2318      	movs	r3, #24
 8004df4:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004df6:	2300      	movs	r3, #0
 8004df8:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004dfa:	f04f 33ff 	mov.w	r3, #4294967295
 8004dfe:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d045      	beq.n	8004e92 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d002      	beq.n	8004e14 <osThreadNew+0x48>
        name = attr->name;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	699b      	ldr	r3, [r3, #24]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d002      	beq.n	8004e22 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	699b      	ldr	r3, [r3, #24]
 8004e20:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004e22:	69fb      	ldr	r3, [r7, #28]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d008      	beq.n	8004e3a <osThreadNew+0x6e>
 8004e28:	69fb      	ldr	r3, [r7, #28]
 8004e2a:	2b38      	cmp	r3, #56	@ 0x38
 8004e2c:	d805      	bhi.n	8004e3a <osThreadNew+0x6e>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	f003 0301 	and.w	r3, r3, #1
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d001      	beq.n	8004e3e <osThreadNew+0x72>
        return (NULL);
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	e054      	b.n	8004ee8 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d003      	beq.n	8004e4e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	089b      	lsrs	r3, r3, #2
 8004e4c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	689b      	ldr	r3, [r3, #8]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d00e      	beq.n	8004e74 <osThreadNew+0xa8>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	68db      	ldr	r3, [r3, #12]
 8004e5a:	2b5b      	cmp	r3, #91	@ 0x5b
 8004e5c:	d90a      	bls.n	8004e74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d006      	beq.n	8004e74 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	695b      	ldr	r3, [r3, #20]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <osThreadNew+0xa8>
        mem = 1;
 8004e6e:	2301      	movs	r3, #1
 8004e70:	61bb      	str	r3, [r7, #24]
 8004e72:	e010      	b.n	8004e96 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d10c      	bne.n	8004e96 <osThreadNew+0xca>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	68db      	ldr	r3, [r3, #12]
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d108      	bne.n	8004e96 <osThreadNew+0xca>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	691b      	ldr	r3, [r3, #16]
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d104      	bne.n	8004e96 <osThreadNew+0xca>
          mem = 0;
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	61bb      	str	r3, [r7, #24]
 8004e90:	e001      	b.n	8004e96 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004e92:	2300      	movs	r3, #0
 8004e94:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	d110      	bne.n	8004ebe <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004ea0:	687a      	ldr	r2, [r7, #4]
 8004ea2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004ea4:	9202      	str	r2, [sp, #8]
 8004ea6:	9301      	str	r3, [sp, #4]
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	9300      	str	r3, [sp, #0]
 8004eac:	68bb      	ldr	r3, [r7, #8]
 8004eae:	6a3a      	ldr	r2, [r7, #32]
 8004eb0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004eb2:	68f8      	ldr	r0, [r7, #12]
 8004eb4:	f000 fed0 	bl	8005c58 <xTaskCreateStatic>
 8004eb8:	4603      	mov	r3, r0
 8004eba:	613b      	str	r3, [r7, #16]
 8004ebc:	e013      	b.n	8004ee6 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004ebe:	69bb      	ldr	r3, [r7, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d110      	bne.n	8004ee6 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ec4:	6a3b      	ldr	r3, [r7, #32]
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	f107 0310 	add.w	r3, r7, #16
 8004ecc:	9301      	str	r3, [sp, #4]
 8004ece:	69fb      	ldr	r3, [r7, #28]
 8004ed0:	9300      	str	r3, [sp, #0]
 8004ed2:	68bb      	ldr	r3, [r7, #8]
 8004ed4:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 ff1e 	bl	8005d18 <xTaskCreate>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d001      	beq.n	8004ee6 <osThreadNew+0x11a>
            hTask = NULL;
 8004ee2:	2300      	movs	r3, #0
 8004ee4:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004ee6:	693b      	ldr	r3, [r7, #16]
}
 8004ee8:	4618      	mov	r0, r3
 8004eea:	3728      	adds	r7, #40	@ 0x28
 8004eec:	46bd      	mov	sp, r7
 8004eee:	bd80      	pop	{r7, pc}

08004ef0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004ef0:	b580      	push	{r7, lr}
 8004ef2:	b084      	sub	sp, #16
 8004ef4:	af00      	add	r7, sp, #0
 8004ef6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ef8:	f3ef 8305 	mrs	r3, IPSR
 8004efc:	60bb      	str	r3, [r7, #8]
  return(result);
 8004efe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d003      	beq.n	8004f0c <osDelay+0x1c>
    stat = osErrorISR;
 8004f04:	f06f 0305 	mvn.w	r3, #5
 8004f08:	60fb      	str	r3, [r7, #12]
 8004f0a:	e007      	b.n	8004f1c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004f0c:	2300      	movs	r3, #0
 8004f0e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d002      	beq.n	8004f1c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004f16:	6878      	ldr	r0, [r7, #4]
 8004f18:	f001 f844 	bl	8005fa4 <vTaskDelay>
    }
  }

  return (stat);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
}
 8004f1e:	4618      	mov	r0, r3
 8004f20:	3710      	adds	r7, #16
 8004f22:	46bd      	mov	sp, r7
 8004f24:	bd80      	pop	{r7, pc}
	...

08004f28 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
 8004f2e:	60f8      	str	r0, [r7, #12]
 8004f30:	60b9      	str	r1, [r7, #8]
 8004f32:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	4a06      	ldr	r2, [pc, #24]	@ (8004f50 <vApplicationGetIdleTaskMemory+0x28>)
 8004f38:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	4a05      	ldr	r2, [pc, #20]	@ (8004f54 <vApplicationGetIdleTaskMemory+0x2c>)
 8004f3e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2280      	movs	r2, #128	@ 0x80
 8004f44:	601a      	str	r2, [r3, #0]
}
 8004f46:	bf00      	nop
 8004f48:	3714      	adds	r7, #20
 8004f4a:	46bd      	mov	sp, r7
 8004f4c:	bc80      	pop	{r7}
 8004f4e:	4770      	bx	lr
 8004f50:	200001f8 	.word	0x200001f8
 8004f54:	20000254 	.word	0x20000254

08004f58 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f58:	b480      	push	{r7}
 8004f5a:	b085      	sub	sp, #20
 8004f5c:	af00      	add	r7, sp, #0
 8004f5e:	60f8      	str	r0, [r7, #12]
 8004f60:	60b9      	str	r1, [r7, #8]
 8004f62:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	4a07      	ldr	r2, [pc, #28]	@ (8004f84 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f68:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f6a:	68bb      	ldr	r3, [r7, #8]
 8004f6c:	4a06      	ldr	r2, [pc, #24]	@ (8004f88 <vApplicationGetTimerTaskMemory+0x30>)
 8004f6e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004f76:	601a      	str	r2, [r3, #0]
}
 8004f78:	bf00      	nop
 8004f7a:	3714      	adds	r7, #20
 8004f7c:	46bd      	mov	sp, r7
 8004f7e:	bc80      	pop	{r7}
 8004f80:	4770      	bx	lr
 8004f82:	bf00      	nop
 8004f84:	20000454 	.word	0x20000454
 8004f88:	200004b0 	.word	0x200004b0

08004f8c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	b083      	sub	sp, #12
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	f103 0208 	add.w	r2, r3, #8
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f04f 32ff 	mov.w	r2, #4294967295
 8004fa4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	f103 0208 	add.w	r2, r3, #8
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	f103 0208 	add.w	r2, r3, #8
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fc0:	bf00      	nop
 8004fc2:	370c      	adds	r7, #12
 8004fc4:	46bd      	mov	sp, r7
 8004fc6:	bc80      	pop	{r7}
 8004fc8:	4770      	bx	lr

08004fca <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004fca:	b480      	push	{r7}
 8004fcc:	b083      	sub	sp, #12
 8004fce:	af00      	add	r7, sp, #0
 8004fd0:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004fd8:	bf00      	nop
 8004fda:	370c      	adds	r7, #12
 8004fdc:	46bd      	mov	sp, r7
 8004fde:	bc80      	pop	{r7}
 8004fe0:	4770      	bx	lr

08004fe2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004fe2:	b480      	push	{r7}
 8004fe4:	b085      	sub	sp, #20
 8004fe6:	af00      	add	r7, sp, #0
 8004fe8:	6078      	str	r0, [r7, #4]
 8004fea:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	685b      	ldr	r3, [r3, #4]
 8004ff0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004ff2:	683b      	ldr	r3, [r7, #0]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	689a      	ldr	r2, [r3, #8]
 8004ffc:	683b      	ldr	r3, [r7, #0]
 8004ffe:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	683a      	ldr	r2, [r7, #0]
 8005006:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	683a      	ldr	r2, [r7, #0]
 800500c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800500e:	683b      	ldr	r3, [r7, #0]
 8005010:	687a      	ldr	r2, [r7, #4]
 8005012:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	1c5a      	adds	r2, r3, #1
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	601a      	str	r2, [r3, #0]
}
 800501e:	bf00      	nop
 8005020:	3714      	adds	r7, #20
 8005022:	46bd      	mov	sp, r7
 8005024:	bc80      	pop	{r7}
 8005026:	4770      	bx	lr

08005028 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005028:	b480      	push	{r7}
 800502a:	b085      	sub	sp, #20
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
 8005030:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800503e:	d103      	bne.n	8005048 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	60fb      	str	r3, [r7, #12]
 8005046:	e00c      	b.n	8005062 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	3308      	adds	r3, #8
 800504c:	60fb      	str	r3, [r7, #12]
 800504e:	e002      	b.n	8005056 <vListInsert+0x2e>
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	60fb      	str	r3, [r7, #12]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	685b      	ldr	r3, [r3, #4]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	429a      	cmp	r2, r3
 8005060:	d2f6      	bcs.n	8005050 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	685a      	ldr	r2, [r3, #4]
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	683a      	ldr	r2, [r7, #0]
 8005070:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	68fa      	ldr	r2, [r7, #12]
 8005076:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	683a      	ldr	r2, [r7, #0]
 800507c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	601a      	str	r2, [r3, #0]
}
 800508e:	bf00      	nop
 8005090:	3714      	adds	r7, #20
 8005092:	46bd      	mov	sp, r7
 8005094:	bc80      	pop	{r7}
 8005096:	4770      	bx	lr

08005098 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005098:	b480      	push	{r7}
 800509a:	b085      	sub	sp, #20
 800509c:	af00      	add	r7, sp, #0
 800509e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	691b      	ldr	r3, [r3, #16]
 80050a4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	685b      	ldr	r3, [r3, #4]
 80050aa:	687a      	ldr	r2, [r7, #4]
 80050ac:	6892      	ldr	r2, [r2, #8]
 80050ae:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	689b      	ldr	r3, [r3, #8]
 80050b4:	687a      	ldr	r2, [r7, #4]
 80050b6:	6852      	ldr	r2, [r2, #4]
 80050b8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	429a      	cmp	r2, r3
 80050c2:	d103      	bne.n	80050cc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	689a      	ldr	r2, [r3, #8]
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2200      	movs	r2, #0
 80050d0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	1e5a      	subs	r2, r3, #1
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
}
 80050e0:	4618      	mov	r0, r3
 80050e2:	3714      	adds	r7, #20
 80050e4:	46bd      	mov	sp, r7
 80050e6:	bc80      	pop	{r7}
 80050e8:	4770      	bx	lr
	...

080050ec <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80050ec:	b580      	push	{r7, lr}
 80050ee:	b084      	sub	sp, #16
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d10b      	bne.n	8005118 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005100:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005104:	f383 8811 	msr	BASEPRI, r3
 8005108:	f3bf 8f6f 	isb	sy
 800510c:	f3bf 8f4f 	dsb	sy
 8005110:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005112:	bf00      	nop
 8005114:	bf00      	nop
 8005116:	e7fd      	b.n	8005114 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005118:	f002 f8f0 	bl	80072fc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005124:	68f9      	ldr	r1, [r7, #12]
 8005126:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005128:	fb01 f303 	mul.w	r3, r1, r3
 800512c:	441a      	add	r2, r3
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681a      	ldr	r2, [r3, #0]
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	681a      	ldr	r2, [r3, #0]
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005148:	3b01      	subs	r3, #1
 800514a:	68f9      	ldr	r1, [r7, #12]
 800514c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800514e:	fb01 f303 	mul.w	r3, r1, r3
 8005152:	441a      	add	r2, r3
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	22ff      	movs	r2, #255	@ 0xff
 800515c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	22ff      	movs	r2, #255	@ 0xff
 8005164:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d114      	bne.n	8005198 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d01a      	beq.n	80051ac <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	3310      	adds	r3, #16
 800517a:	4618      	mov	r0, r3
 800517c:	f001 f9d4 	bl	8006528 <xTaskRemoveFromEventList>
 8005180:	4603      	mov	r3, r0
 8005182:	2b00      	cmp	r3, #0
 8005184:	d012      	beq.n	80051ac <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005186:	4b0d      	ldr	r3, [pc, #52]	@ (80051bc <xQueueGenericReset+0xd0>)
 8005188:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800518c:	601a      	str	r2, [r3, #0]
 800518e:	f3bf 8f4f 	dsb	sy
 8005192:	f3bf 8f6f 	isb	sy
 8005196:	e009      	b.n	80051ac <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	3310      	adds	r3, #16
 800519c:	4618      	mov	r0, r3
 800519e:	f7ff fef5 	bl	8004f8c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	3324      	adds	r3, #36	@ 0x24
 80051a6:	4618      	mov	r0, r3
 80051a8:	f7ff fef0 	bl	8004f8c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051ac:	f002 f8d6 	bl	800735c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051b0:	2301      	movs	r3, #1
}
 80051b2:	4618      	mov	r0, r3
 80051b4:	3710      	adds	r7, #16
 80051b6:	46bd      	mov	sp, r7
 80051b8:	bd80      	pop	{r7, pc}
 80051ba:	bf00      	nop
 80051bc:	e000ed04 	.word	0xe000ed04

080051c0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b08e      	sub	sp, #56	@ 0x38
 80051c4:	af02      	add	r7, sp, #8
 80051c6:	60f8      	str	r0, [r7, #12]
 80051c8:	60b9      	str	r1, [r7, #8]
 80051ca:	607a      	str	r2, [r7, #4]
 80051cc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d10b      	bne.n	80051ec <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80051d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051d8:	f383 8811 	msr	BASEPRI, r3
 80051dc:	f3bf 8f6f 	isb	sy
 80051e0:	f3bf 8f4f 	dsb	sy
 80051e4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80051e6:	bf00      	nop
 80051e8:	bf00      	nop
 80051ea:	e7fd      	b.n	80051e8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80051ec:	683b      	ldr	r3, [r7, #0]
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d10b      	bne.n	800520a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80051f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80051f6:	f383 8811 	msr	BASEPRI, r3
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	f3bf 8f4f 	dsb	sy
 8005202:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop
 8005208:	e7fd      	b.n	8005206 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2b00      	cmp	r3, #0
 800520e:	d002      	beq.n	8005216 <xQueueGenericCreateStatic+0x56>
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d001      	beq.n	800521a <xQueueGenericCreateStatic+0x5a>
 8005216:	2301      	movs	r3, #1
 8005218:	e000      	b.n	800521c <xQueueGenericCreateStatic+0x5c>
 800521a:	2300      	movs	r3, #0
 800521c:	2b00      	cmp	r3, #0
 800521e:	d10b      	bne.n	8005238 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	623b      	str	r3, [r7, #32]
}
 8005232:	bf00      	nop
 8005234:	bf00      	nop
 8005236:	e7fd      	b.n	8005234 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005238:	687b      	ldr	r3, [r7, #4]
 800523a:	2b00      	cmp	r3, #0
 800523c:	d102      	bne.n	8005244 <xQueueGenericCreateStatic+0x84>
 800523e:	68bb      	ldr	r3, [r7, #8]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d101      	bne.n	8005248 <xQueueGenericCreateStatic+0x88>
 8005244:	2301      	movs	r3, #1
 8005246:	e000      	b.n	800524a <xQueueGenericCreateStatic+0x8a>
 8005248:	2300      	movs	r3, #0
 800524a:	2b00      	cmp	r3, #0
 800524c:	d10b      	bne.n	8005266 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800524e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	61fb      	str	r3, [r7, #28]
}
 8005260:	bf00      	nop
 8005262:	bf00      	nop
 8005264:	e7fd      	b.n	8005262 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005266:	2350      	movs	r3, #80	@ 0x50
 8005268:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	2b50      	cmp	r3, #80	@ 0x50
 800526e:	d00b      	beq.n	8005288 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005274:	f383 8811 	msr	BASEPRI, r3
 8005278:	f3bf 8f6f 	isb	sy
 800527c:	f3bf 8f4f 	dsb	sy
 8005280:	61bb      	str	r3, [r7, #24]
}
 8005282:	bf00      	nop
 8005284:	bf00      	nop
 8005286:	e7fd      	b.n	8005284 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005288:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800528a:	683b      	ldr	r3, [r7, #0]
 800528c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800528e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00d      	beq.n	80052b0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005296:	2201      	movs	r2, #1
 8005298:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800529c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80052a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052a2:	9300      	str	r3, [sp, #0]
 80052a4:	4613      	mov	r3, r2
 80052a6:	687a      	ldr	r2, [r7, #4]
 80052a8:	68b9      	ldr	r1, [r7, #8]
 80052aa:	68f8      	ldr	r0, [r7, #12]
 80052ac:	f000 f840 	bl	8005330 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80052b2:	4618      	mov	r0, r3
 80052b4:	3730      	adds	r7, #48	@ 0x30
 80052b6:	46bd      	mov	sp, r7
 80052b8:	bd80      	pop	{r7, pc}

080052ba <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052ba:	b580      	push	{r7, lr}
 80052bc:	b08a      	sub	sp, #40	@ 0x28
 80052be:	af02      	add	r7, sp, #8
 80052c0:	60f8      	str	r0, [r7, #12]
 80052c2:	60b9      	str	r1, [r7, #8]
 80052c4:	4613      	mov	r3, r2
 80052c6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d10b      	bne.n	80052e6 <xQueueGenericCreate+0x2c>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	613b      	str	r3, [r7, #16]
}
 80052e0:	bf00      	nop
 80052e2:	bf00      	nop
 80052e4:	e7fd      	b.n	80052e2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	fb02 f303 	mul.w	r3, r2, r3
 80052ee:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80052f0:	69fb      	ldr	r3, [r7, #28]
 80052f2:	3350      	adds	r3, #80	@ 0x50
 80052f4:	4618      	mov	r0, r3
 80052f6:	f002 f903 	bl	8007500 <pvPortMalloc>
 80052fa:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80052fc:	69bb      	ldr	r3, [r7, #24]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d011      	beq.n	8005326 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005302:	69bb      	ldr	r3, [r7, #24]
 8005304:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005306:	697b      	ldr	r3, [r7, #20]
 8005308:	3350      	adds	r3, #80	@ 0x50
 800530a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800530c:	69bb      	ldr	r3, [r7, #24]
 800530e:	2200      	movs	r2, #0
 8005310:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005314:	79fa      	ldrb	r2, [r7, #7]
 8005316:	69bb      	ldr	r3, [r7, #24]
 8005318:	9300      	str	r3, [sp, #0]
 800531a:	4613      	mov	r3, r2
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	68b9      	ldr	r1, [r7, #8]
 8005320:	68f8      	ldr	r0, [r7, #12]
 8005322:	f000 f805 	bl	8005330 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005326:	69bb      	ldr	r3, [r7, #24]
	}
 8005328:	4618      	mov	r0, r3
 800532a:	3720      	adds	r7, #32
 800532c:	46bd      	mov	sp, r7
 800532e:	bd80      	pop	{r7, pc}

08005330 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b084      	sub	sp, #16
 8005334:	af00      	add	r7, sp, #0
 8005336:	60f8      	str	r0, [r7, #12]
 8005338:	60b9      	str	r1, [r7, #8]
 800533a:	607a      	str	r2, [r7, #4]
 800533c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800533e:	68bb      	ldr	r3, [r7, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d103      	bne.n	800534c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005344:	69bb      	ldr	r3, [r7, #24]
 8005346:	69ba      	ldr	r2, [r7, #24]
 8005348:	601a      	str	r2, [r3, #0]
 800534a:	e002      	b.n	8005352 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800534c:	69bb      	ldr	r3, [r7, #24]
 800534e:	687a      	ldr	r2, [r7, #4]
 8005350:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	68fa      	ldr	r2, [r7, #12]
 8005356:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005358:	69bb      	ldr	r3, [r7, #24]
 800535a:	68ba      	ldr	r2, [r7, #8]
 800535c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800535e:	2101      	movs	r1, #1
 8005360:	69b8      	ldr	r0, [r7, #24]
 8005362:	f7ff fec3 	bl	80050ec <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005366:	69bb      	ldr	r3, [r7, #24]
 8005368:	78fa      	ldrb	r2, [r7, #3]
 800536a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800536e:	bf00      	nop
 8005370:	3710      	adds	r7, #16
 8005372:	46bd      	mov	sp, r7
 8005374:	bd80      	pop	{r7, pc}
	...

08005378 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005378:	b580      	push	{r7, lr}
 800537a:	b08e      	sub	sp, #56	@ 0x38
 800537c:	af00      	add	r7, sp, #0
 800537e:	60f8      	str	r0, [r7, #12]
 8005380:	60b9      	str	r1, [r7, #8]
 8005382:	607a      	str	r2, [r7, #4]
 8005384:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005386:	2300      	movs	r3, #0
 8005388:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800538e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10b      	bne.n	80053ac <xQueueGenericSend+0x34>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053a6:	bf00      	nop
 80053a8:	bf00      	nop
 80053aa:	e7fd      	b.n	80053a8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d103      	bne.n	80053ba <xQueueGenericSend+0x42>
 80053b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d101      	bne.n	80053be <xQueueGenericSend+0x46>
 80053ba:	2301      	movs	r3, #1
 80053bc:	e000      	b.n	80053c0 <xQueueGenericSend+0x48>
 80053be:	2300      	movs	r3, #0
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d10b      	bne.n	80053dc <xQueueGenericSend+0x64>
	__asm volatile
 80053c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053c8:	f383 8811 	msr	BASEPRI, r3
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f3bf 8f4f 	dsb	sy
 80053d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80053d6:	bf00      	nop
 80053d8:	bf00      	nop
 80053da:	e7fd      	b.n	80053d8 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80053dc:	683b      	ldr	r3, [r7, #0]
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d103      	bne.n	80053ea <xQueueGenericSend+0x72>
 80053e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80053e6:	2b01      	cmp	r3, #1
 80053e8:	d101      	bne.n	80053ee <xQueueGenericSend+0x76>
 80053ea:	2301      	movs	r3, #1
 80053ec:	e000      	b.n	80053f0 <xQueueGenericSend+0x78>
 80053ee:	2300      	movs	r3, #0
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d10b      	bne.n	800540c <xQueueGenericSend+0x94>
	__asm volatile
 80053f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f8:	f383 8811 	msr	BASEPRI, r3
 80053fc:	f3bf 8f6f 	isb	sy
 8005400:	f3bf 8f4f 	dsb	sy
 8005404:	623b      	str	r3, [r7, #32]
}
 8005406:	bf00      	nop
 8005408:	bf00      	nop
 800540a:	e7fd      	b.n	8005408 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800540c:	f001 fa4c 	bl	80068a8 <xTaskGetSchedulerState>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d102      	bne.n	800541c <xQueueGenericSend+0xa4>
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d101      	bne.n	8005420 <xQueueGenericSend+0xa8>
 800541c:	2301      	movs	r3, #1
 800541e:	e000      	b.n	8005422 <xQueueGenericSend+0xaa>
 8005420:	2300      	movs	r3, #0
 8005422:	2b00      	cmp	r3, #0
 8005424:	d10b      	bne.n	800543e <xQueueGenericSend+0xc6>
	__asm volatile
 8005426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542a:	f383 8811 	msr	BASEPRI, r3
 800542e:	f3bf 8f6f 	isb	sy
 8005432:	f3bf 8f4f 	dsb	sy
 8005436:	61fb      	str	r3, [r7, #28]
}
 8005438:	bf00      	nop
 800543a:	bf00      	nop
 800543c:	e7fd      	b.n	800543a <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800543e:	f001 ff5d 	bl	80072fc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005442:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005444:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005446:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005448:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800544a:	429a      	cmp	r2, r3
 800544c:	d302      	bcc.n	8005454 <xQueueGenericSend+0xdc>
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b02      	cmp	r3, #2
 8005452:	d129      	bne.n	80054a8 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005454:	683a      	ldr	r2, [r7, #0]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800545a:	f000 fa91 	bl	8005980 <prvCopyDataToQueue>
 800545e:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005460:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005462:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005464:	2b00      	cmp	r3, #0
 8005466:	d010      	beq.n	800548a <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005468:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800546a:	3324      	adds	r3, #36	@ 0x24
 800546c:	4618      	mov	r0, r3
 800546e:	f001 f85b 	bl	8006528 <xTaskRemoveFromEventList>
 8005472:	4603      	mov	r3, r0
 8005474:	2b00      	cmp	r3, #0
 8005476:	d013      	beq.n	80054a0 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005478:	4b3f      	ldr	r3, [pc, #252]	@ (8005578 <xQueueGenericSend+0x200>)
 800547a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800547e:	601a      	str	r2, [r3, #0]
 8005480:	f3bf 8f4f 	dsb	sy
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	e00a      	b.n	80054a0 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800548a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800548c:	2b00      	cmp	r3, #0
 800548e:	d007      	beq.n	80054a0 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005490:	4b39      	ldr	r3, [pc, #228]	@ (8005578 <xQueueGenericSend+0x200>)
 8005492:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005496:	601a      	str	r2, [r3, #0]
 8005498:	f3bf 8f4f 	dsb	sy
 800549c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80054a0:	f001 ff5c 	bl	800735c <vPortExitCritical>
				return pdPASS;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e063      	b.n	8005570 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d103      	bne.n	80054b6 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054ae:	f001 ff55 	bl	800735c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054b2:	2300      	movs	r3, #0
 80054b4:	e05c      	b.n	8005570 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b8:	2b00      	cmp	r3, #0
 80054ba:	d106      	bne.n	80054ca <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054bc:	f107 0314 	add.w	r3, r7, #20
 80054c0:	4618      	mov	r0, r3
 80054c2:	f001 f895 	bl	80065f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054c6:	2301      	movs	r3, #1
 80054c8:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054ca:	f001 ff47 	bl	800735c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054ce:	f000 fe07 	bl	80060e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054d2:	f001 ff13 	bl	80072fc <vPortEnterCritical>
 80054d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054dc:	b25b      	sxtb	r3, r3
 80054de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e2:	d103      	bne.n	80054ec <xQueueGenericSend+0x174>
 80054e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054e6:	2200      	movs	r2, #0
 80054e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054f2:	b25b      	sxtb	r3, r3
 80054f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054f8:	d103      	bne.n	8005502 <xQueueGenericSend+0x18a>
 80054fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fc:	2200      	movs	r2, #0
 80054fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005502:	f001 ff2b 	bl	800735c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005506:	1d3a      	adds	r2, r7, #4
 8005508:	f107 0314 	add.w	r3, r7, #20
 800550c:	4611      	mov	r1, r2
 800550e:	4618      	mov	r0, r3
 8005510:	f001 f884 	bl	800661c <xTaskCheckForTimeOut>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d124      	bne.n	8005564 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800551a:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800551c:	f000 fb28 	bl	8005b70 <prvIsQueueFull>
 8005520:	4603      	mov	r3, r0
 8005522:	2b00      	cmp	r3, #0
 8005524:	d018      	beq.n	8005558 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005526:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005528:	3310      	adds	r3, #16
 800552a:	687a      	ldr	r2, [r7, #4]
 800552c:	4611      	mov	r1, r2
 800552e:	4618      	mov	r0, r3
 8005530:	f000 ffa8 	bl	8006484 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005534:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005536:	f000 fab3 	bl	8005aa0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800553a:	f000 fddf 	bl	80060fc <xTaskResumeAll>
 800553e:	4603      	mov	r3, r0
 8005540:	2b00      	cmp	r3, #0
 8005542:	f47f af7c 	bne.w	800543e <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005546:	4b0c      	ldr	r3, [pc, #48]	@ (8005578 <xQueueGenericSend+0x200>)
 8005548:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800554c:	601a      	str	r2, [r3, #0]
 800554e:	f3bf 8f4f 	dsb	sy
 8005552:	f3bf 8f6f 	isb	sy
 8005556:	e772      	b.n	800543e <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005558:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800555a:	f000 faa1 	bl	8005aa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800555e:	f000 fdcd 	bl	80060fc <xTaskResumeAll>
 8005562:	e76c      	b.n	800543e <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005564:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005566:	f000 fa9b 	bl	8005aa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800556a:	f000 fdc7 	bl	80060fc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800556e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005570:	4618      	mov	r0, r3
 8005572:	3738      	adds	r7, #56	@ 0x38
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	e000ed04 	.word	0xe000ed04

0800557c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b090      	sub	sp, #64	@ 0x40
 8005580:	af00      	add	r7, sp, #0
 8005582:	60f8      	str	r0, [r7, #12]
 8005584:	60b9      	str	r1, [r7, #8]
 8005586:	607a      	str	r2, [r7, #4]
 8005588:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800558e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10b      	bne.n	80055ac <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80055a6:	bf00      	nop
 80055a8:	bf00      	nop
 80055aa:	e7fd      	b.n	80055a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d103      	bne.n	80055ba <xQueueGenericSendFromISR+0x3e>
 80055b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d101      	bne.n	80055be <xQueueGenericSendFromISR+0x42>
 80055ba:	2301      	movs	r3, #1
 80055bc:	e000      	b.n	80055c0 <xQueueGenericSendFromISR+0x44>
 80055be:	2300      	movs	r3, #0
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d10b      	bne.n	80055dc <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80055c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c8:	f383 8811 	msr	BASEPRI, r3
 80055cc:	f3bf 8f6f 	isb	sy
 80055d0:	f3bf 8f4f 	dsb	sy
 80055d4:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80055d6:	bf00      	nop
 80055d8:	bf00      	nop
 80055da:	e7fd      	b.n	80055d8 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80055dc:	683b      	ldr	r3, [r7, #0]
 80055de:	2b02      	cmp	r3, #2
 80055e0:	d103      	bne.n	80055ea <xQueueGenericSendFromISR+0x6e>
 80055e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055e6:	2b01      	cmp	r3, #1
 80055e8:	d101      	bne.n	80055ee <xQueueGenericSendFromISR+0x72>
 80055ea:	2301      	movs	r3, #1
 80055ec:	e000      	b.n	80055f0 <xQueueGenericSendFromISR+0x74>
 80055ee:	2300      	movs	r3, #0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d10b      	bne.n	800560c <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80055f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055f8:	f383 8811 	msr	BASEPRI, r3
 80055fc:	f3bf 8f6f 	isb	sy
 8005600:	f3bf 8f4f 	dsb	sy
 8005604:	623b      	str	r3, [r7, #32]
}
 8005606:	bf00      	nop
 8005608:	bf00      	nop
 800560a:	e7fd      	b.n	8005608 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800560c:	f001 ff38 	bl	8007480 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005610:	f3ef 8211 	mrs	r2, BASEPRI
 8005614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005618:	f383 8811 	msr	BASEPRI, r3
 800561c:	f3bf 8f6f 	isb	sy
 8005620:	f3bf 8f4f 	dsb	sy
 8005624:	61fa      	str	r2, [r7, #28]
 8005626:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005628:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800562a:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800562c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800562e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005630:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005632:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005634:	429a      	cmp	r2, r3
 8005636:	d302      	bcc.n	800563e <xQueueGenericSendFromISR+0xc2>
 8005638:	683b      	ldr	r3, [r7, #0]
 800563a:	2b02      	cmp	r3, #2
 800563c:	d12f      	bne.n	800569e <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800563e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005640:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005644:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800564a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800564c:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800564e:	683a      	ldr	r2, [r7, #0]
 8005650:	68b9      	ldr	r1, [r7, #8]
 8005652:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005654:	f000 f994 	bl	8005980 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005658:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800565c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005660:	d112      	bne.n	8005688 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005662:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005664:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005666:	2b00      	cmp	r3, #0
 8005668:	d016      	beq.n	8005698 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800566a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800566c:	3324      	adds	r3, #36	@ 0x24
 800566e:	4618      	mov	r0, r3
 8005670:	f000 ff5a 	bl	8006528 <xTaskRemoveFromEventList>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00e      	beq.n	8005698 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d00b      	beq.n	8005698 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	601a      	str	r2, [r3, #0]
 8005686:	e007      	b.n	8005698 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005688:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800568c:	3301      	adds	r3, #1
 800568e:	b2db      	uxtb	r3, r3
 8005690:	b25a      	sxtb	r2, r3
 8005692:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005694:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005698:	2301      	movs	r3, #1
 800569a:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800569c:	e001      	b.n	80056a2 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800569e:	2300      	movs	r3, #0
 80056a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056a4:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056a6:	697b      	ldr	r3, [r7, #20]
 80056a8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056ac:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80056b0:	4618      	mov	r0, r3
 80056b2:	3740      	adds	r7, #64	@ 0x40
 80056b4:	46bd      	mov	sp, r7
 80056b6:	bd80      	pop	{r7, pc}

080056b8 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b08c      	sub	sp, #48	@ 0x30
 80056bc:	af00      	add	r7, sp, #0
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	60b9      	str	r1, [r7, #8]
 80056c2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056c4:	2300      	movs	r3, #0
 80056c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80056cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d10b      	bne.n	80056ea <xQueueReceive+0x32>
	__asm volatile
 80056d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	623b      	str	r3, [r7, #32]
}
 80056e4:	bf00      	nop
 80056e6:	bf00      	nop
 80056e8:	e7fd      	b.n	80056e6 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d103      	bne.n	80056f8 <xQueueReceive+0x40>
 80056f0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f4:	2b00      	cmp	r3, #0
 80056f6:	d101      	bne.n	80056fc <xQueueReceive+0x44>
 80056f8:	2301      	movs	r3, #1
 80056fa:	e000      	b.n	80056fe <xQueueReceive+0x46>
 80056fc:	2300      	movs	r3, #0
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d10b      	bne.n	800571a <xQueueReceive+0x62>
	__asm volatile
 8005702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005706:	f383 8811 	msr	BASEPRI, r3
 800570a:	f3bf 8f6f 	isb	sy
 800570e:	f3bf 8f4f 	dsb	sy
 8005712:	61fb      	str	r3, [r7, #28]
}
 8005714:	bf00      	nop
 8005716:	bf00      	nop
 8005718:	e7fd      	b.n	8005716 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800571a:	f001 f8c5 	bl	80068a8 <xTaskGetSchedulerState>
 800571e:	4603      	mov	r3, r0
 8005720:	2b00      	cmp	r3, #0
 8005722:	d102      	bne.n	800572a <xQueueReceive+0x72>
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2b00      	cmp	r3, #0
 8005728:	d101      	bne.n	800572e <xQueueReceive+0x76>
 800572a:	2301      	movs	r3, #1
 800572c:	e000      	b.n	8005730 <xQueueReceive+0x78>
 800572e:	2300      	movs	r3, #0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d10b      	bne.n	800574c <xQueueReceive+0x94>
	__asm volatile
 8005734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005738:	f383 8811 	msr	BASEPRI, r3
 800573c:	f3bf 8f6f 	isb	sy
 8005740:	f3bf 8f4f 	dsb	sy
 8005744:	61bb      	str	r3, [r7, #24]
}
 8005746:	bf00      	nop
 8005748:	bf00      	nop
 800574a:	e7fd      	b.n	8005748 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800574c:	f001 fdd6 	bl	80072fc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005750:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005752:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005754:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005756:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005758:	2b00      	cmp	r3, #0
 800575a:	d01f      	beq.n	800579c <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800575c:	68b9      	ldr	r1, [r7, #8]
 800575e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005760:	f000 f978 	bl	8005a54 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005766:	1e5a      	subs	r2, r3, #1
 8005768:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576a:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800576c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800576e:	691b      	ldr	r3, [r3, #16]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d00f      	beq.n	8005794 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005776:	3310      	adds	r3, #16
 8005778:	4618      	mov	r0, r3
 800577a:	f000 fed5 	bl	8006528 <xTaskRemoveFromEventList>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d007      	beq.n	8005794 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005784:	4b3c      	ldr	r3, [pc, #240]	@ (8005878 <xQueueReceive+0x1c0>)
 8005786:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005794:	f001 fde2 	bl	800735c <vPortExitCritical>
				return pdPASS;
 8005798:	2301      	movs	r3, #1
 800579a:	e069      	b.n	8005870 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d103      	bne.n	80057aa <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057a2:	f001 fddb 	bl	800735c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057a6:	2300      	movs	r3, #0
 80057a8:	e062      	b.n	8005870 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d106      	bne.n	80057be <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057b0:	f107 0310 	add.w	r3, r7, #16
 80057b4:	4618      	mov	r0, r3
 80057b6:	f000 ff1b 	bl	80065f0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057ba:	2301      	movs	r3, #1
 80057bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057be:	f001 fdcd 	bl	800735c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057c2:	f000 fc8d 	bl	80060e0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057c6:	f001 fd99 	bl	80072fc <vPortEnterCritical>
 80057ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057cc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057d0:	b25b      	sxtb	r3, r3
 80057d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057d6:	d103      	bne.n	80057e0 <xQueueReceive+0x128>
 80057d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057da:	2200      	movs	r2, #0
 80057dc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80057e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057e6:	b25b      	sxtb	r3, r3
 80057e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057ec:	d103      	bne.n	80057f6 <xQueueReceive+0x13e>
 80057ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80057f6:	f001 fdb1 	bl	800735c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80057fa:	1d3a      	adds	r2, r7, #4
 80057fc:	f107 0310 	add.w	r3, r7, #16
 8005800:	4611      	mov	r1, r2
 8005802:	4618      	mov	r0, r3
 8005804:	f000 ff0a 	bl	800661c <xTaskCheckForTimeOut>
 8005808:	4603      	mov	r3, r0
 800580a:	2b00      	cmp	r3, #0
 800580c:	d123      	bne.n	8005856 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800580e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005810:	f000 f998 	bl	8005b44 <prvIsQueueEmpty>
 8005814:	4603      	mov	r3, r0
 8005816:	2b00      	cmp	r3, #0
 8005818:	d017      	beq.n	800584a <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800581a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800581c:	3324      	adds	r3, #36	@ 0x24
 800581e:	687a      	ldr	r2, [r7, #4]
 8005820:	4611      	mov	r1, r2
 8005822:	4618      	mov	r0, r3
 8005824:	f000 fe2e 	bl	8006484 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005828:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800582a:	f000 f939 	bl	8005aa0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800582e:	f000 fc65 	bl	80060fc <xTaskResumeAll>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d189      	bne.n	800574c <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005838:	4b0f      	ldr	r3, [pc, #60]	@ (8005878 <xQueueReceive+0x1c0>)
 800583a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800583e:	601a      	str	r2, [r3, #0]
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	f3bf 8f6f 	isb	sy
 8005848:	e780      	b.n	800574c <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800584a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800584c:	f000 f928 	bl	8005aa0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005850:	f000 fc54 	bl	80060fc <xTaskResumeAll>
 8005854:	e77a      	b.n	800574c <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005856:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005858:	f000 f922 	bl	8005aa0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800585c:	f000 fc4e 	bl	80060fc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005860:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005862:	f000 f96f 	bl	8005b44 <prvIsQueueEmpty>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	f43f af6f 	beq.w	800574c <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800586e:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005870:	4618      	mov	r0, r3
 8005872:	3730      	adds	r7, #48	@ 0x30
 8005874:	46bd      	mov	sp, r7
 8005876:	bd80      	pop	{r7, pc}
 8005878:	e000ed04 	.word	0xe000ed04

0800587c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800587c:	b580      	push	{r7, lr}
 800587e:	b08e      	sub	sp, #56	@ 0x38
 8005880:	af00      	add	r7, sp, #0
 8005882:	60f8      	str	r0, [r7, #12]
 8005884:	60b9      	str	r1, [r7, #8]
 8005886:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800588c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800588e:	2b00      	cmp	r3, #0
 8005890:	d10b      	bne.n	80058aa <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005896:	f383 8811 	msr	BASEPRI, r3
 800589a:	f3bf 8f6f 	isb	sy
 800589e:	f3bf 8f4f 	dsb	sy
 80058a2:	623b      	str	r3, [r7, #32]
}
 80058a4:	bf00      	nop
 80058a6:	bf00      	nop
 80058a8:	e7fd      	b.n	80058a6 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058aa:	68bb      	ldr	r3, [r7, #8]
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d103      	bne.n	80058b8 <xQueueReceiveFromISR+0x3c>
 80058b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d101      	bne.n	80058bc <xQueueReceiveFromISR+0x40>
 80058b8:	2301      	movs	r3, #1
 80058ba:	e000      	b.n	80058be <xQueueReceiveFromISR+0x42>
 80058bc:	2300      	movs	r3, #0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d10b      	bne.n	80058da <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80058c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c6:	f383 8811 	msr	BASEPRI, r3
 80058ca:	f3bf 8f6f 	isb	sy
 80058ce:	f3bf 8f4f 	dsb	sy
 80058d2:	61fb      	str	r3, [r7, #28]
}
 80058d4:	bf00      	nop
 80058d6:	bf00      	nop
 80058d8:	e7fd      	b.n	80058d6 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80058da:	f001 fdd1 	bl	8007480 <vPortValidateInterruptPriority>
	__asm volatile
 80058de:	f3ef 8211 	mrs	r2, BASEPRI
 80058e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	61ba      	str	r2, [r7, #24]
 80058f4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80058f6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80058f8:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80058fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80058fe:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005900:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005902:	2b00      	cmp	r3, #0
 8005904:	d02f      	beq.n	8005966 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005906:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005908:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800590c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005910:	68b9      	ldr	r1, [r7, #8]
 8005912:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005914:	f000 f89e 	bl	8005a54 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800591a:	1e5a      	subs	r2, r3, #1
 800591c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800591e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005920:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005928:	d112      	bne.n	8005950 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800592a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800592c:	691b      	ldr	r3, [r3, #16]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d016      	beq.n	8005960 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005934:	3310      	adds	r3, #16
 8005936:	4618      	mov	r0, r3
 8005938:	f000 fdf6 	bl	8006528 <xTaskRemoveFromEventList>
 800593c:	4603      	mov	r3, r0
 800593e:	2b00      	cmp	r3, #0
 8005940:	d00e      	beq.n	8005960 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2b00      	cmp	r3, #0
 8005946:	d00b      	beq.n	8005960 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2201      	movs	r2, #1
 800594c:	601a      	str	r2, [r3, #0]
 800594e:	e007      	b.n	8005960 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005950:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005954:	3301      	adds	r3, #1
 8005956:	b2db      	uxtb	r3, r3
 8005958:	b25a      	sxtb	r2, r3
 800595a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800595c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005960:	2301      	movs	r3, #1
 8005962:	637b      	str	r3, [r7, #52]	@ 0x34
 8005964:	e001      	b.n	800596a <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005966:	2300      	movs	r3, #0
 8005968:	637b      	str	r3, [r7, #52]	@ 0x34
 800596a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800596c:	613b      	str	r3, [r7, #16]
	__asm volatile
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f383 8811 	msr	BASEPRI, r3
}
 8005974:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005976:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005978:	4618      	mov	r0, r3
 800597a:	3738      	adds	r7, #56	@ 0x38
 800597c:	46bd      	mov	sp, r7
 800597e:	bd80      	pop	{r7, pc}

08005980 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005980:	b580      	push	{r7, lr}
 8005982:	b086      	sub	sp, #24
 8005984:	af00      	add	r7, sp, #0
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800598c:	2300      	movs	r3, #0
 800598e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005990:	68fb      	ldr	r3, [r7, #12]
 8005992:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005994:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10d      	bne.n	80059ba <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d14d      	bne.n	8005a42 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	689b      	ldr	r3, [r3, #8]
 80059aa:	4618      	mov	r0, r3
 80059ac:	f000 ff9a 	bl	80068e4 <xTaskPriorityDisinherit>
 80059b0:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	2200      	movs	r2, #0
 80059b6:	609a      	str	r2, [r3, #8]
 80059b8:	e043      	b.n	8005a42 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d119      	bne.n	80059f4 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	6858      	ldr	r0, [r3, #4]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059c8:	461a      	mov	r2, r3
 80059ca:	68b9      	ldr	r1, [r7, #8]
 80059cc:	f002 f808 	bl	80079e0 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	685a      	ldr	r2, [r3, #4]
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d8:	441a      	add	r2, r3
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	685a      	ldr	r2, [r3, #4]
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	429a      	cmp	r2, r3
 80059e8:	d32b      	bcc.n	8005a42 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	605a      	str	r2, [r3, #4]
 80059f2:	e026      	b.n	8005a42 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	68d8      	ldr	r0, [r3, #12]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fc:	461a      	mov	r2, r3
 80059fe:	68b9      	ldr	r1, [r7, #8]
 8005a00:	f001 ffee 	bl	80079e0 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	68da      	ldr	r2, [r3, #12]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0c:	425b      	negs	r3, r3
 8005a0e:	441a      	add	r2, r3
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a14:	68fb      	ldr	r3, [r7, #12]
 8005a16:	68da      	ldr	r2, [r3, #12]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d207      	bcs.n	8005a30 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	689a      	ldr	r2, [r3, #8]
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a28:	425b      	negs	r3, r3
 8005a2a:	441a      	add	r2, r3
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	2b02      	cmp	r3, #2
 8005a34:	d105      	bne.n	8005a42 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a36:	693b      	ldr	r3, [r7, #16]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a3c:	693b      	ldr	r3, [r7, #16]
 8005a3e:	3b01      	subs	r3, #1
 8005a40:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a42:	693b      	ldr	r3, [r7, #16]
 8005a44:	1c5a      	adds	r2, r3, #1
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005a4a:	697b      	ldr	r3, [r7, #20]
}
 8005a4c:	4618      	mov	r0, r3
 8005a4e:	3718      	adds	r7, #24
 8005a50:	46bd      	mov	sp, r7
 8005a52:	bd80      	pop	{r7, pc}

08005a54 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a54:	b580      	push	{r7, lr}
 8005a56:	b082      	sub	sp, #8
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a62:	2b00      	cmp	r3, #0
 8005a64:	d018      	beq.n	8005a98 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	68da      	ldr	r2, [r3, #12]
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a6e:	441a      	add	r2, r3
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	68da      	ldr	r2, [r3, #12]
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	429a      	cmp	r2, r3
 8005a7e:	d303      	bcc.n	8005a88 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681a      	ldr	r2, [r3, #0]
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	68d9      	ldr	r1, [r3, #12]
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a90:	461a      	mov	r2, r3
 8005a92:	6838      	ldr	r0, [r7, #0]
 8005a94:	f001 ffa4 	bl	80079e0 <memcpy>
	}
}
 8005a98:	bf00      	nop
 8005a9a:	3708      	adds	r7, #8
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b084      	sub	sp, #16
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005aa8:	f001 fc28 	bl	80072fc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ab2:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ab4:	e011      	b.n	8005ada <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d012      	beq.n	8005ae4 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	3324      	adds	r3, #36	@ 0x24
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	f000 fd30 	bl	8006528 <xTaskRemoveFromEventList>
 8005ac8:	4603      	mov	r3, r0
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d001      	beq.n	8005ad2 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005ace:	f000 fe09 	bl	80066e4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005ad2:	7bfb      	ldrb	r3, [r7, #15]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	b2db      	uxtb	r3, r3
 8005ad8:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ada:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	dce9      	bgt.n	8005ab6 <prvUnlockQueue+0x16>
 8005ae2:	e000      	b.n	8005ae6 <prvUnlockQueue+0x46>
					break;
 8005ae4:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	22ff      	movs	r2, #255	@ 0xff
 8005aea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005aee:	f001 fc35 	bl	800735c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005af2:	f001 fc03 	bl	80072fc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005afc:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005afe:	e011      	b.n	8005b24 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	691b      	ldr	r3, [r3, #16]
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d012      	beq.n	8005b2e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	3310      	adds	r3, #16
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fd0b 	bl	8006528 <xTaskRemoveFromEventList>
 8005b12:	4603      	mov	r3, r0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d001      	beq.n	8005b1c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b18:	f000 fde4 	bl	80066e4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b1c:	7bbb      	ldrb	r3, [r7, #14]
 8005b1e:	3b01      	subs	r3, #1
 8005b20:	b2db      	uxtb	r3, r3
 8005b22:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b24:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	dce9      	bgt.n	8005b00 <prvUnlockQueue+0x60>
 8005b2c:	e000      	b.n	8005b30 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b2e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	22ff      	movs	r2, #255	@ 0xff
 8005b34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005b38:	f001 fc10 	bl	800735c <vPortExitCritical>
}
 8005b3c:	bf00      	nop
 8005b3e:	3710      	adds	r7, #16
 8005b40:	46bd      	mov	sp, r7
 8005b42:	bd80      	pop	{r7, pc}

08005b44 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b44:	b580      	push	{r7, lr}
 8005b46:	b084      	sub	sp, #16
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b4c:	f001 fbd6 	bl	80072fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d102      	bne.n	8005b5e <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b58:	2301      	movs	r3, #1
 8005b5a:	60fb      	str	r3, [r7, #12]
 8005b5c:	e001      	b.n	8005b62 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b62:	f001 fbfb 	bl	800735c <vPortExitCritical>

	return xReturn;
 8005b66:	68fb      	ldr	r3, [r7, #12]
}
 8005b68:	4618      	mov	r0, r3
 8005b6a:	3710      	adds	r7, #16
 8005b6c:	46bd      	mov	sp, r7
 8005b6e:	bd80      	pop	{r7, pc}

08005b70 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b70:	b580      	push	{r7, lr}
 8005b72:	b084      	sub	sp, #16
 8005b74:	af00      	add	r7, sp, #0
 8005b76:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b78:	f001 fbc0 	bl	80072fc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b84:	429a      	cmp	r2, r3
 8005b86:	d102      	bne.n	8005b8e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	60fb      	str	r3, [r7, #12]
 8005b8c:	e001      	b.n	8005b92 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b8e:	2300      	movs	r3, #0
 8005b90:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b92:	f001 fbe3 	bl	800735c <vPortExitCritical>

	return xReturn;
 8005b96:	68fb      	ldr	r3, [r7, #12]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3710      	adds	r7, #16
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005ba0:	b480      	push	{r7}
 8005ba2:	b085      	sub	sp, #20
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005baa:	2300      	movs	r3, #0
 8005bac:	60fb      	str	r3, [r7, #12]
 8005bae:	e014      	b.n	8005bda <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005bb0:	4a0e      	ldr	r2, [pc, #56]	@ (8005bec <vQueueAddToRegistry+0x4c>)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10b      	bne.n	8005bd4 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005bbc:	490b      	ldr	r1, [pc, #44]	@ (8005bec <vQueueAddToRegistry+0x4c>)
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	683a      	ldr	r2, [r7, #0]
 8005bc2:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005bc6:	4a09      	ldr	r2, [pc, #36]	@ (8005bec <vQueueAddToRegistry+0x4c>)
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	00db      	lsls	r3, r3, #3
 8005bcc:	4413      	add	r3, r2
 8005bce:	687a      	ldr	r2, [r7, #4]
 8005bd0:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005bd2:	e006      	b.n	8005be2 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	60fb      	str	r3, [r7, #12]
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	2b07      	cmp	r3, #7
 8005bde:	d9e7      	bls.n	8005bb0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005be0:	bf00      	nop
 8005be2:	bf00      	nop
 8005be4:	3714      	adds	r7, #20
 8005be6:	46bd      	mov	sp, r7
 8005be8:	bc80      	pop	{r7}
 8005bea:	4770      	bx	lr
 8005bec:	200008b0 	.word	0x200008b0

08005bf0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b086      	sub	sp, #24
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	60f8      	str	r0, [r7, #12]
 8005bf8:	60b9      	str	r1, [r7, #8]
 8005bfa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c00:	f001 fb7c 	bl	80072fc <vPortEnterCritical>
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c0a:	b25b      	sxtb	r3, r3
 8005c0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c10:	d103      	bne.n	8005c1a <vQueueWaitForMessageRestricted+0x2a>
 8005c12:	697b      	ldr	r3, [r7, #20]
 8005c14:	2200      	movs	r2, #0
 8005c16:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c1a:	697b      	ldr	r3, [r7, #20]
 8005c1c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c20:	b25b      	sxtb	r3, r3
 8005c22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c26:	d103      	bne.n	8005c30 <vQueueWaitForMessageRestricted+0x40>
 8005c28:	697b      	ldr	r3, [r7, #20]
 8005c2a:	2200      	movs	r2, #0
 8005c2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c30:	f001 fb94 	bl	800735c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c34:	697b      	ldr	r3, [r7, #20]
 8005c36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d106      	bne.n	8005c4a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	3324      	adds	r3, #36	@ 0x24
 8005c40:	687a      	ldr	r2, [r7, #4]
 8005c42:	68b9      	ldr	r1, [r7, #8]
 8005c44:	4618      	mov	r0, r3
 8005c46:	f000 fc43 	bl	80064d0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c4a:	6978      	ldr	r0, [r7, #20]
 8005c4c:	f7ff ff28 	bl	8005aa0 <prvUnlockQueue>
	}
 8005c50:	bf00      	nop
 8005c52:	3718      	adds	r7, #24
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b08e      	sub	sp, #56	@ 0x38
 8005c5c:	af04      	add	r7, sp, #16
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c66:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d10b      	bne.n	8005c84 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005c6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c70:	f383 8811 	msr	BASEPRI, r3
 8005c74:	f3bf 8f6f 	isb	sy
 8005c78:	f3bf 8f4f 	dsb	sy
 8005c7c:	623b      	str	r3, [r7, #32]
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	e7fd      	b.n	8005c80 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d10b      	bne.n	8005ca2 <xTaskCreateStatic+0x4a>
	__asm volatile
 8005c8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c8e:	f383 8811 	msr	BASEPRI, r3
 8005c92:	f3bf 8f6f 	isb	sy
 8005c96:	f3bf 8f4f 	dsb	sy
 8005c9a:	61fb      	str	r3, [r7, #28]
}
 8005c9c:	bf00      	nop
 8005c9e:	bf00      	nop
 8005ca0:	e7fd      	b.n	8005c9e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005ca2:	235c      	movs	r3, #92	@ 0x5c
 8005ca4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005ca6:	693b      	ldr	r3, [r7, #16]
 8005ca8:	2b5c      	cmp	r3, #92	@ 0x5c
 8005caa:	d00b      	beq.n	8005cc4 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005cac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb0:	f383 8811 	msr	BASEPRI, r3
 8005cb4:	f3bf 8f6f 	isb	sy
 8005cb8:	f3bf 8f4f 	dsb	sy
 8005cbc:	61bb      	str	r3, [r7, #24]
}
 8005cbe:	bf00      	nop
 8005cc0:	bf00      	nop
 8005cc2:	e7fd      	b.n	8005cc0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005cc4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005cc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d01e      	beq.n	8005d0a <xTaskCreateStatic+0xb2>
 8005ccc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d01b      	beq.n	8005d0a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005cd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cd4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cd8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005cda:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005cdc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	9303      	str	r3, [sp, #12]
 8005ce8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cea:	9302      	str	r3, [sp, #8]
 8005cec:	f107 0314 	add.w	r3, r7, #20
 8005cf0:	9301      	str	r3, [sp, #4]
 8005cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cf4:	9300      	str	r3, [sp, #0]
 8005cf6:	683b      	ldr	r3, [r7, #0]
 8005cf8:	687a      	ldr	r2, [r7, #4]
 8005cfa:	68b9      	ldr	r1, [r7, #8]
 8005cfc:	68f8      	ldr	r0, [r7, #12]
 8005cfe:	f000 f850 	bl	8005da2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d04:	f000 f8de 	bl	8005ec4 <prvAddNewTaskToReadyList>
 8005d08:	e001      	b.n	8005d0e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d0e:	697b      	ldr	r3, [r7, #20]
	}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3728      	adds	r7, #40	@ 0x28
 8005d14:	46bd      	mov	sp, r7
 8005d16:	bd80      	pop	{r7, pc}

08005d18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d18:	b580      	push	{r7, lr}
 8005d1a:	b08c      	sub	sp, #48	@ 0x30
 8005d1c:	af04      	add	r7, sp, #16
 8005d1e:	60f8      	str	r0, [r7, #12]
 8005d20:	60b9      	str	r1, [r7, #8]
 8005d22:	603b      	str	r3, [r7, #0]
 8005d24:	4613      	mov	r3, r2
 8005d26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d28:	88fb      	ldrh	r3, [r7, #6]
 8005d2a:	009b      	lsls	r3, r3, #2
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f001 fbe7 	bl	8007500 <pvPortMalloc>
 8005d32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d34:	697b      	ldr	r3, [r7, #20]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d00e      	beq.n	8005d58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d3a:	205c      	movs	r0, #92	@ 0x5c
 8005d3c:	f001 fbe0 	bl	8007500 <pvPortMalloc>
 8005d40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d42:	69fb      	ldr	r3, [r7, #28]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d003      	beq.n	8005d50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d48:	69fb      	ldr	r3, [r7, #28]
 8005d4a:	697a      	ldr	r2, [r7, #20]
 8005d4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d4e:	e005      	b.n	8005d5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d50:	6978      	ldr	r0, [r7, #20]
 8005d52:	f001 fca3 	bl	800769c <vPortFree>
 8005d56:	e001      	b.n	8005d5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d58:	2300      	movs	r3, #0
 8005d5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d5c:	69fb      	ldr	r3, [r7, #28]
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d017      	beq.n	8005d92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d62:	69fb      	ldr	r3, [r7, #28]
 8005d64:	2200      	movs	r2, #0
 8005d66:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d6a:	88fa      	ldrh	r2, [r7, #6]
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	9303      	str	r3, [sp, #12]
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	9302      	str	r3, [sp, #8]
 8005d74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d76:	9301      	str	r3, [sp, #4]
 8005d78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7a:	9300      	str	r3, [sp, #0]
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	68b9      	ldr	r1, [r7, #8]
 8005d80:	68f8      	ldr	r0, [r7, #12]
 8005d82:	f000 f80e 	bl	8005da2 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d86:	69f8      	ldr	r0, [r7, #28]
 8005d88:	f000 f89c 	bl	8005ec4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d8c:	2301      	movs	r3, #1
 8005d8e:	61bb      	str	r3, [r7, #24]
 8005d90:	e002      	b.n	8005d98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d92:	f04f 33ff 	mov.w	r3, #4294967295
 8005d96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d98:	69bb      	ldr	r3, [r7, #24]
	}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3720      	adds	r7, #32
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}

08005da2 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005da2:	b580      	push	{r7, lr}
 8005da4:	b088      	sub	sp, #32
 8005da6:	af00      	add	r7, sp, #0
 8005da8:	60f8      	str	r0, [r7, #12]
 8005daa:	60b9      	str	r1, [r7, #8]
 8005dac:	607a      	str	r2, [r7, #4]
 8005dae:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005db0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005db2:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	009b      	lsls	r3, r3, #2
 8005db8:	461a      	mov	r2, r3
 8005dba:	21a5      	movs	r1, #165	@ 0xa5
 8005dbc:	f001 fddc 	bl	8007978 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005dc0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005dca:	3b01      	subs	r3, #1
 8005dcc:	009b      	lsls	r3, r3, #2
 8005dce:	4413      	add	r3, r2
 8005dd0:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	f023 0307 	bic.w	r3, r3, #7
 8005dd8:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005dda:	69bb      	ldr	r3, [r7, #24]
 8005ddc:	f003 0307 	and.w	r3, r3, #7
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d00b      	beq.n	8005dfc <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005de4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de8:	f383 8811 	msr	BASEPRI, r3
 8005dec:	f3bf 8f6f 	isb	sy
 8005df0:	f3bf 8f4f 	dsb	sy
 8005df4:	617b      	str	r3, [r7, #20]
}
 8005df6:	bf00      	nop
 8005df8:	bf00      	nop
 8005dfa:	e7fd      	b.n	8005df8 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d01f      	beq.n	8005e42 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e02:	2300      	movs	r3, #0
 8005e04:	61fb      	str	r3, [r7, #28]
 8005e06:	e012      	b.n	8005e2e <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e08:	68ba      	ldr	r2, [r7, #8]
 8005e0a:	69fb      	ldr	r3, [r7, #28]
 8005e0c:	4413      	add	r3, r2
 8005e0e:	7819      	ldrb	r1, [r3, #0]
 8005e10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e12:	69fb      	ldr	r3, [r7, #28]
 8005e14:	4413      	add	r3, r2
 8005e16:	3334      	adds	r3, #52	@ 0x34
 8005e18:	460a      	mov	r2, r1
 8005e1a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e1c:	68ba      	ldr	r2, [r7, #8]
 8005e1e:	69fb      	ldr	r3, [r7, #28]
 8005e20:	4413      	add	r3, r2
 8005e22:	781b      	ldrb	r3, [r3, #0]
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d006      	beq.n	8005e36 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e28:	69fb      	ldr	r3, [r7, #28]
 8005e2a:	3301      	adds	r3, #1
 8005e2c:	61fb      	str	r3, [r7, #28]
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	2b0f      	cmp	r3, #15
 8005e32:	d9e9      	bls.n	8005e08 <prvInitialiseNewTask+0x66>
 8005e34:	e000      	b.n	8005e38 <prvInitialiseNewTask+0x96>
			{
				break;
 8005e36:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e40:	e003      	b.n	8005e4a <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e44:	2200      	movs	r2, #0
 8005e46:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e4c:	2b37      	cmp	r3, #55	@ 0x37
 8005e4e:	d901      	bls.n	8005e54 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e50:	2337      	movs	r3, #55	@ 0x37
 8005e52:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e56:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e58:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e5c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e5e:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e62:	2200      	movs	r2, #0
 8005e64:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e68:	3304      	adds	r3, #4
 8005e6a:	4618      	mov	r0, r3
 8005e6c:	f7ff f8ad 	bl	8004fca <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e72:	3318      	adds	r3, #24
 8005e74:	4618      	mov	r0, r3
 8005e76:	f7ff f8a8 	bl	8004fca <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e7e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e82:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005e86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e88:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e8c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e8e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e92:	2200      	movs	r2, #0
 8005e94:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e98:	2200      	movs	r2, #0
 8005e9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e9e:	683a      	ldr	r2, [r7, #0]
 8005ea0:	68f9      	ldr	r1, [r7, #12]
 8005ea2:	69b8      	ldr	r0, [r7, #24]
 8005ea4:	f001 f93a 	bl	800711c <pxPortInitialiseStack>
 8005ea8:	4602      	mov	r2, r0
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eac:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005eae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d002      	beq.n	8005eba <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eb8:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005eba:	bf00      	nop
 8005ebc:	3720      	adds	r7, #32
 8005ebe:	46bd      	mov	sp, r7
 8005ec0:	bd80      	pop	{r7, pc}
	...

08005ec4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b082      	sub	sp, #8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ecc:	f001 fa16 	bl	80072fc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ed0:	4b2d      	ldr	r3, [pc, #180]	@ (8005f88 <prvAddNewTaskToReadyList+0xc4>)
 8005ed2:	681b      	ldr	r3, [r3, #0]
 8005ed4:	3301      	adds	r3, #1
 8005ed6:	4a2c      	ldr	r2, [pc, #176]	@ (8005f88 <prvAddNewTaskToReadyList+0xc4>)
 8005ed8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005eda:	4b2c      	ldr	r3, [pc, #176]	@ (8005f8c <prvAddNewTaskToReadyList+0xc8>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d109      	bne.n	8005ef6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005ee2:	4a2a      	ldr	r2, [pc, #168]	@ (8005f8c <prvAddNewTaskToReadyList+0xc8>)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ee8:	4b27      	ldr	r3, [pc, #156]	@ (8005f88 <prvAddNewTaskToReadyList+0xc4>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	2b01      	cmp	r3, #1
 8005eee:	d110      	bne.n	8005f12 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ef0:	f000 fc1c 	bl	800672c <prvInitialiseTaskLists>
 8005ef4:	e00d      	b.n	8005f12 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005ef6:	4b26      	ldr	r3, [pc, #152]	@ (8005f90 <prvAddNewTaskToReadyList+0xcc>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d109      	bne.n	8005f12 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005efe:	4b23      	ldr	r3, [pc, #140]	@ (8005f8c <prvAddNewTaskToReadyList+0xc8>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f08:	429a      	cmp	r2, r3
 8005f0a:	d802      	bhi.n	8005f12 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f0c:	4a1f      	ldr	r2, [pc, #124]	@ (8005f8c <prvAddNewTaskToReadyList+0xc8>)
 8005f0e:	687b      	ldr	r3, [r7, #4]
 8005f10:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f12:	4b20      	ldr	r3, [pc, #128]	@ (8005f94 <prvAddNewTaskToReadyList+0xd0>)
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	3301      	adds	r3, #1
 8005f18:	4a1e      	ldr	r2, [pc, #120]	@ (8005f94 <prvAddNewTaskToReadyList+0xd0>)
 8005f1a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8005f94 <prvAddNewTaskToReadyList+0xd0>)
 8005f1e:	681a      	ldr	r2, [r3, #0]
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f28:	4b1b      	ldr	r3, [pc, #108]	@ (8005f98 <prvAddNewTaskToReadyList+0xd4>)
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	429a      	cmp	r2, r3
 8005f2e:	d903      	bls.n	8005f38 <prvAddNewTaskToReadyList+0x74>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f34:	4a18      	ldr	r2, [pc, #96]	@ (8005f98 <prvAddNewTaskToReadyList+0xd4>)
 8005f36:	6013      	str	r3, [r2, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4a15      	ldr	r2, [pc, #84]	@ (8005f9c <prvAddNewTaskToReadyList+0xd8>)
 8005f46:	441a      	add	r2, r3
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	3304      	adds	r3, #4
 8005f4c:	4619      	mov	r1, r3
 8005f4e:	4610      	mov	r0, r2
 8005f50:	f7ff f847 	bl	8004fe2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f54:	f001 fa02 	bl	800735c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f58:	4b0d      	ldr	r3, [pc, #52]	@ (8005f90 <prvAddNewTaskToReadyList+0xcc>)
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00e      	beq.n	8005f7e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f60:	4b0a      	ldr	r3, [pc, #40]	@ (8005f8c <prvAddNewTaskToReadyList+0xc8>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f6a:	429a      	cmp	r2, r3
 8005f6c:	d207      	bcs.n	8005f7e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f6e:	4b0c      	ldr	r3, [pc, #48]	@ (8005fa0 <prvAddNewTaskToReadyList+0xdc>)
 8005f70:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f74:	601a      	str	r2, [r3, #0]
 8005f76:	f3bf 8f4f 	dsb	sy
 8005f7a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f7e:	bf00      	nop
 8005f80:	3708      	adds	r7, #8
 8005f82:	46bd      	mov	sp, r7
 8005f84:	bd80      	pop	{r7, pc}
 8005f86:	bf00      	nop
 8005f88:	20000dc4 	.word	0x20000dc4
 8005f8c:	200008f0 	.word	0x200008f0
 8005f90:	20000dd0 	.word	0x20000dd0
 8005f94:	20000de0 	.word	0x20000de0
 8005f98:	20000dcc 	.word	0x20000dcc
 8005f9c:	200008f4 	.word	0x200008f4
 8005fa0:	e000ed04 	.word	0xe000ed04

08005fa4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b084      	sub	sp, #16
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005fac:	2300      	movs	r3, #0
 8005fae:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d018      	beq.n	8005fe8 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005fb6:	4b14      	ldr	r3, [pc, #80]	@ (8006008 <vTaskDelay+0x64>)
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d00b      	beq.n	8005fd6 <vTaskDelay+0x32>
	__asm volatile
 8005fbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fc2:	f383 8811 	msr	BASEPRI, r3
 8005fc6:	f3bf 8f6f 	isb	sy
 8005fca:	f3bf 8f4f 	dsb	sy
 8005fce:	60bb      	str	r3, [r7, #8]
}
 8005fd0:	bf00      	nop
 8005fd2:	bf00      	nop
 8005fd4:	e7fd      	b.n	8005fd2 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005fd6:	f000 f883 	bl	80060e0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005fda:	2100      	movs	r1, #0
 8005fdc:	6878      	ldr	r0, [r7, #4]
 8005fde:	f000 fcf1 	bl	80069c4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005fe2:	f000 f88b 	bl	80060fc <xTaskResumeAll>
 8005fe6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d107      	bne.n	8005ffe <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005fee:	4b07      	ldr	r3, [pc, #28]	@ (800600c <vTaskDelay+0x68>)
 8005ff0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ff4:	601a      	str	r2, [r3, #0]
 8005ff6:	f3bf 8f4f 	dsb	sy
 8005ffa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ffe:	bf00      	nop
 8006000:	3710      	adds	r7, #16
 8006002:	46bd      	mov	sp, r7
 8006004:	bd80      	pop	{r7, pc}
 8006006:	bf00      	nop
 8006008:	20000dec 	.word	0x20000dec
 800600c:	e000ed04 	.word	0xe000ed04

08006010 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006010:	b580      	push	{r7, lr}
 8006012:	b08a      	sub	sp, #40	@ 0x28
 8006014:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006016:	2300      	movs	r3, #0
 8006018:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800601a:	2300      	movs	r3, #0
 800601c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800601e:	463a      	mov	r2, r7
 8006020:	1d39      	adds	r1, r7, #4
 8006022:	f107 0308 	add.w	r3, r7, #8
 8006026:	4618      	mov	r0, r3
 8006028:	f7fe ff7e 	bl	8004f28 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800602c:	6839      	ldr	r1, [r7, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	68ba      	ldr	r2, [r7, #8]
 8006032:	9202      	str	r2, [sp, #8]
 8006034:	9301      	str	r3, [sp, #4]
 8006036:	2300      	movs	r3, #0
 8006038:	9300      	str	r3, [sp, #0]
 800603a:	2300      	movs	r3, #0
 800603c:	460a      	mov	r2, r1
 800603e:	4922      	ldr	r1, [pc, #136]	@ (80060c8 <vTaskStartScheduler+0xb8>)
 8006040:	4822      	ldr	r0, [pc, #136]	@ (80060cc <vTaskStartScheduler+0xbc>)
 8006042:	f7ff fe09 	bl	8005c58 <xTaskCreateStatic>
 8006046:	4603      	mov	r3, r0
 8006048:	4a21      	ldr	r2, [pc, #132]	@ (80060d0 <vTaskStartScheduler+0xc0>)
 800604a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800604c:	4b20      	ldr	r3, [pc, #128]	@ (80060d0 <vTaskStartScheduler+0xc0>)
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	2b00      	cmp	r3, #0
 8006052:	d002      	beq.n	800605a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006054:	2301      	movs	r3, #1
 8006056:	617b      	str	r3, [r7, #20]
 8006058:	e001      	b.n	800605e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800605a:	2300      	movs	r3, #0
 800605c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800605e:	697b      	ldr	r3, [r7, #20]
 8006060:	2b01      	cmp	r3, #1
 8006062:	d102      	bne.n	800606a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006064:	f000 fd02 	bl	8006a6c <xTimerCreateTimerTask>
 8006068:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800606a:	697b      	ldr	r3, [r7, #20]
 800606c:	2b01      	cmp	r3, #1
 800606e:	d116      	bne.n	800609e <vTaskStartScheduler+0x8e>
	__asm volatile
 8006070:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006074:	f383 8811 	msr	BASEPRI, r3
 8006078:	f3bf 8f6f 	isb	sy
 800607c:	f3bf 8f4f 	dsb	sy
 8006080:	613b      	str	r3, [r7, #16]
}
 8006082:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006084:	4b13      	ldr	r3, [pc, #76]	@ (80060d4 <vTaskStartScheduler+0xc4>)
 8006086:	f04f 32ff 	mov.w	r2, #4294967295
 800608a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800608c:	4b12      	ldr	r3, [pc, #72]	@ (80060d8 <vTaskStartScheduler+0xc8>)
 800608e:	2201      	movs	r2, #1
 8006090:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006092:	4b12      	ldr	r3, [pc, #72]	@ (80060dc <vTaskStartScheduler+0xcc>)
 8006094:	2200      	movs	r2, #0
 8006096:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006098:	f001 f8be 	bl	8007218 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800609c:	e00f      	b.n	80060be <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060a4:	d10b      	bne.n	80060be <vTaskStartScheduler+0xae>
	__asm volatile
 80060a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060aa:	f383 8811 	msr	BASEPRI, r3
 80060ae:	f3bf 8f6f 	isb	sy
 80060b2:	f3bf 8f4f 	dsb	sy
 80060b6:	60fb      	str	r3, [r7, #12]
}
 80060b8:	bf00      	nop
 80060ba:	bf00      	nop
 80060bc:	e7fd      	b.n	80060ba <vTaskStartScheduler+0xaa>
}
 80060be:	bf00      	nop
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	08008344 	.word	0x08008344
 80060cc:	080066fd 	.word	0x080066fd
 80060d0:	20000de8 	.word	0x20000de8
 80060d4:	20000de4 	.word	0x20000de4
 80060d8:	20000dd0 	.word	0x20000dd0
 80060dc:	20000dc8 	.word	0x20000dc8

080060e0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80060e0:	b480      	push	{r7}
 80060e2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80060e4:	4b04      	ldr	r3, [pc, #16]	@ (80060f8 <vTaskSuspendAll+0x18>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	3301      	adds	r3, #1
 80060ea:	4a03      	ldr	r2, [pc, #12]	@ (80060f8 <vTaskSuspendAll+0x18>)
 80060ec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80060ee:	bf00      	nop
 80060f0:	46bd      	mov	sp, r7
 80060f2:	bc80      	pop	{r7}
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop
 80060f8:	20000dec 	.word	0x20000dec

080060fc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b084      	sub	sp, #16
 8006100:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006102:	2300      	movs	r3, #0
 8006104:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006106:	2300      	movs	r3, #0
 8006108:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800610a:	4b42      	ldr	r3, [pc, #264]	@ (8006214 <xTaskResumeAll+0x118>)
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	2b00      	cmp	r3, #0
 8006110:	d10b      	bne.n	800612a <xTaskResumeAll+0x2e>
	__asm volatile
 8006112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006116:	f383 8811 	msr	BASEPRI, r3
 800611a:	f3bf 8f6f 	isb	sy
 800611e:	f3bf 8f4f 	dsb	sy
 8006122:	603b      	str	r3, [r7, #0]
}
 8006124:	bf00      	nop
 8006126:	bf00      	nop
 8006128:	e7fd      	b.n	8006126 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800612a:	f001 f8e7 	bl	80072fc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800612e:	4b39      	ldr	r3, [pc, #228]	@ (8006214 <xTaskResumeAll+0x118>)
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	3b01      	subs	r3, #1
 8006134:	4a37      	ldr	r2, [pc, #220]	@ (8006214 <xTaskResumeAll+0x118>)
 8006136:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006138:	4b36      	ldr	r3, [pc, #216]	@ (8006214 <xTaskResumeAll+0x118>)
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	2b00      	cmp	r3, #0
 800613e:	d162      	bne.n	8006206 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006140:	4b35      	ldr	r3, [pc, #212]	@ (8006218 <xTaskResumeAll+0x11c>)
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d05e      	beq.n	8006206 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006148:	e02f      	b.n	80061aa <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800614a:	4b34      	ldr	r3, [pc, #208]	@ (800621c <xTaskResumeAll+0x120>)
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	68db      	ldr	r3, [r3, #12]
 8006150:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	3318      	adds	r3, #24
 8006156:	4618      	mov	r0, r3
 8006158:	f7fe ff9e 	bl	8005098 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	3304      	adds	r3, #4
 8006160:	4618      	mov	r0, r3
 8006162:	f7fe ff99 	bl	8005098 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800616a:	4b2d      	ldr	r3, [pc, #180]	@ (8006220 <xTaskResumeAll+0x124>)
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	429a      	cmp	r2, r3
 8006170:	d903      	bls.n	800617a <xTaskResumeAll+0x7e>
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006176:	4a2a      	ldr	r2, [pc, #168]	@ (8006220 <xTaskResumeAll+0x124>)
 8006178:	6013      	str	r3, [r2, #0]
 800617a:	68fb      	ldr	r3, [r7, #12]
 800617c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800617e:	4613      	mov	r3, r2
 8006180:	009b      	lsls	r3, r3, #2
 8006182:	4413      	add	r3, r2
 8006184:	009b      	lsls	r3, r3, #2
 8006186:	4a27      	ldr	r2, [pc, #156]	@ (8006224 <xTaskResumeAll+0x128>)
 8006188:	441a      	add	r2, r3
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	3304      	adds	r3, #4
 800618e:	4619      	mov	r1, r3
 8006190:	4610      	mov	r0, r2
 8006192:	f7fe ff26 	bl	8004fe2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800619a:	4b23      	ldr	r3, [pc, #140]	@ (8006228 <xTaskResumeAll+0x12c>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061a0:	429a      	cmp	r2, r3
 80061a2:	d302      	bcc.n	80061aa <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80061a4:	4b21      	ldr	r3, [pc, #132]	@ (800622c <xTaskResumeAll+0x130>)
 80061a6:	2201      	movs	r2, #1
 80061a8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061aa:	4b1c      	ldr	r3, [pc, #112]	@ (800621c <xTaskResumeAll+0x120>)
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d1cb      	bne.n	800614a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d001      	beq.n	80061bc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80061b8:	f000 fb56 	bl	8006868 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80061bc:	4b1c      	ldr	r3, [pc, #112]	@ (8006230 <xTaskResumeAll+0x134>)
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d010      	beq.n	80061ea <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80061c8:	f000 f844 	bl	8006254 <xTaskIncrementTick>
 80061cc:	4603      	mov	r3, r0
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	d002      	beq.n	80061d8 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80061d2:	4b16      	ldr	r3, [pc, #88]	@ (800622c <xTaskResumeAll+0x130>)
 80061d4:	2201      	movs	r2, #1
 80061d6:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	3b01      	subs	r3, #1
 80061dc:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d1f1      	bne.n	80061c8 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80061e4:	4b12      	ldr	r3, [pc, #72]	@ (8006230 <xTaskResumeAll+0x134>)
 80061e6:	2200      	movs	r2, #0
 80061e8:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061ea:	4b10      	ldr	r3, [pc, #64]	@ (800622c <xTaskResumeAll+0x130>)
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	2b00      	cmp	r3, #0
 80061f0:	d009      	beq.n	8006206 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061f2:	2301      	movs	r3, #1
 80061f4:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061f6:	4b0f      	ldr	r3, [pc, #60]	@ (8006234 <xTaskResumeAll+0x138>)
 80061f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80061fc:	601a      	str	r2, [r3, #0]
 80061fe:	f3bf 8f4f 	dsb	sy
 8006202:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006206:	f001 f8a9 	bl	800735c <vPortExitCritical>

	return xAlreadyYielded;
 800620a:	68bb      	ldr	r3, [r7, #8]
}
 800620c:	4618      	mov	r0, r3
 800620e:	3710      	adds	r7, #16
 8006210:	46bd      	mov	sp, r7
 8006212:	bd80      	pop	{r7, pc}
 8006214:	20000dec 	.word	0x20000dec
 8006218:	20000dc4 	.word	0x20000dc4
 800621c:	20000d84 	.word	0x20000d84
 8006220:	20000dcc 	.word	0x20000dcc
 8006224:	200008f4 	.word	0x200008f4
 8006228:	200008f0 	.word	0x200008f0
 800622c:	20000dd8 	.word	0x20000dd8
 8006230:	20000dd4 	.word	0x20000dd4
 8006234:	e000ed04 	.word	0xe000ed04

08006238 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800623e:	4b04      	ldr	r3, [pc, #16]	@ (8006250 <xTaskGetTickCount+0x18>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006244:	687b      	ldr	r3, [r7, #4]
}
 8006246:	4618      	mov	r0, r3
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	bc80      	pop	{r7}
 800624e:	4770      	bx	lr
 8006250:	20000dc8 	.word	0x20000dc8

08006254 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b086      	sub	sp, #24
 8006258:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800625a:	2300      	movs	r3, #0
 800625c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800625e:	4b4f      	ldr	r3, [pc, #316]	@ (800639c <xTaskIncrementTick+0x148>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	2b00      	cmp	r3, #0
 8006264:	f040 8090 	bne.w	8006388 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006268:	4b4d      	ldr	r3, [pc, #308]	@ (80063a0 <xTaskIncrementTick+0x14c>)
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	3301      	adds	r3, #1
 800626e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006270:	4a4b      	ldr	r2, [pc, #300]	@ (80063a0 <xTaskIncrementTick+0x14c>)
 8006272:	693b      	ldr	r3, [r7, #16]
 8006274:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006276:	693b      	ldr	r3, [r7, #16]
 8006278:	2b00      	cmp	r3, #0
 800627a:	d121      	bne.n	80062c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800627c:	4b49      	ldr	r3, [pc, #292]	@ (80063a4 <xTaskIncrementTick+0x150>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00b      	beq.n	800629e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006286:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628a:	f383 8811 	msr	BASEPRI, r3
 800628e:	f3bf 8f6f 	isb	sy
 8006292:	f3bf 8f4f 	dsb	sy
 8006296:	603b      	str	r3, [r7, #0]
}
 8006298:	bf00      	nop
 800629a:	bf00      	nop
 800629c:	e7fd      	b.n	800629a <xTaskIncrementTick+0x46>
 800629e:	4b41      	ldr	r3, [pc, #260]	@ (80063a4 <xTaskIncrementTick+0x150>)
 80062a0:	681b      	ldr	r3, [r3, #0]
 80062a2:	60fb      	str	r3, [r7, #12]
 80062a4:	4b40      	ldr	r3, [pc, #256]	@ (80063a8 <xTaskIncrementTick+0x154>)
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	4a3e      	ldr	r2, [pc, #248]	@ (80063a4 <xTaskIncrementTick+0x150>)
 80062aa:	6013      	str	r3, [r2, #0]
 80062ac:	4a3e      	ldr	r2, [pc, #248]	@ (80063a8 <xTaskIncrementTick+0x154>)
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	6013      	str	r3, [r2, #0]
 80062b2:	4b3e      	ldr	r3, [pc, #248]	@ (80063ac <xTaskIncrementTick+0x158>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	3301      	adds	r3, #1
 80062b8:	4a3c      	ldr	r2, [pc, #240]	@ (80063ac <xTaskIncrementTick+0x158>)
 80062ba:	6013      	str	r3, [r2, #0]
 80062bc:	f000 fad4 	bl	8006868 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062c0:	4b3b      	ldr	r3, [pc, #236]	@ (80063b0 <xTaskIncrementTick+0x15c>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	693a      	ldr	r2, [r7, #16]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d349      	bcc.n	800635e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062ca:	4b36      	ldr	r3, [pc, #216]	@ (80063a4 <xTaskIncrementTick+0x150>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d104      	bne.n	80062de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062d4:	4b36      	ldr	r3, [pc, #216]	@ (80063b0 <xTaskIncrementTick+0x15c>)
 80062d6:	f04f 32ff 	mov.w	r2, #4294967295
 80062da:	601a      	str	r2, [r3, #0]
					break;
 80062dc:	e03f      	b.n	800635e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062de:	4b31      	ldr	r3, [pc, #196]	@ (80063a4 <xTaskIncrementTick+0x150>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	68db      	ldr	r3, [r3, #12]
 80062e4:	68db      	ldr	r3, [r3, #12]
 80062e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062e8:	68bb      	ldr	r3, [r7, #8]
 80062ea:	685b      	ldr	r3, [r3, #4]
 80062ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	429a      	cmp	r2, r3
 80062f4:	d203      	bcs.n	80062fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062f6:	4a2e      	ldr	r2, [pc, #184]	@ (80063b0 <xTaskIncrementTick+0x15c>)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062fc:	e02f      	b.n	800635e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062fe:	68bb      	ldr	r3, [r7, #8]
 8006300:	3304      	adds	r3, #4
 8006302:	4618      	mov	r0, r3
 8006304:	f7fe fec8 	bl	8005098 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630c:	2b00      	cmp	r3, #0
 800630e:	d004      	beq.n	800631a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	3318      	adds	r3, #24
 8006314:	4618      	mov	r0, r3
 8006316:	f7fe febf 	bl	8005098 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800631e:	4b25      	ldr	r3, [pc, #148]	@ (80063b4 <xTaskIncrementTick+0x160>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	429a      	cmp	r2, r3
 8006324:	d903      	bls.n	800632e <xTaskIncrementTick+0xda>
 8006326:	68bb      	ldr	r3, [r7, #8]
 8006328:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800632a:	4a22      	ldr	r2, [pc, #136]	@ (80063b4 <xTaskIncrementTick+0x160>)
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	68bb      	ldr	r3, [r7, #8]
 8006330:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006332:	4613      	mov	r3, r2
 8006334:	009b      	lsls	r3, r3, #2
 8006336:	4413      	add	r3, r2
 8006338:	009b      	lsls	r3, r3, #2
 800633a:	4a1f      	ldr	r2, [pc, #124]	@ (80063b8 <xTaskIncrementTick+0x164>)
 800633c:	441a      	add	r2, r3
 800633e:	68bb      	ldr	r3, [r7, #8]
 8006340:	3304      	adds	r3, #4
 8006342:	4619      	mov	r1, r3
 8006344:	4610      	mov	r0, r2
 8006346:	f7fe fe4c 	bl	8004fe2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800634e:	4b1b      	ldr	r3, [pc, #108]	@ (80063bc <xTaskIncrementTick+0x168>)
 8006350:	681b      	ldr	r3, [r3, #0]
 8006352:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006354:	429a      	cmp	r2, r3
 8006356:	d3b8      	bcc.n	80062ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006358:	2301      	movs	r3, #1
 800635a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800635c:	e7b5      	b.n	80062ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800635e:	4b17      	ldr	r3, [pc, #92]	@ (80063bc <xTaskIncrementTick+0x168>)
 8006360:	681b      	ldr	r3, [r3, #0]
 8006362:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006364:	4914      	ldr	r1, [pc, #80]	@ (80063b8 <xTaskIncrementTick+0x164>)
 8006366:	4613      	mov	r3, r2
 8006368:	009b      	lsls	r3, r3, #2
 800636a:	4413      	add	r3, r2
 800636c:	009b      	lsls	r3, r3, #2
 800636e:	440b      	add	r3, r1
 8006370:	681b      	ldr	r3, [r3, #0]
 8006372:	2b01      	cmp	r3, #1
 8006374:	d901      	bls.n	800637a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006376:	2301      	movs	r3, #1
 8006378:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800637a:	4b11      	ldr	r3, [pc, #68]	@ (80063c0 <xTaskIncrementTick+0x16c>)
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	2b00      	cmp	r3, #0
 8006380:	d007      	beq.n	8006392 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006382:	2301      	movs	r3, #1
 8006384:	617b      	str	r3, [r7, #20]
 8006386:	e004      	b.n	8006392 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006388:	4b0e      	ldr	r3, [pc, #56]	@ (80063c4 <xTaskIncrementTick+0x170>)
 800638a:	681b      	ldr	r3, [r3, #0]
 800638c:	3301      	adds	r3, #1
 800638e:	4a0d      	ldr	r2, [pc, #52]	@ (80063c4 <xTaskIncrementTick+0x170>)
 8006390:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006392:	697b      	ldr	r3, [r7, #20]
}
 8006394:	4618      	mov	r0, r3
 8006396:	3718      	adds	r7, #24
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}
 800639c:	20000dec 	.word	0x20000dec
 80063a0:	20000dc8 	.word	0x20000dc8
 80063a4:	20000d7c 	.word	0x20000d7c
 80063a8:	20000d80 	.word	0x20000d80
 80063ac:	20000ddc 	.word	0x20000ddc
 80063b0:	20000de4 	.word	0x20000de4
 80063b4:	20000dcc 	.word	0x20000dcc
 80063b8:	200008f4 	.word	0x200008f4
 80063bc:	200008f0 	.word	0x200008f0
 80063c0:	20000dd8 	.word	0x20000dd8
 80063c4:	20000dd4 	.word	0x20000dd4

080063c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063c8:	b480      	push	{r7}
 80063ca:	b085      	sub	sp, #20
 80063cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063ce:	4b28      	ldr	r3, [pc, #160]	@ (8006470 <vTaskSwitchContext+0xa8>)
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d003      	beq.n	80063de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063d6:	4b27      	ldr	r3, [pc, #156]	@ (8006474 <vTaskSwitchContext+0xac>)
 80063d8:	2201      	movs	r2, #1
 80063da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063dc:	e042      	b.n	8006464 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80063de:	4b25      	ldr	r3, [pc, #148]	@ (8006474 <vTaskSwitchContext+0xac>)
 80063e0:	2200      	movs	r2, #0
 80063e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063e4:	4b24      	ldr	r3, [pc, #144]	@ (8006478 <vTaskSwitchContext+0xb0>)
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	60fb      	str	r3, [r7, #12]
 80063ea:	e011      	b.n	8006410 <vTaskSwitchContext+0x48>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d10b      	bne.n	800640a <vTaskSwitchContext+0x42>
	__asm volatile
 80063f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063f6:	f383 8811 	msr	BASEPRI, r3
 80063fa:	f3bf 8f6f 	isb	sy
 80063fe:	f3bf 8f4f 	dsb	sy
 8006402:	607b      	str	r3, [r7, #4]
}
 8006404:	bf00      	nop
 8006406:	bf00      	nop
 8006408:	e7fd      	b.n	8006406 <vTaskSwitchContext+0x3e>
 800640a:	68fb      	ldr	r3, [r7, #12]
 800640c:	3b01      	subs	r3, #1
 800640e:	60fb      	str	r3, [r7, #12]
 8006410:	491a      	ldr	r1, [pc, #104]	@ (800647c <vTaskSwitchContext+0xb4>)
 8006412:	68fa      	ldr	r2, [r7, #12]
 8006414:	4613      	mov	r3, r2
 8006416:	009b      	lsls	r3, r3, #2
 8006418:	4413      	add	r3, r2
 800641a:	009b      	lsls	r3, r3, #2
 800641c:	440b      	add	r3, r1
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	2b00      	cmp	r3, #0
 8006422:	d0e3      	beq.n	80063ec <vTaskSwitchContext+0x24>
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	4613      	mov	r3, r2
 8006428:	009b      	lsls	r3, r3, #2
 800642a:	4413      	add	r3, r2
 800642c:	009b      	lsls	r3, r3, #2
 800642e:	4a13      	ldr	r2, [pc, #76]	@ (800647c <vTaskSwitchContext+0xb4>)
 8006430:	4413      	add	r3, r2
 8006432:	60bb      	str	r3, [r7, #8]
 8006434:	68bb      	ldr	r3, [r7, #8]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	685a      	ldr	r2, [r3, #4]
 800643a:	68bb      	ldr	r3, [r7, #8]
 800643c:	605a      	str	r2, [r3, #4]
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	685a      	ldr	r2, [r3, #4]
 8006442:	68bb      	ldr	r3, [r7, #8]
 8006444:	3308      	adds	r3, #8
 8006446:	429a      	cmp	r2, r3
 8006448:	d104      	bne.n	8006454 <vTaskSwitchContext+0x8c>
 800644a:	68bb      	ldr	r3, [r7, #8]
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	685a      	ldr	r2, [r3, #4]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	605a      	str	r2, [r3, #4]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	4a09      	ldr	r2, [pc, #36]	@ (8006480 <vTaskSwitchContext+0xb8>)
 800645c:	6013      	str	r3, [r2, #0]
 800645e:	4a06      	ldr	r2, [pc, #24]	@ (8006478 <vTaskSwitchContext+0xb0>)
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	6013      	str	r3, [r2, #0]
}
 8006464:	bf00      	nop
 8006466:	3714      	adds	r7, #20
 8006468:	46bd      	mov	sp, r7
 800646a:	bc80      	pop	{r7}
 800646c:	4770      	bx	lr
 800646e:	bf00      	nop
 8006470:	20000dec 	.word	0x20000dec
 8006474:	20000dd8 	.word	0x20000dd8
 8006478:	20000dcc 	.word	0x20000dcc
 800647c:	200008f4 	.word	0x200008f4
 8006480:	200008f0 	.word	0x200008f0

08006484 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b084      	sub	sp, #16
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
 800648c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	2b00      	cmp	r3, #0
 8006492:	d10b      	bne.n	80064ac <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	60fb      	str	r3, [r7, #12]
}
 80064a6:	bf00      	nop
 80064a8:	bf00      	nop
 80064aa:	e7fd      	b.n	80064a8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064ac:	4b07      	ldr	r3, [pc, #28]	@ (80064cc <vTaskPlaceOnEventList+0x48>)
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	3318      	adds	r3, #24
 80064b2:	4619      	mov	r1, r3
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f7fe fdb7 	bl	8005028 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064ba:	2101      	movs	r1, #1
 80064bc:	6838      	ldr	r0, [r7, #0]
 80064be:	f000 fa81 	bl	80069c4 <prvAddCurrentTaskToDelayedList>
}
 80064c2:	bf00      	nop
 80064c4:	3710      	adds	r7, #16
 80064c6:	46bd      	mov	sp, r7
 80064c8:	bd80      	pop	{r7, pc}
 80064ca:	bf00      	nop
 80064cc:	200008f0 	.word	0x200008f0

080064d0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d10b      	bne.n	80064fa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80064e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064e6:	f383 8811 	msr	BASEPRI, r3
 80064ea:	f3bf 8f6f 	isb	sy
 80064ee:	f3bf 8f4f 	dsb	sy
 80064f2:	617b      	str	r3, [r7, #20]
}
 80064f4:	bf00      	nop
 80064f6:	bf00      	nop
 80064f8:	e7fd      	b.n	80064f6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064fa:	4b0a      	ldr	r3, [pc, #40]	@ (8006524 <vTaskPlaceOnEventListRestricted+0x54>)
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	3318      	adds	r3, #24
 8006500:	4619      	mov	r1, r3
 8006502:	68f8      	ldr	r0, [r7, #12]
 8006504:	f7fe fd6d 	bl	8004fe2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	2b00      	cmp	r3, #0
 800650c:	d002      	beq.n	8006514 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800650e:	f04f 33ff 	mov.w	r3, #4294967295
 8006512:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006514:	6879      	ldr	r1, [r7, #4]
 8006516:	68b8      	ldr	r0, [r7, #8]
 8006518:	f000 fa54 	bl	80069c4 <prvAddCurrentTaskToDelayedList>
	}
 800651c:	bf00      	nop
 800651e:	3718      	adds	r7, #24
 8006520:	46bd      	mov	sp, r7
 8006522:	bd80      	pop	{r7, pc}
 8006524:	200008f0 	.word	0x200008f0

08006528 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b086      	sub	sp, #24
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	68db      	ldr	r3, [r3, #12]
 8006534:	68db      	ldr	r3, [r3, #12]
 8006536:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006538:	693b      	ldr	r3, [r7, #16]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10b      	bne.n	8006556 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	60fb      	str	r3, [r7, #12]
}
 8006550:	bf00      	nop
 8006552:	bf00      	nop
 8006554:	e7fd      	b.n	8006552 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006556:	693b      	ldr	r3, [r7, #16]
 8006558:	3318      	adds	r3, #24
 800655a:	4618      	mov	r0, r3
 800655c:	f7fe fd9c 	bl	8005098 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006560:	4b1d      	ldr	r3, [pc, #116]	@ (80065d8 <xTaskRemoveFromEventList+0xb0>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d11d      	bne.n	80065a4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	3304      	adds	r3, #4
 800656c:	4618      	mov	r0, r3
 800656e:	f7fe fd93 	bl	8005098 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006572:	693b      	ldr	r3, [r7, #16]
 8006574:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006576:	4b19      	ldr	r3, [pc, #100]	@ (80065dc <xTaskRemoveFromEventList+0xb4>)
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	429a      	cmp	r2, r3
 800657c:	d903      	bls.n	8006586 <xTaskRemoveFromEventList+0x5e>
 800657e:	693b      	ldr	r3, [r7, #16]
 8006580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006582:	4a16      	ldr	r2, [pc, #88]	@ (80065dc <xTaskRemoveFromEventList+0xb4>)
 8006584:	6013      	str	r3, [r2, #0]
 8006586:	693b      	ldr	r3, [r7, #16]
 8006588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800658a:	4613      	mov	r3, r2
 800658c:	009b      	lsls	r3, r3, #2
 800658e:	4413      	add	r3, r2
 8006590:	009b      	lsls	r3, r3, #2
 8006592:	4a13      	ldr	r2, [pc, #76]	@ (80065e0 <xTaskRemoveFromEventList+0xb8>)
 8006594:	441a      	add	r2, r3
 8006596:	693b      	ldr	r3, [r7, #16]
 8006598:	3304      	adds	r3, #4
 800659a:	4619      	mov	r1, r3
 800659c:	4610      	mov	r0, r2
 800659e:	f7fe fd20 	bl	8004fe2 <vListInsertEnd>
 80065a2:	e005      	b.n	80065b0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065a4:	693b      	ldr	r3, [r7, #16]
 80065a6:	3318      	adds	r3, #24
 80065a8:	4619      	mov	r1, r3
 80065aa:	480e      	ldr	r0, [pc, #56]	@ (80065e4 <xTaskRemoveFromEventList+0xbc>)
 80065ac:	f7fe fd19 	bl	8004fe2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065b4:	4b0c      	ldr	r3, [pc, #48]	@ (80065e8 <xTaskRemoveFromEventList+0xc0>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065ba:	429a      	cmp	r2, r3
 80065bc:	d905      	bls.n	80065ca <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065be:	2301      	movs	r3, #1
 80065c0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065c2:	4b0a      	ldr	r3, [pc, #40]	@ (80065ec <xTaskRemoveFromEventList+0xc4>)
 80065c4:	2201      	movs	r2, #1
 80065c6:	601a      	str	r2, [r3, #0]
 80065c8:	e001      	b.n	80065ce <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80065ca:	2300      	movs	r3, #0
 80065cc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80065ce:	697b      	ldr	r3, [r7, #20]
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3718      	adds	r7, #24
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}
 80065d8:	20000dec 	.word	0x20000dec
 80065dc:	20000dcc 	.word	0x20000dcc
 80065e0:	200008f4 	.word	0x200008f4
 80065e4:	20000d84 	.word	0x20000d84
 80065e8:	200008f0 	.word	0x200008f0
 80065ec:	20000dd8 	.word	0x20000dd8

080065f0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065f0:	b480      	push	{r7}
 80065f2:	b083      	sub	sp, #12
 80065f4:	af00      	add	r7, sp, #0
 80065f6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065f8:	4b06      	ldr	r3, [pc, #24]	@ (8006614 <vTaskInternalSetTimeOutState+0x24>)
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006600:	4b05      	ldr	r3, [pc, #20]	@ (8006618 <vTaskInternalSetTimeOutState+0x28>)
 8006602:	681a      	ldr	r2, [r3, #0]
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	605a      	str	r2, [r3, #4]
}
 8006608:	bf00      	nop
 800660a:	370c      	adds	r7, #12
 800660c:	46bd      	mov	sp, r7
 800660e:	bc80      	pop	{r7}
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	20000ddc 	.word	0x20000ddc
 8006618:	20000dc8 	.word	0x20000dc8

0800661c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800661c:	b580      	push	{r7, lr}
 800661e:	b088      	sub	sp, #32
 8006620:	af00      	add	r7, sp, #0
 8006622:	6078      	str	r0, [r7, #4]
 8006624:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2b00      	cmp	r3, #0
 800662a:	d10b      	bne.n	8006644 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800662c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006630:	f383 8811 	msr	BASEPRI, r3
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	613b      	str	r3, [r7, #16]
}
 800663e:	bf00      	nop
 8006640:	bf00      	nop
 8006642:	e7fd      	b.n	8006640 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006644:	683b      	ldr	r3, [r7, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d10b      	bne.n	8006662 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800664a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664e:	f383 8811 	msr	BASEPRI, r3
 8006652:	f3bf 8f6f 	isb	sy
 8006656:	f3bf 8f4f 	dsb	sy
 800665a:	60fb      	str	r3, [r7, #12]
}
 800665c:	bf00      	nop
 800665e:	bf00      	nop
 8006660:	e7fd      	b.n	800665e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006662:	f000 fe4b 	bl	80072fc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006666:	4b1d      	ldr	r3, [pc, #116]	@ (80066dc <xTaskCheckForTimeOut+0xc0>)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	69ba      	ldr	r2, [r7, #24]
 8006672:	1ad3      	subs	r3, r2, r3
 8006674:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006676:	683b      	ldr	r3, [r7, #0]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800667e:	d102      	bne.n	8006686 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006680:	2300      	movs	r3, #0
 8006682:	61fb      	str	r3, [r7, #28]
 8006684:	e023      	b.n	80066ce <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	681a      	ldr	r2, [r3, #0]
 800668a:	4b15      	ldr	r3, [pc, #84]	@ (80066e0 <xTaskCheckForTimeOut+0xc4>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	429a      	cmp	r2, r3
 8006690:	d007      	beq.n	80066a2 <xTaskCheckForTimeOut+0x86>
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	685b      	ldr	r3, [r3, #4]
 8006696:	69ba      	ldr	r2, [r7, #24]
 8006698:	429a      	cmp	r2, r3
 800669a:	d302      	bcc.n	80066a2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800669c:	2301      	movs	r3, #1
 800669e:	61fb      	str	r3, [r7, #28]
 80066a0:	e015      	b.n	80066ce <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	697a      	ldr	r2, [r7, #20]
 80066a8:	429a      	cmp	r2, r3
 80066aa:	d20b      	bcs.n	80066c4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	681a      	ldr	r2, [r3, #0]
 80066b0:	697b      	ldr	r3, [r7, #20]
 80066b2:	1ad2      	subs	r2, r2, r3
 80066b4:	683b      	ldr	r3, [r7, #0]
 80066b6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066b8:	6878      	ldr	r0, [r7, #4]
 80066ba:	f7ff ff99 	bl	80065f0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066be:	2300      	movs	r3, #0
 80066c0:	61fb      	str	r3, [r7, #28]
 80066c2:	e004      	b.n	80066ce <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80066c4:	683b      	ldr	r3, [r7, #0]
 80066c6:	2200      	movs	r2, #0
 80066c8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066ca:	2301      	movs	r3, #1
 80066cc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80066ce:	f000 fe45 	bl	800735c <vPortExitCritical>

	return xReturn;
 80066d2:	69fb      	ldr	r3, [r7, #28]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3720      	adds	r7, #32
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}
 80066dc:	20000dc8 	.word	0x20000dc8
 80066e0:	20000ddc 	.word	0x20000ddc

080066e4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066e4:	b480      	push	{r7}
 80066e6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066e8:	4b03      	ldr	r3, [pc, #12]	@ (80066f8 <vTaskMissedYield+0x14>)
 80066ea:	2201      	movs	r2, #1
 80066ec:	601a      	str	r2, [r3, #0]
}
 80066ee:	bf00      	nop
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bc80      	pop	{r7}
 80066f4:	4770      	bx	lr
 80066f6:	bf00      	nop
 80066f8:	20000dd8 	.word	0x20000dd8

080066fc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006704:	f000 f852 	bl	80067ac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006708:	4b06      	ldr	r3, [pc, #24]	@ (8006724 <prvIdleTask+0x28>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	2b01      	cmp	r3, #1
 800670e:	d9f9      	bls.n	8006704 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006710:	4b05      	ldr	r3, [pc, #20]	@ (8006728 <prvIdleTask+0x2c>)
 8006712:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006716:	601a      	str	r2, [r3, #0]
 8006718:	f3bf 8f4f 	dsb	sy
 800671c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006720:	e7f0      	b.n	8006704 <prvIdleTask+0x8>
 8006722:	bf00      	nop
 8006724:	200008f4 	.word	0x200008f4
 8006728:	e000ed04 	.word	0xe000ed04

0800672c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800672c:	b580      	push	{r7, lr}
 800672e:	b082      	sub	sp, #8
 8006730:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006732:	2300      	movs	r3, #0
 8006734:	607b      	str	r3, [r7, #4]
 8006736:	e00c      	b.n	8006752 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	4613      	mov	r3, r2
 800673c:	009b      	lsls	r3, r3, #2
 800673e:	4413      	add	r3, r2
 8006740:	009b      	lsls	r3, r3, #2
 8006742:	4a12      	ldr	r2, [pc, #72]	@ (800678c <prvInitialiseTaskLists+0x60>)
 8006744:	4413      	add	r3, r2
 8006746:	4618      	mov	r0, r3
 8006748:	f7fe fc20 	bl	8004f8c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800674c:	687b      	ldr	r3, [r7, #4]
 800674e:	3301      	adds	r3, #1
 8006750:	607b      	str	r3, [r7, #4]
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	2b37      	cmp	r3, #55	@ 0x37
 8006756:	d9ef      	bls.n	8006738 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006758:	480d      	ldr	r0, [pc, #52]	@ (8006790 <prvInitialiseTaskLists+0x64>)
 800675a:	f7fe fc17 	bl	8004f8c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800675e:	480d      	ldr	r0, [pc, #52]	@ (8006794 <prvInitialiseTaskLists+0x68>)
 8006760:	f7fe fc14 	bl	8004f8c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006764:	480c      	ldr	r0, [pc, #48]	@ (8006798 <prvInitialiseTaskLists+0x6c>)
 8006766:	f7fe fc11 	bl	8004f8c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800676a:	480c      	ldr	r0, [pc, #48]	@ (800679c <prvInitialiseTaskLists+0x70>)
 800676c:	f7fe fc0e 	bl	8004f8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006770:	480b      	ldr	r0, [pc, #44]	@ (80067a0 <prvInitialiseTaskLists+0x74>)
 8006772:	f7fe fc0b 	bl	8004f8c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006776:	4b0b      	ldr	r3, [pc, #44]	@ (80067a4 <prvInitialiseTaskLists+0x78>)
 8006778:	4a05      	ldr	r2, [pc, #20]	@ (8006790 <prvInitialiseTaskLists+0x64>)
 800677a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800677c:	4b0a      	ldr	r3, [pc, #40]	@ (80067a8 <prvInitialiseTaskLists+0x7c>)
 800677e:	4a05      	ldr	r2, [pc, #20]	@ (8006794 <prvInitialiseTaskLists+0x68>)
 8006780:	601a      	str	r2, [r3, #0]
}
 8006782:	bf00      	nop
 8006784:	3708      	adds	r7, #8
 8006786:	46bd      	mov	sp, r7
 8006788:	bd80      	pop	{r7, pc}
 800678a:	bf00      	nop
 800678c:	200008f4 	.word	0x200008f4
 8006790:	20000d54 	.word	0x20000d54
 8006794:	20000d68 	.word	0x20000d68
 8006798:	20000d84 	.word	0x20000d84
 800679c:	20000d98 	.word	0x20000d98
 80067a0:	20000db0 	.word	0x20000db0
 80067a4:	20000d7c 	.word	0x20000d7c
 80067a8:	20000d80 	.word	0x20000d80

080067ac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b082      	sub	sp, #8
 80067b0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067b2:	e019      	b.n	80067e8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80067b4:	f000 fda2 	bl	80072fc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067b8:	4b10      	ldr	r3, [pc, #64]	@ (80067fc <prvCheckTasksWaitingTermination+0x50>)
 80067ba:	68db      	ldr	r3, [r3, #12]
 80067bc:	68db      	ldr	r3, [r3, #12]
 80067be:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	3304      	adds	r3, #4
 80067c4:	4618      	mov	r0, r3
 80067c6:	f7fe fc67 	bl	8005098 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006800 <prvCheckTasksWaitingTermination+0x54>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	3b01      	subs	r3, #1
 80067d0:	4a0b      	ldr	r2, [pc, #44]	@ (8006800 <prvCheckTasksWaitingTermination+0x54>)
 80067d2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067d4:	4b0b      	ldr	r3, [pc, #44]	@ (8006804 <prvCheckTasksWaitingTermination+0x58>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	3b01      	subs	r3, #1
 80067da:	4a0a      	ldr	r2, [pc, #40]	@ (8006804 <prvCheckTasksWaitingTermination+0x58>)
 80067dc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067de:	f000 fdbd 	bl	800735c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067e2:	6878      	ldr	r0, [r7, #4]
 80067e4:	f000 f810 	bl	8006808 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067e8:	4b06      	ldr	r3, [pc, #24]	@ (8006804 <prvCheckTasksWaitingTermination+0x58>)
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2b00      	cmp	r3, #0
 80067ee:	d1e1      	bne.n	80067b4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067f0:	bf00      	nop
 80067f2:	bf00      	nop
 80067f4:	3708      	adds	r7, #8
 80067f6:	46bd      	mov	sp, r7
 80067f8:	bd80      	pop	{r7, pc}
 80067fa:	bf00      	nop
 80067fc:	20000d98 	.word	0x20000d98
 8006800:	20000dc4 	.word	0x20000dc4
 8006804:	20000dac 	.word	0x20000dac

08006808 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006808:	b580      	push	{r7, lr}
 800680a:	b084      	sub	sp, #16
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006810:	687b      	ldr	r3, [r7, #4]
 8006812:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006816:	2b00      	cmp	r3, #0
 8006818:	d108      	bne.n	800682c <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800681e:	4618      	mov	r0, r3
 8006820:	f000 ff3c 	bl	800769c <vPortFree>
				vPortFree( pxTCB );
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 ff39 	bl	800769c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800682a:	e019      	b.n	8006860 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006832:	2b01      	cmp	r3, #1
 8006834:	d103      	bne.n	800683e <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006836:	6878      	ldr	r0, [r7, #4]
 8006838:	f000 ff30 	bl	800769c <vPortFree>
	}
 800683c:	e010      	b.n	8006860 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006844:	2b02      	cmp	r3, #2
 8006846:	d00b      	beq.n	8006860 <prvDeleteTCB+0x58>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	60fb      	str	r3, [r7, #12]
}
 800685a:	bf00      	nop
 800685c:	bf00      	nop
 800685e:	e7fd      	b.n	800685c <prvDeleteTCB+0x54>
	}
 8006860:	bf00      	nop
 8006862:	3710      	adds	r7, #16
 8006864:	46bd      	mov	sp, r7
 8006866:	bd80      	pop	{r7, pc}

08006868 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006868:	b480      	push	{r7}
 800686a:	b083      	sub	sp, #12
 800686c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800686e:	4b0c      	ldr	r3, [pc, #48]	@ (80068a0 <prvResetNextTaskUnblockTime+0x38>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d104      	bne.n	8006882 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006878:	4b0a      	ldr	r3, [pc, #40]	@ (80068a4 <prvResetNextTaskUnblockTime+0x3c>)
 800687a:	f04f 32ff 	mov.w	r2, #4294967295
 800687e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006880:	e008      	b.n	8006894 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006882:	4b07      	ldr	r3, [pc, #28]	@ (80068a0 <prvResetNextTaskUnblockTime+0x38>)
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	68db      	ldr	r3, [r3, #12]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	4a04      	ldr	r2, [pc, #16]	@ (80068a4 <prvResetNextTaskUnblockTime+0x3c>)
 8006892:	6013      	str	r3, [r2, #0]
}
 8006894:	bf00      	nop
 8006896:	370c      	adds	r7, #12
 8006898:	46bd      	mov	sp, r7
 800689a:	bc80      	pop	{r7}
 800689c:	4770      	bx	lr
 800689e:	bf00      	nop
 80068a0:	20000d7c 	.word	0x20000d7c
 80068a4:	20000de4 	.word	0x20000de4

080068a8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80068a8:	b480      	push	{r7}
 80068aa:	b083      	sub	sp, #12
 80068ac:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80068ae:	4b0b      	ldr	r3, [pc, #44]	@ (80068dc <xTaskGetSchedulerState+0x34>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d102      	bne.n	80068bc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068b6:	2301      	movs	r3, #1
 80068b8:	607b      	str	r3, [r7, #4]
 80068ba:	e008      	b.n	80068ce <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068bc:	4b08      	ldr	r3, [pc, #32]	@ (80068e0 <xTaskGetSchedulerState+0x38>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	2b00      	cmp	r3, #0
 80068c2:	d102      	bne.n	80068ca <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068c4:	2302      	movs	r3, #2
 80068c6:	607b      	str	r3, [r7, #4]
 80068c8:	e001      	b.n	80068ce <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068ca:	2300      	movs	r3, #0
 80068cc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068ce:	687b      	ldr	r3, [r7, #4]
	}
 80068d0:	4618      	mov	r0, r3
 80068d2:	370c      	adds	r7, #12
 80068d4:	46bd      	mov	sp, r7
 80068d6:	bc80      	pop	{r7}
 80068d8:	4770      	bx	lr
 80068da:	bf00      	nop
 80068dc:	20000dd0 	.word	0x20000dd0
 80068e0:	20000dec 	.word	0x20000dec

080068e4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b086      	sub	sp, #24
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068f0:	2300      	movs	r3, #0
 80068f2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d058      	beq.n	80069ac <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80068fa:	4b2f      	ldr	r3, [pc, #188]	@ (80069b8 <xTaskPriorityDisinherit+0xd4>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	693a      	ldr	r2, [r7, #16]
 8006900:	429a      	cmp	r2, r3
 8006902:	d00b      	beq.n	800691c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006908:	f383 8811 	msr	BASEPRI, r3
 800690c:	f3bf 8f6f 	isb	sy
 8006910:	f3bf 8f4f 	dsb	sy
 8006914:	60fb      	str	r3, [r7, #12]
}
 8006916:	bf00      	nop
 8006918:	bf00      	nop
 800691a:	e7fd      	b.n	8006918 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800691c:	693b      	ldr	r3, [r7, #16]
 800691e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006920:	2b00      	cmp	r3, #0
 8006922:	d10b      	bne.n	800693c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006924:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006928:	f383 8811 	msr	BASEPRI, r3
 800692c:	f3bf 8f6f 	isb	sy
 8006930:	f3bf 8f4f 	dsb	sy
 8006934:	60bb      	str	r3, [r7, #8]
}
 8006936:	bf00      	nop
 8006938:	bf00      	nop
 800693a:	e7fd      	b.n	8006938 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800693c:	693b      	ldr	r3, [r7, #16]
 800693e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006940:	1e5a      	subs	r2, r3, #1
 8006942:	693b      	ldr	r3, [r7, #16]
 8006944:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800694a:	693b      	ldr	r3, [r7, #16]
 800694c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800694e:	429a      	cmp	r2, r3
 8006950:	d02c      	beq.n	80069ac <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006956:	2b00      	cmp	r3, #0
 8006958:	d128      	bne.n	80069ac <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	3304      	adds	r3, #4
 800695e:	4618      	mov	r0, r3
 8006960:	f7fe fb9a 	bl	8005098 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006968:	693b      	ldr	r3, [r7, #16]
 800696a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006970:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006974:	693b      	ldr	r3, [r7, #16]
 8006976:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800697c:	4b0f      	ldr	r3, [pc, #60]	@ (80069bc <xTaskPriorityDisinherit+0xd8>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	429a      	cmp	r2, r3
 8006982:	d903      	bls.n	800698c <xTaskPriorityDisinherit+0xa8>
 8006984:	693b      	ldr	r3, [r7, #16]
 8006986:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006988:	4a0c      	ldr	r2, [pc, #48]	@ (80069bc <xTaskPriorityDisinherit+0xd8>)
 800698a:	6013      	str	r3, [r2, #0]
 800698c:	693b      	ldr	r3, [r7, #16]
 800698e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006990:	4613      	mov	r3, r2
 8006992:	009b      	lsls	r3, r3, #2
 8006994:	4413      	add	r3, r2
 8006996:	009b      	lsls	r3, r3, #2
 8006998:	4a09      	ldr	r2, [pc, #36]	@ (80069c0 <xTaskPriorityDisinherit+0xdc>)
 800699a:	441a      	add	r2, r3
 800699c:	693b      	ldr	r3, [r7, #16]
 800699e:	3304      	adds	r3, #4
 80069a0:	4619      	mov	r1, r3
 80069a2:	4610      	mov	r0, r2
 80069a4:	f7fe fb1d 	bl	8004fe2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80069a8:	2301      	movs	r3, #1
 80069aa:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80069ac:	697b      	ldr	r3, [r7, #20]
	}
 80069ae:	4618      	mov	r0, r3
 80069b0:	3718      	adds	r7, #24
 80069b2:	46bd      	mov	sp, r7
 80069b4:	bd80      	pop	{r7, pc}
 80069b6:	bf00      	nop
 80069b8:	200008f0 	.word	0x200008f0
 80069bc:	20000dcc 	.word	0x20000dcc
 80069c0:	200008f4 	.word	0x200008f4

080069c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b084      	sub	sp, #16
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069ce:	4b21      	ldr	r3, [pc, #132]	@ (8006a54 <prvAddCurrentTaskToDelayedList+0x90>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069d4:	4b20      	ldr	r3, [pc, #128]	@ (8006a58 <prvAddCurrentTaskToDelayedList+0x94>)
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	3304      	adds	r3, #4
 80069da:	4618      	mov	r0, r3
 80069dc:	f7fe fb5c 	bl	8005098 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069e0:	687b      	ldr	r3, [r7, #4]
 80069e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069e6:	d10a      	bne.n	80069fe <prvAddCurrentTaskToDelayedList+0x3a>
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d007      	beq.n	80069fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069ee:	4b1a      	ldr	r3, [pc, #104]	@ (8006a58 <prvAddCurrentTaskToDelayedList+0x94>)
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	3304      	adds	r3, #4
 80069f4:	4619      	mov	r1, r3
 80069f6:	4819      	ldr	r0, [pc, #100]	@ (8006a5c <prvAddCurrentTaskToDelayedList+0x98>)
 80069f8:	f7fe faf3 	bl	8004fe2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069fc:	e026      	b.n	8006a4c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	4413      	add	r3, r2
 8006a04:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a06:	4b14      	ldr	r3, [pc, #80]	@ (8006a58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	68ba      	ldr	r2, [r7, #8]
 8006a0c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006a0e:	68ba      	ldr	r2, [r7, #8]
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	429a      	cmp	r2, r3
 8006a14:	d209      	bcs.n	8006a2a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a16:	4b12      	ldr	r3, [pc, #72]	@ (8006a60 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b0f      	ldr	r3, [pc, #60]	@ (8006a58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3304      	adds	r3, #4
 8006a20:	4619      	mov	r1, r3
 8006a22:	4610      	mov	r0, r2
 8006a24:	f7fe fb00 	bl	8005028 <vListInsert>
}
 8006a28:	e010      	b.n	8006a4c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8006a64 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a2c:	681a      	ldr	r2, [r3, #0]
 8006a2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006a58 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	3304      	adds	r3, #4
 8006a34:	4619      	mov	r1, r3
 8006a36:	4610      	mov	r0, r2
 8006a38:	f7fe faf6 	bl	8005028 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8006a68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	68ba      	ldr	r2, [r7, #8]
 8006a42:	429a      	cmp	r2, r3
 8006a44:	d202      	bcs.n	8006a4c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a46:	4a08      	ldr	r2, [pc, #32]	@ (8006a68 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a48:	68bb      	ldr	r3, [r7, #8]
 8006a4a:	6013      	str	r3, [r2, #0]
}
 8006a4c:	bf00      	nop
 8006a4e:	3710      	adds	r7, #16
 8006a50:	46bd      	mov	sp, r7
 8006a52:	bd80      	pop	{r7, pc}
 8006a54:	20000dc8 	.word	0x20000dc8
 8006a58:	200008f0 	.word	0x200008f0
 8006a5c:	20000db0 	.word	0x20000db0
 8006a60:	20000d80 	.word	0x20000d80
 8006a64:	20000d7c 	.word	0x20000d7c
 8006a68:	20000de4 	.word	0x20000de4

08006a6c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a6c:	b580      	push	{r7, lr}
 8006a6e:	b08a      	sub	sp, #40	@ 0x28
 8006a70:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006a76:	f000 fb11 	bl	800709c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006a7a:	4b1d      	ldr	r3, [pc, #116]	@ (8006af0 <xTimerCreateTimerTask+0x84>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d021      	beq.n	8006ac6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a82:	2300      	movs	r3, #0
 8006a84:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a86:	2300      	movs	r3, #0
 8006a88:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006a8a:	1d3a      	adds	r2, r7, #4
 8006a8c:	f107 0108 	add.w	r1, r7, #8
 8006a90:	f107 030c 	add.w	r3, r7, #12
 8006a94:	4618      	mov	r0, r3
 8006a96:	f7fe fa5f 	bl	8004f58 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a9a:	6879      	ldr	r1, [r7, #4]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	68fa      	ldr	r2, [r7, #12]
 8006aa0:	9202      	str	r2, [sp, #8]
 8006aa2:	9301      	str	r3, [sp, #4]
 8006aa4:	2302      	movs	r3, #2
 8006aa6:	9300      	str	r3, [sp, #0]
 8006aa8:	2300      	movs	r3, #0
 8006aaa:	460a      	mov	r2, r1
 8006aac:	4911      	ldr	r1, [pc, #68]	@ (8006af4 <xTimerCreateTimerTask+0x88>)
 8006aae:	4812      	ldr	r0, [pc, #72]	@ (8006af8 <xTimerCreateTimerTask+0x8c>)
 8006ab0:	f7ff f8d2 	bl	8005c58 <xTaskCreateStatic>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	4a11      	ldr	r2, [pc, #68]	@ (8006afc <xTimerCreateTimerTask+0x90>)
 8006ab8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006aba:	4b10      	ldr	r3, [pc, #64]	@ (8006afc <xTimerCreateTimerTask+0x90>)
 8006abc:	681b      	ldr	r3, [r3, #0]
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d001      	beq.n	8006ac6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006ac2:	2301      	movs	r3, #1
 8006ac4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d10b      	bne.n	8006ae4 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006acc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ad0:	f383 8811 	msr	BASEPRI, r3
 8006ad4:	f3bf 8f6f 	isb	sy
 8006ad8:	f3bf 8f4f 	dsb	sy
 8006adc:	613b      	str	r3, [r7, #16]
}
 8006ade:	bf00      	nop
 8006ae0:	bf00      	nop
 8006ae2:	e7fd      	b.n	8006ae0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006ae4:	697b      	ldr	r3, [r7, #20]
}
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	3718      	adds	r7, #24
 8006aea:	46bd      	mov	sp, r7
 8006aec:	bd80      	pop	{r7, pc}
 8006aee:	bf00      	nop
 8006af0:	20000e20 	.word	0x20000e20
 8006af4:	0800834c 	.word	0x0800834c
 8006af8:	08006c39 	.word	0x08006c39
 8006afc:	20000e24 	.word	0x20000e24

08006b00 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b08a      	sub	sp, #40	@ 0x28
 8006b04:	af00      	add	r7, sp, #0
 8006b06:	60f8      	str	r0, [r7, #12]
 8006b08:	60b9      	str	r1, [r7, #8]
 8006b0a:	607a      	str	r2, [r7, #4]
 8006b0c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006b0e:	2300      	movs	r3, #0
 8006b10:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006b12:	68fb      	ldr	r3, [r7, #12]
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	d10b      	bne.n	8006b30 <xTimerGenericCommand+0x30>
	__asm volatile
 8006b18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b1c:	f383 8811 	msr	BASEPRI, r3
 8006b20:	f3bf 8f6f 	isb	sy
 8006b24:	f3bf 8f4f 	dsb	sy
 8006b28:	623b      	str	r3, [r7, #32]
}
 8006b2a:	bf00      	nop
 8006b2c:	bf00      	nop
 8006b2e:	e7fd      	b.n	8006b2c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006b30:	4b19      	ldr	r3, [pc, #100]	@ (8006b98 <xTimerGenericCommand+0x98>)
 8006b32:	681b      	ldr	r3, [r3, #0]
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	d02a      	beq.n	8006b8e <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b38:	68bb      	ldr	r3, [r7, #8]
 8006b3a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b44:	68bb      	ldr	r3, [r7, #8]
 8006b46:	2b05      	cmp	r3, #5
 8006b48:	dc18      	bgt.n	8006b7c <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b4a:	f7ff fead 	bl	80068a8 <xTaskGetSchedulerState>
 8006b4e:	4603      	mov	r3, r0
 8006b50:	2b02      	cmp	r3, #2
 8006b52:	d109      	bne.n	8006b68 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b54:	4b10      	ldr	r3, [pc, #64]	@ (8006b98 <xTimerGenericCommand+0x98>)
 8006b56:	6818      	ldr	r0, [r3, #0]
 8006b58:	f107 0110 	add.w	r1, r7, #16
 8006b5c:	2300      	movs	r3, #0
 8006b5e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b60:	f7fe fc0a 	bl	8005378 <xQueueGenericSend>
 8006b64:	6278      	str	r0, [r7, #36]	@ 0x24
 8006b66:	e012      	b.n	8006b8e <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b68:	4b0b      	ldr	r3, [pc, #44]	@ (8006b98 <xTimerGenericCommand+0x98>)
 8006b6a:	6818      	ldr	r0, [r3, #0]
 8006b6c:	f107 0110 	add.w	r1, r7, #16
 8006b70:	2300      	movs	r3, #0
 8006b72:	2200      	movs	r2, #0
 8006b74:	f7fe fc00 	bl	8005378 <xQueueGenericSend>
 8006b78:	6278      	str	r0, [r7, #36]	@ 0x24
 8006b7a:	e008      	b.n	8006b8e <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b7c:	4b06      	ldr	r3, [pc, #24]	@ (8006b98 <xTimerGenericCommand+0x98>)
 8006b7e:	6818      	ldr	r0, [r3, #0]
 8006b80:	f107 0110 	add.w	r1, r7, #16
 8006b84:	2300      	movs	r3, #0
 8006b86:	683a      	ldr	r2, [r7, #0]
 8006b88:	f7fe fcf8 	bl	800557c <xQueueGenericSendFromISR>
 8006b8c:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3728      	adds	r7, #40	@ 0x28
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	20000e20 	.word	0x20000e20

08006b9c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b088      	sub	sp, #32
 8006ba0:	af02      	add	r7, sp, #8
 8006ba2:	6078      	str	r0, [r7, #4]
 8006ba4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ba6:	4b23      	ldr	r3, [pc, #140]	@ (8006c34 <prvProcessExpiredTimer+0x98>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	68db      	ldr	r3, [r3, #12]
 8006bae:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	3304      	adds	r3, #4
 8006bb4:	4618      	mov	r0, r3
 8006bb6:	f7fe fa6f 	bl	8005098 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006bba:	697b      	ldr	r3, [r7, #20]
 8006bbc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006bc0:	f003 0304 	and.w	r3, r3, #4
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d023      	beq.n	8006c10 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	699a      	ldr	r2, [r3, #24]
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	18d1      	adds	r1, r2, r3
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	683a      	ldr	r2, [r7, #0]
 8006bd4:	6978      	ldr	r0, [r7, #20]
 8006bd6:	f000 f8d3 	bl	8006d80 <prvInsertTimerInActiveList>
 8006bda:	4603      	mov	r3, r0
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d020      	beq.n	8006c22 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006be0:	2300      	movs	r3, #0
 8006be2:	9300      	str	r3, [sp, #0]
 8006be4:	2300      	movs	r3, #0
 8006be6:	687a      	ldr	r2, [r7, #4]
 8006be8:	2100      	movs	r1, #0
 8006bea:	6978      	ldr	r0, [r7, #20]
 8006bec:	f7ff ff88 	bl	8006b00 <xTimerGenericCommand>
 8006bf0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d114      	bne.n	8006c22 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006bf8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bfc:	f383 8811 	msr	BASEPRI, r3
 8006c00:	f3bf 8f6f 	isb	sy
 8006c04:	f3bf 8f4f 	dsb	sy
 8006c08:	60fb      	str	r3, [r7, #12]
}
 8006c0a:	bf00      	nop
 8006c0c:	bf00      	nop
 8006c0e:	e7fd      	b.n	8006c0c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c10:	697b      	ldr	r3, [r7, #20]
 8006c12:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c16:	f023 0301 	bic.w	r3, r3, #1
 8006c1a:	b2da      	uxtb	r2, r3
 8006c1c:	697b      	ldr	r3, [r7, #20]
 8006c1e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	6a1b      	ldr	r3, [r3, #32]
 8006c26:	6978      	ldr	r0, [r7, #20]
 8006c28:	4798      	blx	r3
}
 8006c2a:	bf00      	nop
 8006c2c:	3718      	adds	r7, #24
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop
 8006c34:	20000e18 	.word	0x20000e18

08006c38 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006c38:	b580      	push	{r7, lr}
 8006c3a:	b084      	sub	sp, #16
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c40:	f107 0308 	add.w	r3, r7, #8
 8006c44:	4618      	mov	r0, r3
 8006c46:	f000 f859 	bl	8006cfc <prvGetNextExpireTime>
 8006c4a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	4619      	mov	r1, r3
 8006c50:	68f8      	ldr	r0, [r7, #12]
 8006c52:	f000 f805 	bl	8006c60 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c56:	f000 f8d5 	bl	8006e04 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c5a:	bf00      	nop
 8006c5c:	e7f0      	b.n	8006c40 <prvTimerTask+0x8>
	...

08006c60 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b084      	sub	sp, #16
 8006c64:	af00      	add	r7, sp, #0
 8006c66:	6078      	str	r0, [r7, #4]
 8006c68:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c6a:	f7ff fa39 	bl	80060e0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c6e:	f107 0308 	add.w	r3, r7, #8
 8006c72:	4618      	mov	r0, r3
 8006c74:	f000 f864 	bl	8006d40 <prvSampleTimeNow>
 8006c78:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c7a:	68bb      	ldr	r3, [r7, #8]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d130      	bne.n	8006ce2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d10a      	bne.n	8006c9c <prvProcessTimerOrBlockTask+0x3c>
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d806      	bhi.n	8006c9c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c8e:	f7ff fa35 	bl	80060fc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c92:	68f9      	ldr	r1, [r7, #12]
 8006c94:	6878      	ldr	r0, [r7, #4]
 8006c96:	f7ff ff81 	bl	8006b9c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006c9a:	e024      	b.n	8006ce6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d008      	beq.n	8006cb4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006ca2:	4b13      	ldr	r3, [pc, #76]	@ (8006cf0 <prvProcessTimerOrBlockTask+0x90>)
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	2b00      	cmp	r3, #0
 8006caa:	d101      	bne.n	8006cb0 <prvProcessTimerOrBlockTask+0x50>
 8006cac:	2301      	movs	r3, #1
 8006cae:	e000      	b.n	8006cb2 <prvProcessTimerOrBlockTask+0x52>
 8006cb0:	2300      	movs	r3, #0
 8006cb2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006cb4:	4b0f      	ldr	r3, [pc, #60]	@ (8006cf4 <prvProcessTimerOrBlockTask+0x94>)
 8006cb6:	6818      	ldr	r0, [r3, #0]
 8006cb8:	687a      	ldr	r2, [r7, #4]
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	1ad3      	subs	r3, r2, r3
 8006cbe:	683a      	ldr	r2, [r7, #0]
 8006cc0:	4619      	mov	r1, r3
 8006cc2:	f7fe ff95 	bl	8005bf0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006cc6:	f7ff fa19 	bl	80060fc <xTaskResumeAll>
 8006cca:	4603      	mov	r3, r0
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10a      	bne.n	8006ce6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006cd0:	4b09      	ldr	r3, [pc, #36]	@ (8006cf8 <prvProcessTimerOrBlockTask+0x98>)
 8006cd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cd6:	601a      	str	r2, [r3, #0]
 8006cd8:	f3bf 8f4f 	dsb	sy
 8006cdc:	f3bf 8f6f 	isb	sy
}
 8006ce0:	e001      	b.n	8006ce6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006ce2:	f7ff fa0b 	bl	80060fc <xTaskResumeAll>
}
 8006ce6:	bf00      	nop
 8006ce8:	3710      	adds	r7, #16
 8006cea:	46bd      	mov	sp, r7
 8006cec:	bd80      	pop	{r7, pc}
 8006cee:	bf00      	nop
 8006cf0:	20000e1c 	.word	0x20000e1c
 8006cf4:	20000e20 	.word	0x20000e20
 8006cf8:	e000ed04 	.word	0xe000ed04

08006cfc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006cfc:	b480      	push	{r7}
 8006cfe:	b085      	sub	sp, #20
 8006d00:	af00      	add	r7, sp, #0
 8006d02:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d04:	4b0d      	ldr	r3, [pc, #52]	@ (8006d3c <prvGetNextExpireTime+0x40>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	2b00      	cmp	r3, #0
 8006d0c:	d101      	bne.n	8006d12 <prvGetNextExpireTime+0x16>
 8006d0e:	2201      	movs	r2, #1
 8006d10:	e000      	b.n	8006d14 <prvGetNextExpireTime+0x18>
 8006d12:	2200      	movs	r2, #0
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d105      	bne.n	8006d2c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d20:	4b06      	ldr	r3, [pc, #24]	@ (8006d3c <prvGetNextExpireTime+0x40>)
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	68db      	ldr	r3, [r3, #12]
 8006d26:	681b      	ldr	r3, [r3, #0]
 8006d28:	60fb      	str	r3, [r7, #12]
 8006d2a:	e001      	b.n	8006d30 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d30:	68fb      	ldr	r3, [r7, #12]
}
 8006d32:	4618      	mov	r0, r3
 8006d34:	3714      	adds	r7, #20
 8006d36:	46bd      	mov	sp, r7
 8006d38:	bc80      	pop	{r7}
 8006d3a:	4770      	bx	lr
 8006d3c:	20000e18 	.word	0x20000e18

08006d40 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b084      	sub	sp, #16
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006d48:	f7ff fa76 	bl	8006238 <xTaskGetTickCount>
 8006d4c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d4e:	4b0b      	ldr	r3, [pc, #44]	@ (8006d7c <prvSampleTimeNow+0x3c>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	68fa      	ldr	r2, [r7, #12]
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d205      	bcs.n	8006d64 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d58:	f000 f93a 	bl	8006fd0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2201      	movs	r2, #1
 8006d60:	601a      	str	r2, [r3, #0]
 8006d62:	e002      	b.n	8006d6a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d6a:	4a04      	ldr	r2, [pc, #16]	@ (8006d7c <prvSampleTimeNow+0x3c>)
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d70:	68fb      	ldr	r3, [r7, #12]
}
 8006d72:	4618      	mov	r0, r3
 8006d74:	3710      	adds	r7, #16
 8006d76:	46bd      	mov	sp, r7
 8006d78:	bd80      	pop	{r7, pc}
 8006d7a:	bf00      	nop
 8006d7c:	20000e28 	.word	0x20000e28

08006d80 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0
 8006d86:	60f8      	str	r0, [r7, #12]
 8006d88:	60b9      	str	r1, [r7, #8]
 8006d8a:	607a      	str	r2, [r7, #4]
 8006d8c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d8e:	2300      	movs	r3, #0
 8006d90:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	68ba      	ldr	r2, [r7, #8]
 8006d96:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	68fa      	ldr	r2, [r7, #12]
 8006d9c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	429a      	cmp	r2, r3
 8006da4:	d812      	bhi.n	8006dcc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	1ad2      	subs	r2, r2, r3
 8006dac:	68fb      	ldr	r3, [r7, #12]
 8006dae:	699b      	ldr	r3, [r3, #24]
 8006db0:	429a      	cmp	r2, r3
 8006db2:	d302      	bcc.n	8006dba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006db4:	2301      	movs	r3, #1
 8006db6:	617b      	str	r3, [r7, #20]
 8006db8:	e01b      	b.n	8006df2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006dba:	4b10      	ldr	r3, [pc, #64]	@ (8006dfc <prvInsertTimerInActiveList+0x7c>)
 8006dbc:	681a      	ldr	r2, [r3, #0]
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	4619      	mov	r1, r3
 8006dc4:	4610      	mov	r0, r2
 8006dc6:	f7fe f92f 	bl	8005028 <vListInsert>
 8006dca:	e012      	b.n	8006df2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006dcc:	687a      	ldr	r2, [r7, #4]
 8006dce:	683b      	ldr	r3, [r7, #0]
 8006dd0:	429a      	cmp	r2, r3
 8006dd2:	d206      	bcs.n	8006de2 <prvInsertTimerInActiveList+0x62>
 8006dd4:	68ba      	ldr	r2, [r7, #8]
 8006dd6:	683b      	ldr	r3, [r7, #0]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d302      	bcc.n	8006de2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006ddc:	2301      	movs	r3, #1
 8006dde:	617b      	str	r3, [r7, #20]
 8006de0:	e007      	b.n	8006df2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006de2:	4b07      	ldr	r3, [pc, #28]	@ (8006e00 <prvInsertTimerInActiveList+0x80>)
 8006de4:	681a      	ldr	r2, [r3, #0]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	3304      	adds	r3, #4
 8006dea:	4619      	mov	r1, r3
 8006dec:	4610      	mov	r0, r2
 8006dee:	f7fe f91b 	bl	8005028 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006df2:	697b      	ldr	r3, [r7, #20]
}
 8006df4:	4618      	mov	r0, r3
 8006df6:	3718      	adds	r7, #24
 8006df8:	46bd      	mov	sp, r7
 8006dfa:	bd80      	pop	{r7, pc}
 8006dfc:	20000e1c 	.word	0x20000e1c
 8006e00:	20000e18 	.word	0x20000e18

08006e04 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006e04:	b580      	push	{r7, lr}
 8006e06:	b08e      	sub	sp, #56	@ 0x38
 8006e08:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006e0a:	e0ce      	b.n	8006faa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	da19      	bge.n	8006e46 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006e12:	1d3b      	adds	r3, r7, #4
 8006e14:	3304      	adds	r3, #4
 8006e16:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d10b      	bne.n	8006e36 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e22:	f383 8811 	msr	BASEPRI, r3
 8006e26:	f3bf 8f6f 	isb	sy
 8006e2a:	f3bf 8f4f 	dsb	sy
 8006e2e:	61fb      	str	r3, [r7, #28]
}
 8006e30:	bf00      	nop
 8006e32:	bf00      	nop
 8006e34:	e7fd      	b.n	8006e32 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e3c:	6850      	ldr	r0, [r2, #4]
 8006e3e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006e40:	6892      	ldr	r2, [r2, #8]
 8006e42:	4611      	mov	r1, r2
 8006e44:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	f2c0 80ae 	blt.w	8006faa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e52:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e54:	695b      	ldr	r3, [r3, #20]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d004      	beq.n	8006e64 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e5a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	4618      	mov	r0, r3
 8006e60:	f7fe f91a 	bl	8005098 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e64:	463b      	mov	r3, r7
 8006e66:	4618      	mov	r0, r3
 8006e68:	f7ff ff6a 	bl	8006d40 <prvSampleTimeNow>
 8006e6c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2b09      	cmp	r3, #9
 8006e72:	f200 8097 	bhi.w	8006fa4 <prvProcessReceivedCommands+0x1a0>
 8006e76:	a201      	add	r2, pc, #4	@ (adr r2, 8006e7c <prvProcessReceivedCommands+0x78>)
 8006e78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e7c:	08006ea5 	.word	0x08006ea5
 8006e80:	08006ea5 	.word	0x08006ea5
 8006e84:	08006ea5 	.word	0x08006ea5
 8006e88:	08006f1b 	.word	0x08006f1b
 8006e8c:	08006f2f 	.word	0x08006f2f
 8006e90:	08006f7b 	.word	0x08006f7b
 8006e94:	08006ea5 	.word	0x08006ea5
 8006e98:	08006ea5 	.word	0x08006ea5
 8006e9c:	08006f1b 	.word	0x08006f1b
 8006ea0:	08006f2f 	.word	0x08006f2f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ea6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006eaa:	f043 0301 	orr.w	r3, r3, #1
 8006eae:	b2da      	uxtb	r2, r3
 8006eb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eb2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006eb6:	68ba      	ldr	r2, [r7, #8]
 8006eb8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006eba:	699b      	ldr	r3, [r3, #24]
 8006ebc:	18d1      	adds	r1, r2, r3
 8006ebe:	68bb      	ldr	r3, [r7, #8]
 8006ec0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006ec2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ec4:	f7ff ff5c 	bl	8006d80 <prvInsertTimerInActiveList>
 8006ec8:	4603      	mov	r3, r0
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d06c      	beq.n	8006fa8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ece:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed0:	6a1b      	ldr	r3, [r3, #32]
 8006ed2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ed4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ed6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ed8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006edc:	f003 0304 	and.w	r3, r3, #4
 8006ee0:	2b00      	cmp	r3, #0
 8006ee2:	d061      	beq.n	8006fa8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ee4:	68ba      	ldr	r2, [r7, #8]
 8006ee6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ee8:	699b      	ldr	r3, [r3, #24]
 8006eea:	441a      	add	r2, r3
 8006eec:	2300      	movs	r3, #0
 8006eee:	9300      	str	r3, [sp, #0]
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	2100      	movs	r1, #0
 8006ef4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006ef6:	f7ff fe03 	bl	8006b00 <xTimerGenericCommand>
 8006efa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006efc:	6a3b      	ldr	r3, [r7, #32]
 8006efe:	2b00      	cmp	r3, #0
 8006f00:	d152      	bne.n	8006fa8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f06:	f383 8811 	msr	BASEPRI, r3
 8006f0a:	f3bf 8f6f 	isb	sy
 8006f0e:	f3bf 8f4f 	dsb	sy
 8006f12:	61bb      	str	r3, [r7, #24]
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop
 8006f18:	e7fd      	b.n	8006f16 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f1c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f20:	f023 0301 	bic.w	r3, r3, #1
 8006f24:	b2da      	uxtb	r2, r3
 8006f26:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f28:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006f2c:	e03d      	b.n	8006faa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f30:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f34:	f043 0301 	orr.w	r3, r3, #1
 8006f38:	b2da      	uxtb	r2, r3
 8006f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f3c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f40:	68ba      	ldr	r2, [r7, #8]
 8006f42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f44:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f48:	699b      	ldr	r3, [r3, #24]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10b      	bne.n	8006f66 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	617b      	str	r3, [r7, #20]
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	e7fd      	b.n	8006f62 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f68:	699a      	ldr	r2, [r3, #24]
 8006f6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f6c:	18d1      	adds	r1, r2, r3
 8006f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f70:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f74:	f7ff ff04 	bl	8006d80 <prvInsertTimerInActiveList>
					break;
 8006f78:	e017      	b.n	8006faa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f7c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f80:	f003 0302 	and.w	r3, r3, #2
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	d103      	bne.n	8006f90 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006f88:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f8a:	f000 fb87 	bl	800769c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f8e:	e00c      	b.n	8006faa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f92:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f96:	f023 0301 	bic.w	r3, r3, #1
 8006f9a:	b2da      	uxtb	r2, r3
 8006f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f9e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006fa2:	e002      	b.n	8006faa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006fa4:	bf00      	nop
 8006fa6:	e000      	b.n	8006faa <prvProcessReceivedCommands+0x1a6>
					break;
 8006fa8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006faa:	4b08      	ldr	r3, [pc, #32]	@ (8006fcc <prvProcessReceivedCommands+0x1c8>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	1d39      	adds	r1, r7, #4
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7fe fb80 	bl	80056b8 <xQueueReceive>
 8006fb8:	4603      	mov	r3, r0
 8006fba:	2b00      	cmp	r3, #0
 8006fbc:	f47f af26 	bne.w	8006e0c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006fc0:	bf00      	nop
 8006fc2:	bf00      	nop
 8006fc4:	3730      	adds	r7, #48	@ 0x30
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	bd80      	pop	{r7, pc}
 8006fca:	bf00      	nop
 8006fcc:	20000e20 	.word	0x20000e20

08006fd0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006fd0:	b580      	push	{r7, lr}
 8006fd2:	b088      	sub	sp, #32
 8006fd4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fd6:	e049      	b.n	800706c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fd8:	4b2e      	ldr	r3, [pc, #184]	@ (8007094 <prvSwitchTimerLists+0xc4>)
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	68db      	ldr	r3, [r3, #12]
 8006fde:	681b      	ldr	r3, [r3, #0]
 8006fe0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fe2:	4b2c      	ldr	r3, [pc, #176]	@ (8007094 <prvSwitchTimerLists+0xc4>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	68db      	ldr	r3, [r3, #12]
 8006fe8:	68db      	ldr	r3, [r3, #12]
 8006fea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fec:	68fb      	ldr	r3, [r7, #12]
 8006fee:	3304      	adds	r3, #4
 8006ff0:	4618      	mov	r0, r3
 8006ff2:	f7fe f851 	bl	8005098 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006ff6:	68fb      	ldr	r3, [r7, #12]
 8006ff8:	6a1b      	ldr	r3, [r3, #32]
 8006ffa:	68f8      	ldr	r0, [r7, #12]
 8006ffc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007004:	f003 0304 	and.w	r3, r3, #4
 8007008:	2b00      	cmp	r3, #0
 800700a:	d02f      	beq.n	800706c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	699b      	ldr	r3, [r3, #24]
 8007010:	693a      	ldr	r2, [r7, #16]
 8007012:	4413      	add	r3, r2
 8007014:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007016:	68ba      	ldr	r2, [r7, #8]
 8007018:	693b      	ldr	r3, [r7, #16]
 800701a:	429a      	cmp	r2, r3
 800701c:	d90e      	bls.n	800703c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	68ba      	ldr	r2, [r7, #8]
 8007022:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	68fa      	ldr	r2, [r7, #12]
 8007028:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800702a:	4b1a      	ldr	r3, [pc, #104]	@ (8007094 <prvSwitchTimerLists+0xc4>)
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	3304      	adds	r3, #4
 8007032:	4619      	mov	r1, r3
 8007034:	4610      	mov	r0, r2
 8007036:	f7fd fff7 	bl	8005028 <vListInsert>
 800703a:	e017      	b.n	800706c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800703c:	2300      	movs	r3, #0
 800703e:	9300      	str	r3, [sp, #0]
 8007040:	2300      	movs	r3, #0
 8007042:	693a      	ldr	r2, [r7, #16]
 8007044:	2100      	movs	r1, #0
 8007046:	68f8      	ldr	r0, [r7, #12]
 8007048:	f7ff fd5a 	bl	8006b00 <xTimerGenericCommand>
 800704c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	2b00      	cmp	r3, #0
 8007052:	d10b      	bne.n	800706c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007054:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007058:	f383 8811 	msr	BASEPRI, r3
 800705c:	f3bf 8f6f 	isb	sy
 8007060:	f3bf 8f4f 	dsb	sy
 8007064:	603b      	str	r3, [r7, #0]
}
 8007066:	bf00      	nop
 8007068:	bf00      	nop
 800706a:	e7fd      	b.n	8007068 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800706c:	4b09      	ldr	r3, [pc, #36]	@ (8007094 <prvSwitchTimerLists+0xc4>)
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	2b00      	cmp	r3, #0
 8007074:	d1b0      	bne.n	8006fd8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007076:	4b07      	ldr	r3, [pc, #28]	@ (8007094 <prvSwitchTimerLists+0xc4>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800707c:	4b06      	ldr	r3, [pc, #24]	@ (8007098 <prvSwitchTimerLists+0xc8>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a04      	ldr	r2, [pc, #16]	@ (8007094 <prvSwitchTimerLists+0xc4>)
 8007082:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007084:	4a04      	ldr	r2, [pc, #16]	@ (8007098 <prvSwitchTimerLists+0xc8>)
 8007086:	697b      	ldr	r3, [r7, #20]
 8007088:	6013      	str	r3, [r2, #0]
}
 800708a:	bf00      	nop
 800708c:	3718      	adds	r7, #24
 800708e:	46bd      	mov	sp, r7
 8007090:	bd80      	pop	{r7, pc}
 8007092:	bf00      	nop
 8007094:	20000e18 	.word	0x20000e18
 8007098:	20000e1c 	.word	0x20000e1c

0800709c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800709c:	b580      	push	{r7, lr}
 800709e:	b082      	sub	sp, #8
 80070a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80070a2:	f000 f92b 	bl	80072fc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80070a6:	4b15      	ldr	r3, [pc, #84]	@ (80070fc <prvCheckForValidListAndQueue+0x60>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d120      	bne.n	80070f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80070ae:	4814      	ldr	r0, [pc, #80]	@ (8007100 <prvCheckForValidListAndQueue+0x64>)
 80070b0:	f7fd ff6c 	bl	8004f8c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80070b4:	4813      	ldr	r0, [pc, #76]	@ (8007104 <prvCheckForValidListAndQueue+0x68>)
 80070b6:	f7fd ff69 	bl	8004f8c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80070ba:	4b13      	ldr	r3, [pc, #76]	@ (8007108 <prvCheckForValidListAndQueue+0x6c>)
 80070bc:	4a10      	ldr	r2, [pc, #64]	@ (8007100 <prvCheckForValidListAndQueue+0x64>)
 80070be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80070c0:	4b12      	ldr	r3, [pc, #72]	@ (800710c <prvCheckForValidListAndQueue+0x70>)
 80070c2:	4a10      	ldr	r2, [pc, #64]	@ (8007104 <prvCheckForValidListAndQueue+0x68>)
 80070c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80070c6:	2300      	movs	r3, #0
 80070c8:	9300      	str	r3, [sp, #0]
 80070ca:	4b11      	ldr	r3, [pc, #68]	@ (8007110 <prvCheckForValidListAndQueue+0x74>)
 80070cc:	4a11      	ldr	r2, [pc, #68]	@ (8007114 <prvCheckForValidListAndQueue+0x78>)
 80070ce:	2110      	movs	r1, #16
 80070d0:	200a      	movs	r0, #10
 80070d2:	f7fe f875 	bl	80051c0 <xQueueGenericCreateStatic>
 80070d6:	4603      	mov	r3, r0
 80070d8:	4a08      	ldr	r2, [pc, #32]	@ (80070fc <prvCheckForValidListAndQueue+0x60>)
 80070da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80070dc:	4b07      	ldr	r3, [pc, #28]	@ (80070fc <prvCheckForValidListAndQueue+0x60>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d005      	beq.n	80070f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80070e4:	4b05      	ldr	r3, [pc, #20]	@ (80070fc <prvCheckForValidListAndQueue+0x60>)
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	490b      	ldr	r1, [pc, #44]	@ (8007118 <prvCheckForValidListAndQueue+0x7c>)
 80070ea:	4618      	mov	r0, r3
 80070ec:	f7fe fd58 	bl	8005ba0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070f0:	f000 f934 	bl	800735c <vPortExitCritical>
}
 80070f4:	bf00      	nop
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	20000e20 	.word	0x20000e20
 8007100:	20000df0 	.word	0x20000df0
 8007104:	20000e04 	.word	0x20000e04
 8007108:	20000e18 	.word	0x20000e18
 800710c:	20000e1c 	.word	0x20000e1c
 8007110:	20000ecc 	.word	0x20000ecc
 8007114:	20000e2c 	.word	0x20000e2c
 8007118:	08008354 	.word	0x08008354

0800711c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800711c:	b480      	push	{r7}
 800711e:	b085      	sub	sp, #20
 8007120:	af00      	add	r7, sp, #0
 8007122:	60f8      	str	r0, [r7, #12]
 8007124:	60b9      	str	r1, [r7, #8]
 8007126:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	3b04      	subs	r3, #4
 800712c:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007134:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3b04      	subs	r3, #4
 800713a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800713c:	68bb      	ldr	r3, [r7, #8]
 800713e:	f023 0201 	bic.w	r2, r3, #1
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	3b04      	subs	r3, #4
 800714a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800714c:	4a08      	ldr	r2, [pc, #32]	@ (8007170 <pxPortInitialiseStack+0x54>)
 800714e:	68fb      	ldr	r3, [r7, #12]
 8007150:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007152:	68fb      	ldr	r3, [r7, #12]
 8007154:	3b14      	subs	r3, #20
 8007156:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007158:	687a      	ldr	r2, [r7, #4]
 800715a:	68fb      	ldr	r3, [r7, #12]
 800715c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800715e:	68fb      	ldr	r3, [r7, #12]
 8007160:	3b20      	subs	r3, #32
 8007162:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007164:	68fb      	ldr	r3, [r7, #12]
}
 8007166:	4618      	mov	r0, r3
 8007168:	3714      	adds	r7, #20
 800716a:	46bd      	mov	sp, r7
 800716c:	bc80      	pop	{r7}
 800716e:	4770      	bx	lr
 8007170:	08007175 	.word	0x08007175

08007174 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007174:	b480      	push	{r7}
 8007176:	b085      	sub	sp, #20
 8007178:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 800717a:	2300      	movs	r3, #0
 800717c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800717e:	4b12      	ldr	r3, [pc, #72]	@ (80071c8 <prvTaskExitError+0x54>)
 8007180:	681b      	ldr	r3, [r3, #0]
 8007182:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007186:	d00b      	beq.n	80071a0 <prvTaskExitError+0x2c>
	__asm volatile
 8007188:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800718c:	f383 8811 	msr	BASEPRI, r3
 8007190:	f3bf 8f6f 	isb	sy
 8007194:	f3bf 8f4f 	dsb	sy
 8007198:	60fb      	str	r3, [r7, #12]
}
 800719a:	bf00      	nop
 800719c:	bf00      	nop
 800719e:	e7fd      	b.n	800719c <prvTaskExitError+0x28>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	60bb      	str	r3, [r7, #8]
}
 80071b2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80071b4:	bf00      	nop
 80071b6:	687b      	ldr	r3, [r7, #4]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d0fc      	beq.n	80071b6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071bc:	bf00      	nop
 80071be:	bf00      	nop
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bc80      	pop	{r7}
 80071c6:	4770      	bx	lr
 80071c8:	2000000c 	.word	0x2000000c
 80071cc:	00000000 	.word	0x00000000

080071d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071d0:	4b07      	ldr	r3, [pc, #28]	@ (80071f0 <pxCurrentTCBConst2>)
 80071d2:	6819      	ldr	r1, [r3, #0]
 80071d4:	6808      	ldr	r0, [r1, #0]
 80071d6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80071da:	f380 8809 	msr	PSP, r0
 80071de:	f3bf 8f6f 	isb	sy
 80071e2:	f04f 0000 	mov.w	r0, #0
 80071e6:	f380 8811 	msr	BASEPRI, r0
 80071ea:	f04e 0e0d 	orr.w	lr, lr, #13
 80071ee:	4770      	bx	lr

080071f0 <pxCurrentTCBConst2>:
 80071f0:	200008f0 	.word	0x200008f0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071f4:	bf00      	nop
 80071f6:	bf00      	nop

080071f8 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 80071f8:	4806      	ldr	r0, [pc, #24]	@ (8007214 <prvPortStartFirstTask+0x1c>)
 80071fa:	6800      	ldr	r0, [r0, #0]
 80071fc:	6800      	ldr	r0, [r0, #0]
 80071fe:	f380 8808 	msr	MSP, r0
 8007202:	b662      	cpsie	i
 8007204:	b661      	cpsie	f
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	f3bf 8f6f 	isb	sy
 800720e:	df00      	svc	0
 8007210:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007212:	bf00      	nop
 8007214:	e000ed08 	.word	0xe000ed08

08007218 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800721e:	4b32      	ldr	r3, [pc, #200]	@ (80072e8 <xPortStartScheduler+0xd0>)
 8007220:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007222:	68fb      	ldr	r3, [r7, #12]
 8007224:	781b      	ldrb	r3, [r3, #0]
 8007226:	b2db      	uxtb	r3, r3
 8007228:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800722a:	68fb      	ldr	r3, [r7, #12]
 800722c:	22ff      	movs	r2, #255	@ 0xff
 800722e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007230:	68fb      	ldr	r3, [r7, #12]
 8007232:	781b      	ldrb	r3, [r3, #0]
 8007234:	b2db      	uxtb	r3, r3
 8007236:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007238:	78fb      	ldrb	r3, [r7, #3]
 800723a:	b2db      	uxtb	r3, r3
 800723c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007240:	b2da      	uxtb	r2, r3
 8007242:	4b2a      	ldr	r3, [pc, #168]	@ (80072ec <xPortStartScheduler+0xd4>)
 8007244:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007246:	4b2a      	ldr	r3, [pc, #168]	@ (80072f0 <xPortStartScheduler+0xd8>)
 8007248:	2207      	movs	r2, #7
 800724a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800724c:	e009      	b.n	8007262 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800724e:	4b28      	ldr	r3, [pc, #160]	@ (80072f0 <xPortStartScheduler+0xd8>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	3b01      	subs	r3, #1
 8007254:	4a26      	ldr	r2, [pc, #152]	@ (80072f0 <xPortStartScheduler+0xd8>)
 8007256:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007258:	78fb      	ldrb	r3, [r7, #3]
 800725a:	b2db      	uxtb	r3, r3
 800725c:	005b      	lsls	r3, r3, #1
 800725e:	b2db      	uxtb	r3, r3
 8007260:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007262:	78fb      	ldrb	r3, [r7, #3]
 8007264:	b2db      	uxtb	r3, r3
 8007266:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800726a:	2b80      	cmp	r3, #128	@ 0x80
 800726c:	d0ef      	beq.n	800724e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800726e:	4b20      	ldr	r3, [pc, #128]	@ (80072f0 <xPortStartScheduler+0xd8>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f1c3 0307 	rsb	r3, r3, #7
 8007276:	2b04      	cmp	r3, #4
 8007278:	d00b      	beq.n	8007292 <xPortStartScheduler+0x7a>
	__asm volatile
 800727a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800727e:	f383 8811 	msr	BASEPRI, r3
 8007282:	f3bf 8f6f 	isb	sy
 8007286:	f3bf 8f4f 	dsb	sy
 800728a:	60bb      	str	r3, [r7, #8]
}
 800728c:	bf00      	nop
 800728e:	bf00      	nop
 8007290:	e7fd      	b.n	800728e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007292:	4b17      	ldr	r3, [pc, #92]	@ (80072f0 <xPortStartScheduler+0xd8>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	021b      	lsls	r3, r3, #8
 8007298:	4a15      	ldr	r2, [pc, #84]	@ (80072f0 <xPortStartScheduler+0xd8>)
 800729a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800729c:	4b14      	ldr	r3, [pc, #80]	@ (80072f0 <xPortStartScheduler+0xd8>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80072a4:	4a12      	ldr	r2, [pc, #72]	@ (80072f0 <xPortStartScheduler+0xd8>)
 80072a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	b2da      	uxtb	r2, r3
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072b0:	4b10      	ldr	r3, [pc, #64]	@ (80072f4 <xPortStartScheduler+0xdc>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	4a0f      	ldr	r2, [pc, #60]	@ (80072f4 <xPortStartScheduler+0xdc>)
 80072b6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80072ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072bc:	4b0d      	ldr	r3, [pc, #52]	@ (80072f4 <xPortStartScheduler+0xdc>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4a0c      	ldr	r2, [pc, #48]	@ (80072f4 <xPortStartScheduler+0xdc>)
 80072c2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80072c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072c8:	f000 f8b8 	bl	800743c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80072cc:	4b0a      	ldr	r3, [pc, #40]	@ (80072f8 <xPortStartScheduler+0xe0>)
 80072ce:	2200      	movs	r2, #0
 80072d0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80072d2:	f7ff ff91 	bl	80071f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80072d6:	f7ff f877 	bl	80063c8 <vTaskSwitchContext>
	prvTaskExitError();
 80072da:	f7ff ff4b 	bl	8007174 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80072de:	2300      	movs	r3, #0
}
 80072e0:	4618      	mov	r0, r3
 80072e2:	3710      	adds	r7, #16
 80072e4:	46bd      	mov	sp, r7
 80072e6:	bd80      	pop	{r7, pc}
 80072e8:	e000e400 	.word	0xe000e400
 80072ec:	20000f1c 	.word	0x20000f1c
 80072f0:	20000f20 	.word	0x20000f20
 80072f4:	e000ed20 	.word	0xe000ed20
 80072f8:	2000000c 	.word	0x2000000c

080072fc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	607b      	str	r3, [r7, #4]
}
 8007314:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007316:	4b0f      	ldr	r3, [pc, #60]	@ (8007354 <vPortEnterCritical+0x58>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	3301      	adds	r3, #1
 800731c:	4a0d      	ldr	r2, [pc, #52]	@ (8007354 <vPortEnterCritical+0x58>)
 800731e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007320:	4b0c      	ldr	r3, [pc, #48]	@ (8007354 <vPortEnterCritical+0x58>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	2b01      	cmp	r3, #1
 8007326:	d110      	bne.n	800734a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007328:	4b0b      	ldr	r3, [pc, #44]	@ (8007358 <vPortEnterCritical+0x5c>)
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	b2db      	uxtb	r3, r3
 800732e:	2b00      	cmp	r3, #0
 8007330:	d00b      	beq.n	800734a <vPortEnterCritical+0x4e>
	__asm volatile
 8007332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007336:	f383 8811 	msr	BASEPRI, r3
 800733a:	f3bf 8f6f 	isb	sy
 800733e:	f3bf 8f4f 	dsb	sy
 8007342:	603b      	str	r3, [r7, #0]
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop
 8007348:	e7fd      	b.n	8007346 <vPortEnterCritical+0x4a>
	}
}
 800734a:	bf00      	nop
 800734c:	370c      	adds	r7, #12
 800734e:	46bd      	mov	sp, r7
 8007350:	bc80      	pop	{r7}
 8007352:	4770      	bx	lr
 8007354:	2000000c 	.word	0x2000000c
 8007358:	e000ed04 	.word	0xe000ed04

0800735c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800735c:	b480      	push	{r7}
 800735e:	b083      	sub	sp, #12
 8007360:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007362:	4b12      	ldr	r3, [pc, #72]	@ (80073ac <vPortExitCritical+0x50>)
 8007364:	681b      	ldr	r3, [r3, #0]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d10b      	bne.n	8007382 <vPortExitCritical+0x26>
	__asm volatile
 800736a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800736e:	f383 8811 	msr	BASEPRI, r3
 8007372:	f3bf 8f6f 	isb	sy
 8007376:	f3bf 8f4f 	dsb	sy
 800737a:	607b      	str	r3, [r7, #4]
}
 800737c:	bf00      	nop
 800737e:	bf00      	nop
 8007380:	e7fd      	b.n	800737e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007382:	4b0a      	ldr	r3, [pc, #40]	@ (80073ac <vPortExitCritical+0x50>)
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	3b01      	subs	r3, #1
 8007388:	4a08      	ldr	r2, [pc, #32]	@ (80073ac <vPortExitCritical+0x50>)
 800738a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800738c:	4b07      	ldr	r3, [pc, #28]	@ (80073ac <vPortExitCritical+0x50>)
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	2b00      	cmp	r3, #0
 8007392:	d105      	bne.n	80073a0 <vPortExitCritical+0x44>
 8007394:	2300      	movs	r3, #0
 8007396:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	f383 8811 	msr	BASEPRI, r3
}
 800739e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	bc80      	pop	{r7}
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	2000000c 	.word	0x2000000c

080073b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80073b0:	f3ef 8009 	mrs	r0, PSP
 80073b4:	f3bf 8f6f 	isb	sy
 80073b8:	4b0d      	ldr	r3, [pc, #52]	@ (80073f0 <pxCurrentTCBConst>)
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073c0:	6010      	str	r0, [r2, #0]
 80073c2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80073c6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80073ca:	f380 8811 	msr	BASEPRI, r0
 80073ce:	f7fe fffb 	bl	80063c8 <vTaskSwitchContext>
 80073d2:	f04f 0000 	mov.w	r0, #0
 80073d6:	f380 8811 	msr	BASEPRI, r0
 80073da:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80073de:	6819      	ldr	r1, [r3, #0]
 80073e0:	6808      	ldr	r0, [r1, #0]
 80073e2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80073e6:	f380 8809 	msr	PSP, r0
 80073ea:	f3bf 8f6f 	isb	sy
 80073ee:	4770      	bx	lr

080073f0 <pxCurrentTCBConst>:
 80073f0:	200008f0 	.word	0x200008f0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80073f4:	bf00      	nop
 80073f6:	bf00      	nop

080073f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b082      	sub	sp, #8
 80073fc:	af00      	add	r7, sp, #0
	__asm volatile
 80073fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007402:	f383 8811 	msr	BASEPRI, r3
 8007406:	f3bf 8f6f 	isb	sy
 800740a:	f3bf 8f4f 	dsb	sy
 800740e:	607b      	str	r3, [r7, #4]
}
 8007410:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007412:	f7fe ff1f 	bl	8006254 <xTaskIncrementTick>
 8007416:	4603      	mov	r3, r0
 8007418:	2b00      	cmp	r3, #0
 800741a:	d003      	beq.n	8007424 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800741c:	4b06      	ldr	r3, [pc, #24]	@ (8007438 <xPortSysTickHandler+0x40>)
 800741e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007422:	601a      	str	r2, [r3, #0]
 8007424:	2300      	movs	r3, #0
 8007426:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007428:	683b      	ldr	r3, [r7, #0]
 800742a:	f383 8811 	msr	BASEPRI, r3
}
 800742e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007430:	bf00      	nop
 8007432:	3708      	adds	r7, #8
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	e000ed04 	.word	0xe000ed04

0800743c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007440:	4b0a      	ldr	r3, [pc, #40]	@ (800746c <vPortSetupTimerInterrupt+0x30>)
 8007442:	2200      	movs	r2, #0
 8007444:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007446:	4b0a      	ldr	r3, [pc, #40]	@ (8007470 <vPortSetupTimerInterrupt+0x34>)
 8007448:	2200      	movs	r2, #0
 800744a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800744c:	4b09      	ldr	r3, [pc, #36]	@ (8007474 <vPortSetupTimerInterrupt+0x38>)
 800744e:	681b      	ldr	r3, [r3, #0]
 8007450:	4a09      	ldr	r2, [pc, #36]	@ (8007478 <vPortSetupTimerInterrupt+0x3c>)
 8007452:	fba2 2303 	umull	r2, r3, r2, r3
 8007456:	099b      	lsrs	r3, r3, #6
 8007458:	4a08      	ldr	r2, [pc, #32]	@ (800747c <vPortSetupTimerInterrupt+0x40>)
 800745a:	3b01      	subs	r3, #1
 800745c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800745e:	4b03      	ldr	r3, [pc, #12]	@ (800746c <vPortSetupTimerInterrupt+0x30>)
 8007460:	2207      	movs	r2, #7
 8007462:	601a      	str	r2, [r3, #0]
}
 8007464:	bf00      	nop
 8007466:	46bd      	mov	sp, r7
 8007468:	bc80      	pop	{r7}
 800746a:	4770      	bx	lr
 800746c:	e000e010 	.word	0xe000e010
 8007470:	e000e018 	.word	0xe000e018
 8007474:	20000000 	.word	0x20000000
 8007478:	10624dd3 	.word	0x10624dd3
 800747c:	e000e014 	.word	0xe000e014

08007480 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007480:	b480      	push	{r7}
 8007482:	b085      	sub	sp, #20
 8007484:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007486:	f3ef 8305 	mrs	r3, IPSR
 800748a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	2b0f      	cmp	r3, #15
 8007490:	d915      	bls.n	80074be <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007492:	4a17      	ldr	r2, [pc, #92]	@ (80074f0 <vPortValidateInterruptPriority+0x70>)
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	4413      	add	r3, r2
 8007498:	781b      	ldrb	r3, [r3, #0]
 800749a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800749c:	4b15      	ldr	r3, [pc, #84]	@ (80074f4 <vPortValidateInterruptPriority+0x74>)
 800749e:	781b      	ldrb	r3, [r3, #0]
 80074a0:	7afa      	ldrb	r2, [r7, #11]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d20b      	bcs.n	80074be <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80074a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074aa:	f383 8811 	msr	BASEPRI, r3
 80074ae:	f3bf 8f6f 	isb	sy
 80074b2:	f3bf 8f4f 	dsb	sy
 80074b6:	607b      	str	r3, [r7, #4]
}
 80074b8:	bf00      	nop
 80074ba:	bf00      	nop
 80074bc:	e7fd      	b.n	80074ba <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80074be:	4b0e      	ldr	r3, [pc, #56]	@ (80074f8 <vPortValidateInterruptPriority+0x78>)
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80074c6:	4b0d      	ldr	r3, [pc, #52]	@ (80074fc <vPortValidateInterruptPriority+0x7c>)
 80074c8:	681b      	ldr	r3, [r3, #0]
 80074ca:	429a      	cmp	r2, r3
 80074cc:	d90b      	bls.n	80074e6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80074ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074d2:	f383 8811 	msr	BASEPRI, r3
 80074d6:	f3bf 8f6f 	isb	sy
 80074da:	f3bf 8f4f 	dsb	sy
 80074de:	603b      	str	r3, [r7, #0]
}
 80074e0:	bf00      	nop
 80074e2:	bf00      	nop
 80074e4:	e7fd      	b.n	80074e2 <vPortValidateInterruptPriority+0x62>
	}
 80074e6:	bf00      	nop
 80074e8:	3714      	adds	r7, #20
 80074ea:	46bd      	mov	sp, r7
 80074ec:	bc80      	pop	{r7}
 80074ee:	4770      	bx	lr
 80074f0:	e000e3f0 	.word	0xe000e3f0
 80074f4:	20000f1c 	.word	0x20000f1c
 80074f8:	e000ed0c 	.word	0xe000ed0c
 80074fc:	20000f20 	.word	0x20000f20

08007500 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007500:	b580      	push	{r7, lr}
 8007502:	b08a      	sub	sp, #40	@ 0x28
 8007504:	af00      	add	r7, sp, #0
 8007506:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007508:	2300      	movs	r3, #0
 800750a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800750c:	f7fe fde8 	bl	80060e0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007510:	4b5c      	ldr	r3, [pc, #368]	@ (8007684 <pvPortMalloc+0x184>)
 8007512:	681b      	ldr	r3, [r3, #0]
 8007514:	2b00      	cmp	r3, #0
 8007516:	d101      	bne.n	800751c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007518:	f000 f924 	bl	8007764 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800751c:	4b5a      	ldr	r3, [pc, #360]	@ (8007688 <pvPortMalloc+0x188>)
 800751e:	681a      	ldr	r2, [r3, #0]
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	4013      	ands	r3, r2
 8007524:	2b00      	cmp	r3, #0
 8007526:	f040 8095 	bne.w	8007654 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	2b00      	cmp	r3, #0
 800752e:	d01e      	beq.n	800756e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007530:	2208      	movs	r2, #8
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	4413      	add	r3, r2
 8007536:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	f003 0307 	and.w	r3, r3, #7
 800753e:	2b00      	cmp	r3, #0
 8007540:	d015      	beq.n	800756e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f023 0307 	bic.w	r3, r3, #7
 8007548:	3308      	adds	r3, #8
 800754a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f003 0307 	and.w	r3, r3, #7
 8007552:	2b00      	cmp	r3, #0
 8007554:	d00b      	beq.n	800756e <pvPortMalloc+0x6e>
	__asm volatile
 8007556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800755a:	f383 8811 	msr	BASEPRI, r3
 800755e:	f3bf 8f6f 	isb	sy
 8007562:	f3bf 8f4f 	dsb	sy
 8007566:	617b      	str	r3, [r7, #20]
}
 8007568:	bf00      	nop
 800756a:	bf00      	nop
 800756c:	e7fd      	b.n	800756a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	2b00      	cmp	r3, #0
 8007572:	d06f      	beq.n	8007654 <pvPortMalloc+0x154>
 8007574:	4b45      	ldr	r3, [pc, #276]	@ (800768c <pvPortMalloc+0x18c>)
 8007576:	681b      	ldr	r3, [r3, #0]
 8007578:	687a      	ldr	r2, [r7, #4]
 800757a:	429a      	cmp	r2, r3
 800757c:	d86a      	bhi.n	8007654 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800757e:	4b44      	ldr	r3, [pc, #272]	@ (8007690 <pvPortMalloc+0x190>)
 8007580:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007582:	4b43      	ldr	r3, [pc, #268]	@ (8007690 <pvPortMalloc+0x190>)
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007588:	e004      	b.n	8007594 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800758a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800758c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007590:	681b      	ldr	r3, [r3, #0]
 8007592:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007594:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	687a      	ldr	r2, [r7, #4]
 800759a:	429a      	cmp	r2, r3
 800759c:	d903      	bls.n	80075a6 <pvPortMalloc+0xa6>
 800759e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	d1f1      	bne.n	800758a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80075a6:	4b37      	ldr	r3, [pc, #220]	@ (8007684 <pvPortMalloc+0x184>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ac:	429a      	cmp	r2, r3
 80075ae:	d051      	beq.n	8007654 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80075b0:	6a3b      	ldr	r3, [r7, #32]
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	2208      	movs	r2, #8
 80075b6:	4413      	add	r3, r2
 80075b8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80075ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075bc:	681a      	ldr	r2, [r3, #0]
 80075be:	6a3b      	ldr	r3, [r7, #32]
 80075c0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80075c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075c4:	685a      	ldr	r2, [r3, #4]
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	1ad2      	subs	r2, r2, r3
 80075ca:	2308      	movs	r3, #8
 80075cc:	005b      	lsls	r3, r3, #1
 80075ce:	429a      	cmp	r2, r3
 80075d0:	d920      	bls.n	8007614 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80075d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	4413      	add	r3, r2
 80075d8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075da:	69bb      	ldr	r3, [r7, #24]
 80075dc:	f003 0307 	and.w	r3, r3, #7
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d00b      	beq.n	80075fc <pvPortMalloc+0xfc>
	__asm volatile
 80075e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e8:	f383 8811 	msr	BASEPRI, r3
 80075ec:	f3bf 8f6f 	isb	sy
 80075f0:	f3bf 8f4f 	dsb	sy
 80075f4:	613b      	str	r3, [r7, #16]
}
 80075f6:	bf00      	nop
 80075f8:	bf00      	nop
 80075fa:	e7fd      	b.n	80075f8 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80075fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075fe:	685a      	ldr	r2, [r3, #4]
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	1ad2      	subs	r2, r2, r3
 8007604:	69bb      	ldr	r3, [r7, #24]
 8007606:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007608:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800760a:	687a      	ldr	r2, [r7, #4]
 800760c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800760e:	69b8      	ldr	r0, [r7, #24]
 8007610:	f000 f90a 	bl	8007828 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007614:	4b1d      	ldr	r3, [pc, #116]	@ (800768c <pvPortMalloc+0x18c>)
 8007616:	681a      	ldr	r2, [r3, #0]
 8007618:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	1ad3      	subs	r3, r2, r3
 800761e:	4a1b      	ldr	r2, [pc, #108]	@ (800768c <pvPortMalloc+0x18c>)
 8007620:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007622:	4b1a      	ldr	r3, [pc, #104]	@ (800768c <pvPortMalloc+0x18c>)
 8007624:	681a      	ldr	r2, [r3, #0]
 8007626:	4b1b      	ldr	r3, [pc, #108]	@ (8007694 <pvPortMalloc+0x194>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	429a      	cmp	r2, r3
 800762c:	d203      	bcs.n	8007636 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800762e:	4b17      	ldr	r3, [pc, #92]	@ (800768c <pvPortMalloc+0x18c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	4a18      	ldr	r2, [pc, #96]	@ (8007694 <pvPortMalloc+0x194>)
 8007634:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007636:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007638:	685a      	ldr	r2, [r3, #4]
 800763a:	4b13      	ldr	r3, [pc, #76]	@ (8007688 <pvPortMalloc+0x188>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	431a      	orrs	r2, r3
 8007640:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007642:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007644:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007646:	2200      	movs	r2, #0
 8007648:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800764a:	4b13      	ldr	r3, [pc, #76]	@ (8007698 <pvPortMalloc+0x198>)
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3301      	adds	r3, #1
 8007650:	4a11      	ldr	r2, [pc, #68]	@ (8007698 <pvPortMalloc+0x198>)
 8007652:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007654:	f7fe fd52 	bl	80060fc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007658:	69fb      	ldr	r3, [r7, #28]
 800765a:	f003 0307 	and.w	r3, r3, #7
 800765e:	2b00      	cmp	r3, #0
 8007660:	d00b      	beq.n	800767a <pvPortMalloc+0x17a>
	__asm volatile
 8007662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007666:	f383 8811 	msr	BASEPRI, r3
 800766a:	f3bf 8f6f 	isb	sy
 800766e:	f3bf 8f4f 	dsb	sy
 8007672:	60fb      	str	r3, [r7, #12]
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop
 8007678:	e7fd      	b.n	8007676 <pvPortMalloc+0x176>
	return pvReturn;
 800767a:	69fb      	ldr	r3, [r7, #28]
}
 800767c:	4618      	mov	r0, r3
 800767e:	3728      	adds	r7, #40	@ 0x28
 8007680:	46bd      	mov	sp, r7
 8007682:	bd80      	pop	{r7, pc}
 8007684:	20001b2c 	.word	0x20001b2c
 8007688:	20001b40 	.word	0x20001b40
 800768c:	20001b30 	.word	0x20001b30
 8007690:	20001b24 	.word	0x20001b24
 8007694:	20001b34 	.word	0x20001b34
 8007698:	20001b38 	.word	0x20001b38

0800769c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d04f      	beq.n	800774e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80076ae:	2308      	movs	r3, #8
 80076b0:	425b      	negs	r3, r3
 80076b2:	697a      	ldr	r2, [r7, #20]
 80076b4:	4413      	add	r3, r2
 80076b6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80076bc:	693b      	ldr	r3, [r7, #16]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	4b25      	ldr	r3, [pc, #148]	@ (8007758 <vPortFree+0xbc>)
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	4013      	ands	r3, r2
 80076c6:	2b00      	cmp	r3, #0
 80076c8:	d10b      	bne.n	80076e2 <vPortFree+0x46>
	__asm volatile
 80076ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ce:	f383 8811 	msr	BASEPRI, r3
 80076d2:	f3bf 8f6f 	isb	sy
 80076d6:	f3bf 8f4f 	dsb	sy
 80076da:	60fb      	str	r3, [r7, #12]
}
 80076dc:	bf00      	nop
 80076de:	bf00      	nop
 80076e0:	e7fd      	b.n	80076de <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d00b      	beq.n	8007702 <vPortFree+0x66>
	__asm volatile
 80076ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076ee:	f383 8811 	msr	BASEPRI, r3
 80076f2:	f3bf 8f6f 	isb	sy
 80076f6:	f3bf 8f4f 	dsb	sy
 80076fa:	60bb      	str	r3, [r7, #8]
}
 80076fc:	bf00      	nop
 80076fe:	bf00      	nop
 8007700:	e7fd      	b.n	80076fe <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007702:	693b      	ldr	r3, [r7, #16]
 8007704:	685a      	ldr	r2, [r3, #4]
 8007706:	4b14      	ldr	r3, [pc, #80]	@ (8007758 <vPortFree+0xbc>)
 8007708:	681b      	ldr	r3, [r3, #0]
 800770a:	4013      	ands	r3, r2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d01e      	beq.n	800774e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007710:	693b      	ldr	r3, [r7, #16]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	2b00      	cmp	r3, #0
 8007716:	d11a      	bne.n	800774e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007718:	693b      	ldr	r3, [r7, #16]
 800771a:	685a      	ldr	r2, [r3, #4]
 800771c:	4b0e      	ldr	r3, [pc, #56]	@ (8007758 <vPortFree+0xbc>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	43db      	mvns	r3, r3
 8007722:	401a      	ands	r2, r3
 8007724:	693b      	ldr	r3, [r7, #16]
 8007726:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007728:	f7fe fcda 	bl	80060e0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800772c:	693b      	ldr	r3, [r7, #16]
 800772e:	685a      	ldr	r2, [r3, #4]
 8007730:	4b0a      	ldr	r3, [pc, #40]	@ (800775c <vPortFree+0xc0>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	4413      	add	r3, r2
 8007736:	4a09      	ldr	r2, [pc, #36]	@ (800775c <vPortFree+0xc0>)
 8007738:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800773a:	6938      	ldr	r0, [r7, #16]
 800773c:	f000 f874 	bl	8007828 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007740:	4b07      	ldr	r3, [pc, #28]	@ (8007760 <vPortFree+0xc4>)
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	3301      	adds	r3, #1
 8007746:	4a06      	ldr	r2, [pc, #24]	@ (8007760 <vPortFree+0xc4>)
 8007748:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800774a:	f7fe fcd7 	bl	80060fc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800774e:	bf00      	nop
 8007750:	3718      	adds	r7, #24
 8007752:	46bd      	mov	sp, r7
 8007754:	bd80      	pop	{r7, pc}
 8007756:	bf00      	nop
 8007758:	20001b40 	.word	0x20001b40
 800775c:	20001b30 	.word	0x20001b30
 8007760:	20001b3c 	.word	0x20001b3c

08007764 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007764:	b480      	push	{r7}
 8007766:	b085      	sub	sp, #20
 8007768:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800776a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800776e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007770:	4b27      	ldr	r3, [pc, #156]	@ (8007810 <prvHeapInit+0xac>)
 8007772:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	f003 0307 	and.w	r3, r3, #7
 800777a:	2b00      	cmp	r3, #0
 800777c:	d00c      	beq.n	8007798 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800777e:	68fb      	ldr	r3, [r7, #12]
 8007780:	3307      	adds	r3, #7
 8007782:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007784:	68fb      	ldr	r3, [r7, #12]
 8007786:	f023 0307 	bic.w	r3, r3, #7
 800778a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800778c:	68ba      	ldr	r2, [r7, #8]
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	1ad3      	subs	r3, r2, r3
 8007792:	4a1f      	ldr	r2, [pc, #124]	@ (8007810 <prvHeapInit+0xac>)
 8007794:	4413      	add	r3, r2
 8007796:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800779c:	4a1d      	ldr	r2, [pc, #116]	@ (8007814 <prvHeapInit+0xb0>)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80077a2:	4b1c      	ldr	r3, [pc, #112]	@ (8007814 <prvHeapInit+0xb0>)
 80077a4:	2200      	movs	r2, #0
 80077a6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	68ba      	ldr	r2, [r7, #8]
 80077ac:	4413      	add	r3, r2
 80077ae:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80077b0:	2208      	movs	r2, #8
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	1a9b      	subs	r3, r3, r2
 80077b6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f023 0307 	bic.w	r3, r3, #7
 80077be:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80077c0:	68fb      	ldr	r3, [r7, #12]
 80077c2:	4a15      	ldr	r2, [pc, #84]	@ (8007818 <prvHeapInit+0xb4>)
 80077c4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80077c6:	4b14      	ldr	r3, [pc, #80]	@ (8007818 <prvHeapInit+0xb4>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	2200      	movs	r2, #0
 80077cc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80077ce:	4b12      	ldr	r3, [pc, #72]	@ (8007818 <prvHeapInit+0xb4>)
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80077da:	683b      	ldr	r3, [r7, #0]
 80077dc:	68fa      	ldr	r2, [r7, #12]
 80077de:	1ad2      	subs	r2, r2, r3
 80077e0:	683b      	ldr	r3, [r7, #0]
 80077e2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80077e4:	4b0c      	ldr	r3, [pc, #48]	@ (8007818 <prvHeapInit+0xb4>)
 80077e6:	681a      	ldr	r2, [r3, #0]
 80077e8:	683b      	ldr	r3, [r7, #0]
 80077ea:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077ec:	683b      	ldr	r3, [r7, #0]
 80077ee:	685b      	ldr	r3, [r3, #4]
 80077f0:	4a0a      	ldr	r2, [pc, #40]	@ (800781c <prvHeapInit+0xb8>)
 80077f2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80077f4:	683b      	ldr	r3, [r7, #0]
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	4a09      	ldr	r2, [pc, #36]	@ (8007820 <prvHeapInit+0xbc>)
 80077fa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80077fc:	4b09      	ldr	r3, [pc, #36]	@ (8007824 <prvHeapInit+0xc0>)
 80077fe:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007802:	601a      	str	r2, [r3, #0]
}
 8007804:	bf00      	nop
 8007806:	3714      	adds	r7, #20
 8007808:	46bd      	mov	sp, r7
 800780a:	bc80      	pop	{r7}
 800780c:	4770      	bx	lr
 800780e:	bf00      	nop
 8007810:	20000f24 	.word	0x20000f24
 8007814:	20001b24 	.word	0x20001b24
 8007818:	20001b2c 	.word	0x20001b2c
 800781c:	20001b34 	.word	0x20001b34
 8007820:	20001b30 	.word	0x20001b30
 8007824:	20001b40 	.word	0x20001b40

08007828 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007830:	4b27      	ldr	r3, [pc, #156]	@ (80078d0 <prvInsertBlockIntoFreeList+0xa8>)
 8007832:	60fb      	str	r3, [r7, #12]
 8007834:	e002      	b.n	800783c <prvInsertBlockIntoFreeList+0x14>
 8007836:	68fb      	ldr	r3, [r7, #12]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	60fb      	str	r3, [r7, #12]
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	687a      	ldr	r2, [r7, #4]
 8007842:	429a      	cmp	r2, r3
 8007844:	d8f7      	bhi.n	8007836 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007846:	68fb      	ldr	r3, [r7, #12]
 8007848:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	685b      	ldr	r3, [r3, #4]
 800784e:	68ba      	ldr	r2, [r7, #8]
 8007850:	4413      	add	r3, r2
 8007852:	687a      	ldr	r2, [r7, #4]
 8007854:	429a      	cmp	r2, r3
 8007856:	d108      	bne.n	800786a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007858:	68fb      	ldr	r3, [r7, #12]
 800785a:	685a      	ldr	r2, [r3, #4]
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	685b      	ldr	r3, [r3, #4]
 8007860:	441a      	add	r2, r3
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007866:	68fb      	ldr	r3, [r7, #12]
 8007868:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	685b      	ldr	r3, [r3, #4]
 8007872:	68ba      	ldr	r2, [r7, #8]
 8007874:	441a      	add	r2, r3
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	429a      	cmp	r2, r3
 800787c:	d118      	bne.n	80078b0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	681a      	ldr	r2, [r3, #0]
 8007882:	4b14      	ldr	r3, [pc, #80]	@ (80078d4 <prvInsertBlockIntoFreeList+0xac>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	429a      	cmp	r2, r3
 8007888:	d00d      	beq.n	80078a6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	685a      	ldr	r2, [r3, #4]
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	685b      	ldr	r3, [r3, #4]
 8007894:	441a      	add	r2, r3
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	681a      	ldr	r2, [r3, #0]
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	601a      	str	r2, [r3, #0]
 80078a4:	e008      	b.n	80078b8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80078a6:	4b0b      	ldr	r3, [pc, #44]	@ (80078d4 <prvInsertBlockIntoFreeList+0xac>)
 80078a8:	681a      	ldr	r2, [r3, #0]
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	601a      	str	r2, [r3, #0]
 80078ae:	e003      	b.n	80078b8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	681a      	ldr	r2, [r3, #0]
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80078b8:	68fa      	ldr	r2, [r7, #12]
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	429a      	cmp	r2, r3
 80078be:	d002      	beq.n	80078c6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	687a      	ldr	r2, [r7, #4]
 80078c4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078c6:	bf00      	nop
 80078c8:	3714      	adds	r7, #20
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bc80      	pop	{r7}
 80078ce:	4770      	bx	lr
 80078d0:	20001b24 	.word	0x20001b24
 80078d4:	20001b2c 	.word	0x20001b2c

080078d8 <sniprintf>:
 80078d8:	b40c      	push	{r2, r3}
 80078da:	b530      	push	{r4, r5, lr}
 80078dc:	4b18      	ldr	r3, [pc, #96]	@ (8007940 <sniprintf+0x68>)
 80078de:	1e0c      	subs	r4, r1, #0
 80078e0:	681d      	ldr	r5, [r3, #0]
 80078e2:	b09d      	sub	sp, #116	@ 0x74
 80078e4:	da08      	bge.n	80078f8 <sniprintf+0x20>
 80078e6:	238b      	movs	r3, #139	@ 0x8b
 80078e8:	f04f 30ff 	mov.w	r0, #4294967295
 80078ec:	602b      	str	r3, [r5, #0]
 80078ee:	b01d      	add	sp, #116	@ 0x74
 80078f0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80078f4:	b002      	add	sp, #8
 80078f6:	4770      	bx	lr
 80078f8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80078fc:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007900:	f04f 0300 	mov.w	r3, #0
 8007904:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007906:	bf0c      	ite	eq
 8007908:	4623      	moveq	r3, r4
 800790a:	f104 33ff 	addne.w	r3, r4, #4294967295
 800790e:	9304      	str	r3, [sp, #16]
 8007910:	9307      	str	r3, [sp, #28]
 8007912:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8007916:	9002      	str	r0, [sp, #8]
 8007918:	9006      	str	r0, [sp, #24]
 800791a:	f8ad 3016 	strh.w	r3, [sp, #22]
 800791e:	4628      	mov	r0, r5
 8007920:	ab21      	add	r3, sp, #132	@ 0x84
 8007922:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8007924:	a902      	add	r1, sp, #8
 8007926:	9301      	str	r3, [sp, #4]
 8007928:	f000 f9ba 	bl	8007ca0 <_svfiprintf_r>
 800792c:	1c43      	adds	r3, r0, #1
 800792e:	bfbc      	itt	lt
 8007930:	238b      	movlt	r3, #139	@ 0x8b
 8007932:	602b      	strlt	r3, [r5, #0]
 8007934:	2c00      	cmp	r4, #0
 8007936:	d0da      	beq.n	80078ee <sniprintf+0x16>
 8007938:	2200      	movs	r2, #0
 800793a:	9b02      	ldr	r3, [sp, #8]
 800793c:	701a      	strb	r2, [r3, #0]
 800793e:	e7d6      	b.n	80078ee <sniprintf+0x16>
 8007940:	20000010 	.word	0x20000010

08007944 <memmove>:
 8007944:	4288      	cmp	r0, r1
 8007946:	b510      	push	{r4, lr}
 8007948:	eb01 0402 	add.w	r4, r1, r2
 800794c:	d902      	bls.n	8007954 <memmove+0x10>
 800794e:	4284      	cmp	r4, r0
 8007950:	4623      	mov	r3, r4
 8007952:	d807      	bhi.n	8007964 <memmove+0x20>
 8007954:	1e43      	subs	r3, r0, #1
 8007956:	42a1      	cmp	r1, r4
 8007958:	d008      	beq.n	800796c <memmove+0x28>
 800795a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800795e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007962:	e7f8      	b.n	8007956 <memmove+0x12>
 8007964:	4601      	mov	r1, r0
 8007966:	4402      	add	r2, r0
 8007968:	428a      	cmp	r2, r1
 800796a:	d100      	bne.n	800796e <memmove+0x2a>
 800796c:	bd10      	pop	{r4, pc}
 800796e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8007972:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8007976:	e7f7      	b.n	8007968 <memmove+0x24>

08007978 <memset>:
 8007978:	4603      	mov	r3, r0
 800797a:	4402      	add	r2, r0
 800797c:	4293      	cmp	r3, r2
 800797e:	d100      	bne.n	8007982 <memset+0xa>
 8007980:	4770      	bx	lr
 8007982:	f803 1b01 	strb.w	r1, [r3], #1
 8007986:	e7f9      	b.n	800797c <memset+0x4>

08007988 <__errno>:
 8007988:	4b01      	ldr	r3, [pc, #4]	@ (8007990 <__errno+0x8>)
 800798a:	6818      	ldr	r0, [r3, #0]
 800798c:	4770      	bx	lr
 800798e:	bf00      	nop
 8007990:	20000010 	.word	0x20000010

08007994 <__libc_init_array>:
 8007994:	b570      	push	{r4, r5, r6, lr}
 8007996:	2600      	movs	r6, #0
 8007998:	4d0c      	ldr	r5, [pc, #48]	@ (80079cc <__libc_init_array+0x38>)
 800799a:	4c0d      	ldr	r4, [pc, #52]	@ (80079d0 <__libc_init_array+0x3c>)
 800799c:	1b64      	subs	r4, r4, r5
 800799e:	10a4      	asrs	r4, r4, #2
 80079a0:	42a6      	cmp	r6, r4
 80079a2:	d109      	bne.n	80079b8 <__libc_init_array+0x24>
 80079a4:	f000 fca8 	bl	80082f8 <_init>
 80079a8:	2600      	movs	r6, #0
 80079aa:	4d0a      	ldr	r5, [pc, #40]	@ (80079d4 <__libc_init_array+0x40>)
 80079ac:	4c0a      	ldr	r4, [pc, #40]	@ (80079d8 <__libc_init_array+0x44>)
 80079ae:	1b64      	subs	r4, r4, r5
 80079b0:	10a4      	asrs	r4, r4, #2
 80079b2:	42a6      	cmp	r6, r4
 80079b4:	d105      	bne.n	80079c2 <__libc_init_array+0x2e>
 80079b6:	bd70      	pop	{r4, r5, r6, pc}
 80079b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80079bc:	4798      	blx	r3
 80079be:	3601      	adds	r6, #1
 80079c0:	e7ee      	b.n	80079a0 <__libc_init_array+0xc>
 80079c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80079c6:	4798      	blx	r3
 80079c8:	3601      	adds	r6, #1
 80079ca:	e7f2      	b.n	80079b2 <__libc_init_array+0x1e>
 80079cc:	080084d4 	.word	0x080084d4
 80079d0:	080084d4 	.word	0x080084d4
 80079d4:	080084d4 	.word	0x080084d4
 80079d8:	080084d8 	.word	0x080084d8

080079dc <__retarget_lock_acquire_recursive>:
 80079dc:	4770      	bx	lr

080079de <__retarget_lock_release_recursive>:
 80079de:	4770      	bx	lr

080079e0 <memcpy>:
 80079e0:	440a      	add	r2, r1
 80079e2:	4291      	cmp	r1, r2
 80079e4:	f100 33ff 	add.w	r3, r0, #4294967295
 80079e8:	d100      	bne.n	80079ec <memcpy+0xc>
 80079ea:	4770      	bx	lr
 80079ec:	b510      	push	{r4, lr}
 80079ee:	f811 4b01 	ldrb.w	r4, [r1], #1
 80079f2:	4291      	cmp	r1, r2
 80079f4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80079f8:	d1f9      	bne.n	80079ee <memcpy+0xe>
 80079fa:	bd10      	pop	{r4, pc}

080079fc <_free_r>:
 80079fc:	b538      	push	{r3, r4, r5, lr}
 80079fe:	4605      	mov	r5, r0
 8007a00:	2900      	cmp	r1, #0
 8007a02:	d040      	beq.n	8007a86 <_free_r+0x8a>
 8007a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a08:	1f0c      	subs	r4, r1, #4
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	bfb8      	it	lt
 8007a0e:	18e4      	addlt	r4, r4, r3
 8007a10:	f000 f8de 	bl	8007bd0 <__malloc_lock>
 8007a14:	4a1c      	ldr	r2, [pc, #112]	@ (8007a88 <_free_r+0x8c>)
 8007a16:	6813      	ldr	r3, [r2, #0]
 8007a18:	b933      	cbnz	r3, 8007a28 <_free_r+0x2c>
 8007a1a:	6063      	str	r3, [r4, #4]
 8007a1c:	6014      	str	r4, [r2, #0]
 8007a1e:	4628      	mov	r0, r5
 8007a20:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007a24:	f000 b8da 	b.w	8007bdc <__malloc_unlock>
 8007a28:	42a3      	cmp	r3, r4
 8007a2a:	d908      	bls.n	8007a3e <_free_r+0x42>
 8007a2c:	6820      	ldr	r0, [r4, #0]
 8007a2e:	1821      	adds	r1, r4, r0
 8007a30:	428b      	cmp	r3, r1
 8007a32:	bf01      	itttt	eq
 8007a34:	6819      	ldreq	r1, [r3, #0]
 8007a36:	685b      	ldreq	r3, [r3, #4]
 8007a38:	1809      	addeq	r1, r1, r0
 8007a3a:	6021      	streq	r1, [r4, #0]
 8007a3c:	e7ed      	b.n	8007a1a <_free_r+0x1e>
 8007a3e:	461a      	mov	r2, r3
 8007a40:	685b      	ldr	r3, [r3, #4]
 8007a42:	b10b      	cbz	r3, 8007a48 <_free_r+0x4c>
 8007a44:	42a3      	cmp	r3, r4
 8007a46:	d9fa      	bls.n	8007a3e <_free_r+0x42>
 8007a48:	6811      	ldr	r1, [r2, #0]
 8007a4a:	1850      	adds	r0, r2, r1
 8007a4c:	42a0      	cmp	r0, r4
 8007a4e:	d10b      	bne.n	8007a68 <_free_r+0x6c>
 8007a50:	6820      	ldr	r0, [r4, #0]
 8007a52:	4401      	add	r1, r0
 8007a54:	1850      	adds	r0, r2, r1
 8007a56:	4283      	cmp	r3, r0
 8007a58:	6011      	str	r1, [r2, #0]
 8007a5a:	d1e0      	bne.n	8007a1e <_free_r+0x22>
 8007a5c:	6818      	ldr	r0, [r3, #0]
 8007a5e:	685b      	ldr	r3, [r3, #4]
 8007a60:	4408      	add	r0, r1
 8007a62:	6010      	str	r0, [r2, #0]
 8007a64:	6053      	str	r3, [r2, #4]
 8007a66:	e7da      	b.n	8007a1e <_free_r+0x22>
 8007a68:	d902      	bls.n	8007a70 <_free_r+0x74>
 8007a6a:	230c      	movs	r3, #12
 8007a6c:	602b      	str	r3, [r5, #0]
 8007a6e:	e7d6      	b.n	8007a1e <_free_r+0x22>
 8007a70:	6820      	ldr	r0, [r4, #0]
 8007a72:	1821      	adds	r1, r4, r0
 8007a74:	428b      	cmp	r3, r1
 8007a76:	bf01      	itttt	eq
 8007a78:	6819      	ldreq	r1, [r3, #0]
 8007a7a:	685b      	ldreq	r3, [r3, #4]
 8007a7c:	1809      	addeq	r1, r1, r0
 8007a7e:	6021      	streq	r1, [r4, #0]
 8007a80:	6063      	str	r3, [r4, #4]
 8007a82:	6054      	str	r4, [r2, #4]
 8007a84:	e7cb      	b.n	8007a1e <_free_r+0x22>
 8007a86:	bd38      	pop	{r3, r4, r5, pc}
 8007a88:	20001c88 	.word	0x20001c88

08007a8c <sbrk_aligned>:
 8007a8c:	b570      	push	{r4, r5, r6, lr}
 8007a8e:	4e0f      	ldr	r6, [pc, #60]	@ (8007acc <sbrk_aligned+0x40>)
 8007a90:	460c      	mov	r4, r1
 8007a92:	6831      	ldr	r1, [r6, #0]
 8007a94:	4605      	mov	r5, r0
 8007a96:	b911      	cbnz	r1, 8007a9e <sbrk_aligned+0x12>
 8007a98:	f000 fb8e 	bl	80081b8 <_sbrk_r>
 8007a9c:	6030      	str	r0, [r6, #0]
 8007a9e:	4621      	mov	r1, r4
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f000 fb89 	bl	80081b8 <_sbrk_r>
 8007aa6:	1c43      	adds	r3, r0, #1
 8007aa8:	d103      	bne.n	8007ab2 <sbrk_aligned+0x26>
 8007aaa:	f04f 34ff 	mov.w	r4, #4294967295
 8007aae:	4620      	mov	r0, r4
 8007ab0:	bd70      	pop	{r4, r5, r6, pc}
 8007ab2:	1cc4      	adds	r4, r0, #3
 8007ab4:	f024 0403 	bic.w	r4, r4, #3
 8007ab8:	42a0      	cmp	r0, r4
 8007aba:	d0f8      	beq.n	8007aae <sbrk_aligned+0x22>
 8007abc:	1a21      	subs	r1, r4, r0
 8007abe:	4628      	mov	r0, r5
 8007ac0:	f000 fb7a 	bl	80081b8 <_sbrk_r>
 8007ac4:	3001      	adds	r0, #1
 8007ac6:	d1f2      	bne.n	8007aae <sbrk_aligned+0x22>
 8007ac8:	e7ef      	b.n	8007aaa <sbrk_aligned+0x1e>
 8007aca:	bf00      	nop
 8007acc:	20001c84 	.word	0x20001c84

08007ad0 <_malloc_r>:
 8007ad0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007ad4:	1ccd      	adds	r5, r1, #3
 8007ad6:	f025 0503 	bic.w	r5, r5, #3
 8007ada:	3508      	adds	r5, #8
 8007adc:	2d0c      	cmp	r5, #12
 8007ade:	bf38      	it	cc
 8007ae0:	250c      	movcc	r5, #12
 8007ae2:	2d00      	cmp	r5, #0
 8007ae4:	4606      	mov	r6, r0
 8007ae6:	db01      	blt.n	8007aec <_malloc_r+0x1c>
 8007ae8:	42a9      	cmp	r1, r5
 8007aea:	d904      	bls.n	8007af6 <_malloc_r+0x26>
 8007aec:	230c      	movs	r3, #12
 8007aee:	6033      	str	r3, [r6, #0]
 8007af0:	2000      	movs	r0, #0
 8007af2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007af6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007bcc <_malloc_r+0xfc>
 8007afa:	f000 f869 	bl	8007bd0 <__malloc_lock>
 8007afe:	f8d8 3000 	ldr.w	r3, [r8]
 8007b02:	461c      	mov	r4, r3
 8007b04:	bb44      	cbnz	r4, 8007b58 <_malloc_r+0x88>
 8007b06:	4629      	mov	r1, r5
 8007b08:	4630      	mov	r0, r6
 8007b0a:	f7ff ffbf 	bl	8007a8c <sbrk_aligned>
 8007b0e:	1c43      	adds	r3, r0, #1
 8007b10:	4604      	mov	r4, r0
 8007b12:	d158      	bne.n	8007bc6 <_malloc_r+0xf6>
 8007b14:	f8d8 4000 	ldr.w	r4, [r8]
 8007b18:	4627      	mov	r7, r4
 8007b1a:	2f00      	cmp	r7, #0
 8007b1c:	d143      	bne.n	8007ba6 <_malloc_r+0xd6>
 8007b1e:	2c00      	cmp	r4, #0
 8007b20:	d04b      	beq.n	8007bba <_malloc_r+0xea>
 8007b22:	6823      	ldr	r3, [r4, #0]
 8007b24:	4639      	mov	r1, r7
 8007b26:	4630      	mov	r0, r6
 8007b28:	eb04 0903 	add.w	r9, r4, r3
 8007b2c:	f000 fb44 	bl	80081b8 <_sbrk_r>
 8007b30:	4581      	cmp	r9, r0
 8007b32:	d142      	bne.n	8007bba <_malloc_r+0xea>
 8007b34:	6821      	ldr	r1, [r4, #0]
 8007b36:	4630      	mov	r0, r6
 8007b38:	1a6d      	subs	r5, r5, r1
 8007b3a:	4629      	mov	r1, r5
 8007b3c:	f7ff ffa6 	bl	8007a8c <sbrk_aligned>
 8007b40:	3001      	adds	r0, #1
 8007b42:	d03a      	beq.n	8007bba <_malloc_r+0xea>
 8007b44:	6823      	ldr	r3, [r4, #0]
 8007b46:	442b      	add	r3, r5
 8007b48:	6023      	str	r3, [r4, #0]
 8007b4a:	f8d8 3000 	ldr.w	r3, [r8]
 8007b4e:	685a      	ldr	r2, [r3, #4]
 8007b50:	bb62      	cbnz	r2, 8007bac <_malloc_r+0xdc>
 8007b52:	f8c8 7000 	str.w	r7, [r8]
 8007b56:	e00f      	b.n	8007b78 <_malloc_r+0xa8>
 8007b58:	6822      	ldr	r2, [r4, #0]
 8007b5a:	1b52      	subs	r2, r2, r5
 8007b5c:	d420      	bmi.n	8007ba0 <_malloc_r+0xd0>
 8007b5e:	2a0b      	cmp	r2, #11
 8007b60:	d917      	bls.n	8007b92 <_malloc_r+0xc2>
 8007b62:	1961      	adds	r1, r4, r5
 8007b64:	42a3      	cmp	r3, r4
 8007b66:	6025      	str	r5, [r4, #0]
 8007b68:	bf18      	it	ne
 8007b6a:	6059      	strne	r1, [r3, #4]
 8007b6c:	6863      	ldr	r3, [r4, #4]
 8007b6e:	bf08      	it	eq
 8007b70:	f8c8 1000 	streq.w	r1, [r8]
 8007b74:	5162      	str	r2, [r4, r5]
 8007b76:	604b      	str	r3, [r1, #4]
 8007b78:	4630      	mov	r0, r6
 8007b7a:	f000 f82f 	bl	8007bdc <__malloc_unlock>
 8007b7e:	f104 000b 	add.w	r0, r4, #11
 8007b82:	1d23      	adds	r3, r4, #4
 8007b84:	f020 0007 	bic.w	r0, r0, #7
 8007b88:	1ac2      	subs	r2, r0, r3
 8007b8a:	bf1c      	itt	ne
 8007b8c:	1a1b      	subne	r3, r3, r0
 8007b8e:	50a3      	strne	r3, [r4, r2]
 8007b90:	e7af      	b.n	8007af2 <_malloc_r+0x22>
 8007b92:	6862      	ldr	r2, [r4, #4]
 8007b94:	42a3      	cmp	r3, r4
 8007b96:	bf0c      	ite	eq
 8007b98:	f8c8 2000 	streq.w	r2, [r8]
 8007b9c:	605a      	strne	r2, [r3, #4]
 8007b9e:	e7eb      	b.n	8007b78 <_malloc_r+0xa8>
 8007ba0:	4623      	mov	r3, r4
 8007ba2:	6864      	ldr	r4, [r4, #4]
 8007ba4:	e7ae      	b.n	8007b04 <_malloc_r+0x34>
 8007ba6:	463c      	mov	r4, r7
 8007ba8:	687f      	ldr	r7, [r7, #4]
 8007baa:	e7b6      	b.n	8007b1a <_malloc_r+0x4a>
 8007bac:	461a      	mov	r2, r3
 8007bae:	685b      	ldr	r3, [r3, #4]
 8007bb0:	42a3      	cmp	r3, r4
 8007bb2:	d1fb      	bne.n	8007bac <_malloc_r+0xdc>
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	6053      	str	r3, [r2, #4]
 8007bb8:	e7de      	b.n	8007b78 <_malloc_r+0xa8>
 8007bba:	230c      	movs	r3, #12
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	6033      	str	r3, [r6, #0]
 8007bc0:	f000 f80c 	bl	8007bdc <__malloc_unlock>
 8007bc4:	e794      	b.n	8007af0 <_malloc_r+0x20>
 8007bc6:	6005      	str	r5, [r0, #0]
 8007bc8:	e7d6      	b.n	8007b78 <_malloc_r+0xa8>
 8007bca:	bf00      	nop
 8007bcc:	20001c88 	.word	0x20001c88

08007bd0 <__malloc_lock>:
 8007bd0:	4801      	ldr	r0, [pc, #4]	@ (8007bd8 <__malloc_lock+0x8>)
 8007bd2:	f7ff bf03 	b.w	80079dc <__retarget_lock_acquire_recursive>
 8007bd6:	bf00      	nop
 8007bd8:	20001c80 	.word	0x20001c80

08007bdc <__malloc_unlock>:
 8007bdc:	4801      	ldr	r0, [pc, #4]	@ (8007be4 <__malloc_unlock+0x8>)
 8007bde:	f7ff befe 	b.w	80079de <__retarget_lock_release_recursive>
 8007be2:	bf00      	nop
 8007be4:	20001c80 	.word	0x20001c80

08007be8 <__ssputs_r>:
 8007be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007bec:	461f      	mov	r7, r3
 8007bee:	688e      	ldr	r6, [r1, #8]
 8007bf0:	4682      	mov	sl, r0
 8007bf2:	42be      	cmp	r6, r7
 8007bf4:	460c      	mov	r4, r1
 8007bf6:	4690      	mov	r8, r2
 8007bf8:	680b      	ldr	r3, [r1, #0]
 8007bfa:	d82d      	bhi.n	8007c58 <__ssputs_r+0x70>
 8007bfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007c00:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007c04:	d026      	beq.n	8007c54 <__ssputs_r+0x6c>
 8007c06:	6965      	ldr	r5, [r4, #20]
 8007c08:	6909      	ldr	r1, [r1, #16]
 8007c0a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007c0e:	eba3 0901 	sub.w	r9, r3, r1
 8007c12:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007c16:	1c7b      	adds	r3, r7, #1
 8007c18:	444b      	add	r3, r9
 8007c1a:	106d      	asrs	r5, r5, #1
 8007c1c:	429d      	cmp	r5, r3
 8007c1e:	bf38      	it	cc
 8007c20:	461d      	movcc	r5, r3
 8007c22:	0553      	lsls	r3, r2, #21
 8007c24:	d527      	bpl.n	8007c76 <__ssputs_r+0x8e>
 8007c26:	4629      	mov	r1, r5
 8007c28:	f7ff ff52 	bl	8007ad0 <_malloc_r>
 8007c2c:	4606      	mov	r6, r0
 8007c2e:	b360      	cbz	r0, 8007c8a <__ssputs_r+0xa2>
 8007c30:	464a      	mov	r2, r9
 8007c32:	6921      	ldr	r1, [r4, #16]
 8007c34:	f7ff fed4 	bl	80079e0 <memcpy>
 8007c38:	89a3      	ldrh	r3, [r4, #12]
 8007c3a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007c3e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c42:	81a3      	strh	r3, [r4, #12]
 8007c44:	6126      	str	r6, [r4, #16]
 8007c46:	444e      	add	r6, r9
 8007c48:	6026      	str	r6, [r4, #0]
 8007c4a:	463e      	mov	r6, r7
 8007c4c:	6165      	str	r5, [r4, #20]
 8007c4e:	eba5 0509 	sub.w	r5, r5, r9
 8007c52:	60a5      	str	r5, [r4, #8]
 8007c54:	42be      	cmp	r6, r7
 8007c56:	d900      	bls.n	8007c5a <__ssputs_r+0x72>
 8007c58:	463e      	mov	r6, r7
 8007c5a:	4632      	mov	r2, r6
 8007c5c:	4641      	mov	r1, r8
 8007c5e:	6820      	ldr	r0, [r4, #0]
 8007c60:	f7ff fe70 	bl	8007944 <memmove>
 8007c64:	2000      	movs	r0, #0
 8007c66:	68a3      	ldr	r3, [r4, #8]
 8007c68:	1b9b      	subs	r3, r3, r6
 8007c6a:	60a3      	str	r3, [r4, #8]
 8007c6c:	6823      	ldr	r3, [r4, #0]
 8007c6e:	4433      	add	r3, r6
 8007c70:	6023      	str	r3, [r4, #0]
 8007c72:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007c76:	462a      	mov	r2, r5
 8007c78:	f000 fabc 	bl	80081f4 <_realloc_r>
 8007c7c:	4606      	mov	r6, r0
 8007c7e:	2800      	cmp	r0, #0
 8007c80:	d1e0      	bne.n	8007c44 <__ssputs_r+0x5c>
 8007c82:	4650      	mov	r0, sl
 8007c84:	6921      	ldr	r1, [r4, #16]
 8007c86:	f7ff feb9 	bl	80079fc <_free_r>
 8007c8a:	230c      	movs	r3, #12
 8007c8c:	f8ca 3000 	str.w	r3, [sl]
 8007c90:	89a3      	ldrh	r3, [r4, #12]
 8007c92:	f04f 30ff 	mov.w	r0, #4294967295
 8007c96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007c9a:	81a3      	strh	r3, [r4, #12]
 8007c9c:	e7e9      	b.n	8007c72 <__ssputs_r+0x8a>
	...

08007ca0 <_svfiprintf_r>:
 8007ca0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007ca4:	4698      	mov	r8, r3
 8007ca6:	898b      	ldrh	r3, [r1, #12]
 8007ca8:	4607      	mov	r7, r0
 8007caa:	061b      	lsls	r3, r3, #24
 8007cac:	460d      	mov	r5, r1
 8007cae:	4614      	mov	r4, r2
 8007cb0:	b09d      	sub	sp, #116	@ 0x74
 8007cb2:	d510      	bpl.n	8007cd6 <_svfiprintf_r+0x36>
 8007cb4:	690b      	ldr	r3, [r1, #16]
 8007cb6:	b973      	cbnz	r3, 8007cd6 <_svfiprintf_r+0x36>
 8007cb8:	2140      	movs	r1, #64	@ 0x40
 8007cba:	f7ff ff09 	bl	8007ad0 <_malloc_r>
 8007cbe:	6028      	str	r0, [r5, #0]
 8007cc0:	6128      	str	r0, [r5, #16]
 8007cc2:	b930      	cbnz	r0, 8007cd2 <_svfiprintf_r+0x32>
 8007cc4:	230c      	movs	r3, #12
 8007cc6:	603b      	str	r3, [r7, #0]
 8007cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ccc:	b01d      	add	sp, #116	@ 0x74
 8007cce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007cd2:	2340      	movs	r3, #64	@ 0x40
 8007cd4:	616b      	str	r3, [r5, #20]
 8007cd6:	2300      	movs	r3, #0
 8007cd8:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cda:	2320      	movs	r3, #32
 8007cdc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007ce0:	2330      	movs	r3, #48	@ 0x30
 8007ce2:	f04f 0901 	mov.w	r9, #1
 8007ce6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007cea:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8007e84 <_svfiprintf_r+0x1e4>
 8007cee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007cf2:	4623      	mov	r3, r4
 8007cf4:	469a      	mov	sl, r3
 8007cf6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007cfa:	b10a      	cbz	r2, 8007d00 <_svfiprintf_r+0x60>
 8007cfc:	2a25      	cmp	r2, #37	@ 0x25
 8007cfe:	d1f9      	bne.n	8007cf4 <_svfiprintf_r+0x54>
 8007d00:	ebba 0b04 	subs.w	fp, sl, r4
 8007d04:	d00b      	beq.n	8007d1e <_svfiprintf_r+0x7e>
 8007d06:	465b      	mov	r3, fp
 8007d08:	4622      	mov	r2, r4
 8007d0a:	4629      	mov	r1, r5
 8007d0c:	4638      	mov	r0, r7
 8007d0e:	f7ff ff6b 	bl	8007be8 <__ssputs_r>
 8007d12:	3001      	adds	r0, #1
 8007d14:	f000 80a7 	beq.w	8007e66 <_svfiprintf_r+0x1c6>
 8007d18:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007d1a:	445a      	add	r2, fp
 8007d1c:	9209      	str	r2, [sp, #36]	@ 0x24
 8007d1e:	f89a 3000 	ldrb.w	r3, [sl]
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	f000 809f 	beq.w	8007e66 <_svfiprintf_r+0x1c6>
 8007d28:	2300      	movs	r3, #0
 8007d2a:	f04f 32ff 	mov.w	r2, #4294967295
 8007d2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007d32:	f10a 0a01 	add.w	sl, sl, #1
 8007d36:	9304      	str	r3, [sp, #16]
 8007d38:	9307      	str	r3, [sp, #28]
 8007d3a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007d3e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007d40:	4654      	mov	r4, sl
 8007d42:	2205      	movs	r2, #5
 8007d44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d48:	484e      	ldr	r0, [pc, #312]	@ (8007e84 <_svfiprintf_r+0x1e4>)
 8007d4a:	f000 fa45 	bl	80081d8 <memchr>
 8007d4e:	9a04      	ldr	r2, [sp, #16]
 8007d50:	b9d8      	cbnz	r0, 8007d8a <_svfiprintf_r+0xea>
 8007d52:	06d0      	lsls	r0, r2, #27
 8007d54:	bf44      	itt	mi
 8007d56:	2320      	movmi	r3, #32
 8007d58:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d5c:	0711      	lsls	r1, r2, #28
 8007d5e:	bf44      	itt	mi
 8007d60:	232b      	movmi	r3, #43	@ 0x2b
 8007d62:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007d66:	f89a 3000 	ldrb.w	r3, [sl]
 8007d6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8007d6c:	d015      	beq.n	8007d9a <_svfiprintf_r+0xfa>
 8007d6e:	4654      	mov	r4, sl
 8007d70:	2000      	movs	r0, #0
 8007d72:	f04f 0c0a 	mov.w	ip, #10
 8007d76:	9a07      	ldr	r2, [sp, #28]
 8007d78:	4621      	mov	r1, r4
 8007d7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007d7e:	3b30      	subs	r3, #48	@ 0x30
 8007d80:	2b09      	cmp	r3, #9
 8007d82:	d94b      	bls.n	8007e1c <_svfiprintf_r+0x17c>
 8007d84:	b1b0      	cbz	r0, 8007db4 <_svfiprintf_r+0x114>
 8007d86:	9207      	str	r2, [sp, #28]
 8007d88:	e014      	b.n	8007db4 <_svfiprintf_r+0x114>
 8007d8a:	eba0 0308 	sub.w	r3, r0, r8
 8007d8e:	fa09 f303 	lsl.w	r3, r9, r3
 8007d92:	4313      	orrs	r3, r2
 8007d94:	46a2      	mov	sl, r4
 8007d96:	9304      	str	r3, [sp, #16]
 8007d98:	e7d2      	b.n	8007d40 <_svfiprintf_r+0xa0>
 8007d9a:	9b03      	ldr	r3, [sp, #12]
 8007d9c:	1d19      	adds	r1, r3, #4
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	9103      	str	r1, [sp, #12]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	bfbb      	ittet	lt
 8007da6:	425b      	neglt	r3, r3
 8007da8:	f042 0202 	orrlt.w	r2, r2, #2
 8007dac:	9307      	strge	r3, [sp, #28]
 8007dae:	9307      	strlt	r3, [sp, #28]
 8007db0:	bfb8      	it	lt
 8007db2:	9204      	strlt	r2, [sp, #16]
 8007db4:	7823      	ldrb	r3, [r4, #0]
 8007db6:	2b2e      	cmp	r3, #46	@ 0x2e
 8007db8:	d10a      	bne.n	8007dd0 <_svfiprintf_r+0x130>
 8007dba:	7863      	ldrb	r3, [r4, #1]
 8007dbc:	2b2a      	cmp	r3, #42	@ 0x2a
 8007dbe:	d132      	bne.n	8007e26 <_svfiprintf_r+0x186>
 8007dc0:	9b03      	ldr	r3, [sp, #12]
 8007dc2:	3402      	adds	r4, #2
 8007dc4:	1d1a      	adds	r2, r3, #4
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	9203      	str	r2, [sp, #12]
 8007dca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007dce:	9305      	str	r3, [sp, #20]
 8007dd0:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8007e88 <_svfiprintf_r+0x1e8>
 8007dd4:	2203      	movs	r2, #3
 8007dd6:	4650      	mov	r0, sl
 8007dd8:	7821      	ldrb	r1, [r4, #0]
 8007dda:	f000 f9fd 	bl	80081d8 <memchr>
 8007dde:	b138      	cbz	r0, 8007df0 <_svfiprintf_r+0x150>
 8007de0:	2240      	movs	r2, #64	@ 0x40
 8007de2:	9b04      	ldr	r3, [sp, #16]
 8007de4:	eba0 000a 	sub.w	r0, r0, sl
 8007de8:	4082      	lsls	r2, r0
 8007dea:	4313      	orrs	r3, r2
 8007dec:	3401      	adds	r4, #1
 8007dee:	9304      	str	r3, [sp, #16]
 8007df0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007df4:	2206      	movs	r2, #6
 8007df6:	4825      	ldr	r0, [pc, #148]	@ (8007e8c <_svfiprintf_r+0x1ec>)
 8007df8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007dfc:	f000 f9ec 	bl	80081d8 <memchr>
 8007e00:	2800      	cmp	r0, #0
 8007e02:	d036      	beq.n	8007e72 <_svfiprintf_r+0x1d2>
 8007e04:	4b22      	ldr	r3, [pc, #136]	@ (8007e90 <_svfiprintf_r+0x1f0>)
 8007e06:	bb1b      	cbnz	r3, 8007e50 <_svfiprintf_r+0x1b0>
 8007e08:	9b03      	ldr	r3, [sp, #12]
 8007e0a:	3307      	adds	r3, #7
 8007e0c:	f023 0307 	bic.w	r3, r3, #7
 8007e10:	3308      	adds	r3, #8
 8007e12:	9303      	str	r3, [sp, #12]
 8007e14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007e16:	4433      	add	r3, r6
 8007e18:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e1a:	e76a      	b.n	8007cf2 <_svfiprintf_r+0x52>
 8007e1c:	460c      	mov	r4, r1
 8007e1e:	2001      	movs	r0, #1
 8007e20:	fb0c 3202 	mla	r2, ip, r2, r3
 8007e24:	e7a8      	b.n	8007d78 <_svfiprintf_r+0xd8>
 8007e26:	2300      	movs	r3, #0
 8007e28:	f04f 0c0a 	mov.w	ip, #10
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	3401      	adds	r4, #1
 8007e30:	9305      	str	r3, [sp, #20]
 8007e32:	4620      	mov	r0, r4
 8007e34:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007e38:	3a30      	subs	r2, #48	@ 0x30
 8007e3a:	2a09      	cmp	r2, #9
 8007e3c:	d903      	bls.n	8007e46 <_svfiprintf_r+0x1a6>
 8007e3e:	2b00      	cmp	r3, #0
 8007e40:	d0c6      	beq.n	8007dd0 <_svfiprintf_r+0x130>
 8007e42:	9105      	str	r1, [sp, #20]
 8007e44:	e7c4      	b.n	8007dd0 <_svfiprintf_r+0x130>
 8007e46:	4604      	mov	r4, r0
 8007e48:	2301      	movs	r3, #1
 8007e4a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007e4e:	e7f0      	b.n	8007e32 <_svfiprintf_r+0x192>
 8007e50:	ab03      	add	r3, sp, #12
 8007e52:	9300      	str	r3, [sp, #0]
 8007e54:	462a      	mov	r2, r5
 8007e56:	4638      	mov	r0, r7
 8007e58:	4b0e      	ldr	r3, [pc, #56]	@ (8007e94 <_svfiprintf_r+0x1f4>)
 8007e5a:	a904      	add	r1, sp, #16
 8007e5c:	f3af 8000 	nop.w
 8007e60:	1c42      	adds	r2, r0, #1
 8007e62:	4606      	mov	r6, r0
 8007e64:	d1d6      	bne.n	8007e14 <_svfiprintf_r+0x174>
 8007e66:	89ab      	ldrh	r3, [r5, #12]
 8007e68:	065b      	lsls	r3, r3, #25
 8007e6a:	f53f af2d 	bmi.w	8007cc8 <_svfiprintf_r+0x28>
 8007e6e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007e70:	e72c      	b.n	8007ccc <_svfiprintf_r+0x2c>
 8007e72:	ab03      	add	r3, sp, #12
 8007e74:	9300      	str	r3, [sp, #0]
 8007e76:	462a      	mov	r2, r5
 8007e78:	4638      	mov	r0, r7
 8007e7a:	4b06      	ldr	r3, [pc, #24]	@ (8007e94 <_svfiprintf_r+0x1f4>)
 8007e7c:	a904      	add	r1, sp, #16
 8007e7e:	f000 f87d 	bl	8007f7c <_printf_i>
 8007e82:	e7ed      	b.n	8007e60 <_svfiprintf_r+0x1c0>
 8007e84:	080083aa 	.word	0x080083aa
 8007e88:	080083b0 	.word	0x080083b0
 8007e8c:	080083b4 	.word	0x080083b4
 8007e90:	00000000 	.word	0x00000000
 8007e94:	08007be9 	.word	0x08007be9

08007e98 <_printf_common>:
 8007e98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e9c:	4616      	mov	r6, r2
 8007e9e:	4698      	mov	r8, r3
 8007ea0:	688a      	ldr	r2, [r1, #8]
 8007ea2:	690b      	ldr	r3, [r1, #16]
 8007ea4:	4607      	mov	r7, r0
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	bfb8      	it	lt
 8007eaa:	4613      	movlt	r3, r2
 8007eac:	6033      	str	r3, [r6, #0]
 8007eae:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007eb2:	460c      	mov	r4, r1
 8007eb4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007eb8:	b10a      	cbz	r2, 8007ebe <_printf_common+0x26>
 8007eba:	3301      	adds	r3, #1
 8007ebc:	6033      	str	r3, [r6, #0]
 8007ebe:	6823      	ldr	r3, [r4, #0]
 8007ec0:	0699      	lsls	r1, r3, #26
 8007ec2:	bf42      	ittt	mi
 8007ec4:	6833      	ldrmi	r3, [r6, #0]
 8007ec6:	3302      	addmi	r3, #2
 8007ec8:	6033      	strmi	r3, [r6, #0]
 8007eca:	6825      	ldr	r5, [r4, #0]
 8007ecc:	f015 0506 	ands.w	r5, r5, #6
 8007ed0:	d106      	bne.n	8007ee0 <_printf_common+0x48>
 8007ed2:	f104 0a19 	add.w	sl, r4, #25
 8007ed6:	68e3      	ldr	r3, [r4, #12]
 8007ed8:	6832      	ldr	r2, [r6, #0]
 8007eda:	1a9b      	subs	r3, r3, r2
 8007edc:	42ab      	cmp	r3, r5
 8007ede:	dc2b      	bgt.n	8007f38 <_printf_common+0xa0>
 8007ee0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007ee4:	6822      	ldr	r2, [r4, #0]
 8007ee6:	3b00      	subs	r3, #0
 8007ee8:	bf18      	it	ne
 8007eea:	2301      	movne	r3, #1
 8007eec:	0692      	lsls	r2, r2, #26
 8007eee:	d430      	bmi.n	8007f52 <_printf_common+0xba>
 8007ef0:	4641      	mov	r1, r8
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ef8:	47c8      	blx	r9
 8007efa:	3001      	adds	r0, #1
 8007efc:	d023      	beq.n	8007f46 <_printf_common+0xae>
 8007efe:	6823      	ldr	r3, [r4, #0]
 8007f00:	6922      	ldr	r2, [r4, #16]
 8007f02:	f003 0306 	and.w	r3, r3, #6
 8007f06:	2b04      	cmp	r3, #4
 8007f08:	bf14      	ite	ne
 8007f0a:	2500      	movne	r5, #0
 8007f0c:	6833      	ldreq	r3, [r6, #0]
 8007f0e:	f04f 0600 	mov.w	r6, #0
 8007f12:	bf08      	it	eq
 8007f14:	68e5      	ldreq	r5, [r4, #12]
 8007f16:	f104 041a 	add.w	r4, r4, #26
 8007f1a:	bf08      	it	eq
 8007f1c:	1aed      	subeq	r5, r5, r3
 8007f1e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007f22:	bf08      	it	eq
 8007f24:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007f28:	4293      	cmp	r3, r2
 8007f2a:	bfc4      	itt	gt
 8007f2c:	1a9b      	subgt	r3, r3, r2
 8007f2e:	18ed      	addgt	r5, r5, r3
 8007f30:	42b5      	cmp	r5, r6
 8007f32:	d11a      	bne.n	8007f6a <_printf_common+0xd2>
 8007f34:	2000      	movs	r0, #0
 8007f36:	e008      	b.n	8007f4a <_printf_common+0xb2>
 8007f38:	2301      	movs	r3, #1
 8007f3a:	4652      	mov	r2, sl
 8007f3c:	4641      	mov	r1, r8
 8007f3e:	4638      	mov	r0, r7
 8007f40:	47c8      	blx	r9
 8007f42:	3001      	adds	r0, #1
 8007f44:	d103      	bne.n	8007f4e <_printf_common+0xb6>
 8007f46:	f04f 30ff 	mov.w	r0, #4294967295
 8007f4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f4e:	3501      	adds	r5, #1
 8007f50:	e7c1      	b.n	8007ed6 <_printf_common+0x3e>
 8007f52:	2030      	movs	r0, #48	@ 0x30
 8007f54:	18e1      	adds	r1, r4, r3
 8007f56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007f5a:	1c5a      	adds	r2, r3, #1
 8007f5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007f60:	4422      	add	r2, r4
 8007f62:	3302      	adds	r3, #2
 8007f64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007f68:	e7c2      	b.n	8007ef0 <_printf_common+0x58>
 8007f6a:	2301      	movs	r3, #1
 8007f6c:	4622      	mov	r2, r4
 8007f6e:	4641      	mov	r1, r8
 8007f70:	4638      	mov	r0, r7
 8007f72:	47c8      	blx	r9
 8007f74:	3001      	adds	r0, #1
 8007f76:	d0e6      	beq.n	8007f46 <_printf_common+0xae>
 8007f78:	3601      	adds	r6, #1
 8007f7a:	e7d9      	b.n	8007f30 <_printf_common+0x98>

08007f7c <_printf_i>:
 8007f7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f80:	7e0f      	ldrb	r7, [r1, #24]
 8007f82:	4691      	mov	r9, r2
 8007f84:	2f78      	cmp	r7, #120	@ 0x78
 8007f86:	4680      	mov	r8, r0
 8007f88:	460c      	mov	r4, r1
 8007f8a:	469a      	mov	sl, r3
 8007f8c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007f8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007f92:	d807      	bhi.n	8007fa4 <_printf_i+0x28>
 8007f94:	2f62      	cmp	r7, #98	@ 0x62
 8007f96:	d80a      	bhi.n	8007fae <_printf_i+0x32>
 8007f98:	2f00      	cmp	r7, #0
 8007f9a:	f000 80d1 	beq.w	8008140 <_printf_i+0x1c4>
 8007f9e:	2f58      	cmp	r7, #88	@ 0x58
 8007fa0:	f000 80b8 	beq.w	8008114 <_printf_i+0x198>
 8007fa4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007fa8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007fac:	e03a      	b.n	8008024 <_printf_i+0xa8>
 8007fae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007fb2:	2b15      	cmp	r3, #21
 8007fb4:	d8f6      	bhi.n	8007fa4 <_printf_i+0x28>
 8007fb6:	a101      	add	r1, pc, #4	@ (adr r1, 8007fbc <_printf_i+0x40>)
 8007fb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007fbc:	08008015 	.word	0x08008015
 8007fc0:	08008029 	.word	0x08008029
 8007fc4:	08007fa5 	.word	0x08007fa5
 8007fc8:	08007fa5 	.word	0x08007fa5
 8007fcc:	08007fa5 	.word	0x08007fa5
 8007fd0:	08007fa5 	.word	0x08007fa5
 8007fd4:	08008029 	.word	0x08008029
 8007fd8:	08007fa5 	.word	0x08007fa5
 8007fdc:	08007fa5 	.word	0x08007fa5
 8007fe0:	08007fa5 	.word	0x08007fa5
 8007fe4:	08007fa5 	.word	0x08007fa5
 8007fe8:	08008127 	.word	0x08008127
 8007fec:	08008053 	.word	0x08008053
 8007ff0:	080080e1 	.word	0x080080e1
 8007ff4:	08007fa5 	.word	0x08007fa5
 8007ff8:	08007fa5 	.word	0x08007fa5
 8007ffc:	08008149 	.word	0x08008149
 8008000:	08007fa5 	.word	0x08007fa5
 8008004:	08008053 	.word	0x08008053
 8008008:	08007fa5 	.word	0x08007fa5
 800800c:	08007fa5 	.word	0x08007fa5
 8008010:	080080e9 	.word	0x080080e9
 8008014:	6833      	ldr	r3, [r6, #0]
 8008016:	1d1a      	adds	r2, r3, #4
 8008018:	681b      	ldr	r3, [r3, #0]
 800801a:	6032      	str	r2, [r6, #0]
 800801c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008020:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008024:	2301      	movs	r3, #1
 8008026:	e09c      	b.n	8008162 <_printf_i+0x1e6>
 8008028:	6833      	ldr	r3, [r6, #0]
 800802a:	6820      	ldr	r0, [r4, #0]
 800802c:	1d19      	adds	r1, r3, #4
 800802e:	6031      	str	r1, [r6, #0]
 8008030:	0606      	lsls	r6, r0, #24
 8008032:	d501      	bpl.n	8008038 <_printf_i+0xbc>
 8008034:	681d      	ldr	r5, [r3, #0]
 8008036:	e003      	b.n	8008040 <_printf_i+0xc4>
 8008038:	0645      	lsls	r5, r0, #25
 800803a:	d5fb      	bpl.n	8008034 <_printf_i+0xb8>
 800803c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008040:	2d00      	cmp	r5, #0
 8008042:	da03      	bge.n	800804c <_printf_i+0xd0>
 8008044:	232d      	movs	r3, #45	@ 0x2d
 8008046:	426d      	negs	r5, r5
 8008048:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800804c:	230a      	movs	r3, #10
 800804e:	4858      	ldr	r0, [pc, #352]	@ (80081b0 <_printf_i+0x234>)
 8008050:	e011      	b.n	8008076 <_printf_i+0xfa>
 8008052:	6821      	ldr	r1, [r4, #0]
 8008054:	6833      	ldr	r3, [r6, #0]
 8008056:	0608      	lsls	r0, r1, #24
 8008058:	f853 5b04 	ldr.w	r5, [r3], #4
 800805c:	d402      	bmi.n	8008064 <_printf_i+0xe8>
 800805e:	0649      	lsls	r1, r1, #25
 8008060:	bf48      	it	mi
 8008062:	b2ad      	uxthmi	r5, r5
 8008064:	2f6f      	cmp	r7, #111	@ 0x6f
 8008066:	6033      	str	r3, [r6, #0]
 8008068:	bf14      	ite	ne
 800806a:	230a      	movne	r3, #10
 800806c:	2308      	moveq	r3, #8
 800806e:	4850      	ldr	r0, [pc, #320]	@ (80081b0 <_printf_i+0x234>)
 8008070:	2100      	movs	r1, #0
 8008072:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008076:	6866      	ldr	r6, [r4, #4]
 8008078:	2e00      	cmp	r6, #0
 800807a:	60a6      	str	r6, [r4, #8]
 800807c:	db05      	blt.n	800808a <_printf_i+0x10e>
 800807e:	6821      	ldr	r1, [r4, #0]
 8008080:	432e      	orrs	r6, r5
 8008082:	f021 0104 	bic.w	r1, r1, #4
 8008086:	6021      	str	r1, [r4, #0]
 8008088:	d04b      	beq.n	8008122 <_printf_i+0x1a6>
 800808a:	4616      	mov	r6, r2
 800808c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008090:	fb03 5711 	mls	r7, r3, r1, r5
 8008094:	5dc7      	ldrb	r7, [r0, r7]
 8008096:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800809a:	462f      	mov	r7, r5
 800809c:	42bb      	cmp	r3, r7
 800809e:	460d      	mov	r5, r1
 80080a0:	d9f4      	bls.n	800808c <_printf_i+0x110>
 80080a2:	2b08      	cmp	r3, #8
 80080a4:	d10b      	bne.n	80080be <_printf_i+0x142>
 80080a6:	6823      	ldr	r3, [r4, #0]
 80080a8:	07df      	lsls	r7, r3, #31
 80080aa:	d508      	bpl.n	80080be <_printf_i+0x142>
 80080ac:	6923      	ldr	r3, [r4, #16]
 80080ae:	6861      	ldr	r1, [r4, #4]
 80080b0:	4299      	cmp	r1, r3
 80080b2:	bfde      	ittt	le
 80080b4:	2330      	movle	r3, #48	@ 0x30
 80080b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80080ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80080be:	1b92      	subs	r2, r2, r6
 80080c0:	6122      	str	r2, [r4, #16]
 80080c2:	464b      	mov	r3, r9
 80080c4:	4621      	mov	r1, r4
 80080c6:	4640      	mov	r0, r8
 80080c8:	f8cd a000 	str.w	sl, [sp]
 80080cc:	aa03      	add	r2, sp, #12
 80080ce:	f7ff fee3 	bl	8007e98 <_printf_common>
 80080d2:	3001      	adds	r0, #1
 80080d4:	d14a      	bne.n	800816c <_printf_i+0x1f0>
 80080d6:	f04f 30ff 	mov.w	r0, #4294967295
 80080da:	b004      	add	sp, #16
 80080dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80080e0:	6823      	ldr	r3, [r4, #0]
 80080e2:	f043 0320 	orr.w	r3, r3, #32
 80080e6:	6023      	str	r3, [r4, #0]
 80080e8:	2778      	movs	r7, #120	@ 0x78
 80080ea:	4832      	ldr	r0, [pc, #200]	@ (80081b4 <_printf_i+0x238>)
 80080ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80080f0:	6823      	ldr	r3, [r4, #0]
 80080f2:	6831      	ldr	r1, [r6, #0]
 80080f4:	061f      	lsls	r7, r3, #24
 80080f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80080fa:	d402      	bmi.n	8008102 <_printf_i+0x186>
 80080fc:	065f      	lsls	r7, r3, #25
 80080fe:	bf48      	it	mi
 8008100:	b2ad      	uxthmi	r5, r5
 8008102:	6031      	str	r1, [r6, #0]
 8008104:	07d9      	lsls	r1, r3, #31
 8008106:	bf44      	itt	mi
 8008108:	f043 0320 	orrmi.w	r3, r3, #32
 800810c:	6023      	strmi	r3, [r4, #0]
 800810e:	b11d      	cbz	r5, 8008118 <_printf_i+0x19c>
 8008110:	2310      	movs	r3, #16
 8008112:	e7ad      	b.n	8008070 <_printf_i+0xf4>
 8008114:	4826      	ldr	r0, [pc, #152]	@ (80081b0 <_printf_i+0x234>)
 8008116:	e7e9      	b.n	80080ec <_printf_i+0x170>
 8008118:	6823      	ldr	r3, [r4, #0]
 800811a:	f023 0320 	bic.w	r3, r3, #32
 800811e:	6023      	str	r3, [r4, #0]
 8008120:	e7f6      	b.n	8008110 <_printf_i+0x194>
 8008122:	4616      	mov	r6, r2
 8008124:	e7bd      	b.n	80080a2 <_printf_i+0x126>
 8008126:	6833      	ldr	r3, [r6, #0]
 8008128:	6825      	ldr	r5, [r4, #0]
 800812a:	1d18      	adds	r0, r3, #4
 800812c:	6961      	ldr	r1, [r4, #20]
 800812e:	6030      	str	r0, [r6, #0]
 8008130:	062e      	lsls	r6, r5, #24
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	d501      	bpl.n	800813a <_printf_i+0x1be>
 8008136:	6019      	str	r1, [r3, #0]
 8008138:	e002      	b.n	8008140 <_printf_i+0x1c4>
 800813a:	0668      	lsls	r0, r5, #25
 800813c:	d5fb      	bpl.n	8008136 <_printf_i+0x1ba>
 800813e:	8019      	strh	r1, [r3, #0]
 8008140:	2300      	movs	r3, #0
 8008142:	4616      	mov	r6, r2
 8008144:	6123      	str	r3, [r4, #16]
 8008146:	e7bc      	b.n	80080c2 <_printf_i+0x146>
 8008148:	6833      	ldr	r3, [r6, #0]
 800814a:	2100      	movs	r1, #0
 800814c:	1d1a      	adds	r2, r3, #4
 800814e:	6032      	str	r2, [r6, #0]
 8008150:	681e      	ldr	r6, [r3, #0]
 8008152:	6862      	ldr	r2, [r4, #4]
 8008154:	4630      	mov	r0, r6
 8008156:	f000 f83f 	bl	80081d8 <memchr>
 800815a:	b108      	cbz	r0, 8008160 <_printf_i+0x1e4>
 800815c:	1b80      	subs	r0, r0, r6
 800815e:	6060      	str	r0, [r4, #4]
 8008160:	6863      	ldr	r3, [r4, #4]
 8008162:	6123      	str	r3, [r4, #16]
 8008164:	2300      	movs	r3, #0
 8008166:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800816a:	e7aa      	b.n	80080c2 <_printf_i+0x146>
 800816c:	4632      	mov	r2, r6
 800816e:	4649      	mov	r1, r9
 8008170:	4640      	mov	r0, r8
 8008172:	6923      	ldr	r3, [r4, #16]
 8008174:	47d0      	blx	sl
 8008176:	3001      	adds	r0, #1
 8008178:	d0ad      	beq.n	80080d6 <_printf_i+0x15a>
 800817a:	6823      	ldr	r3, [r4, #0]
 800817c:	079b      	lsls	r3, r3, #30
 800817e:	d413      	bmi.n	80081a8 <_printf_i+0x22c>
 8008180:	68e0      	ldr	r0, [r4, #12]
 8008182:	9b03      	ldr	r3, [sp, #12]
 8008184:	4298      	cmp	r0, r3
 8008186:	bfb8      	it	lt
 8008188:	4618      	movlt	r0, r3
 800818a:	e7a6      	b.n	80080da <_printf_i+0x15e>
 800818c:	2301      	movs	r3, #1
 800818e:	4632      	mov	r2, r6
 8008190:	4649      	mov	r1, r9
 8008192:	4640      	mov	r0, r8
 8008194:	47d0      	blx	sl
 8008196:	3001      	adds	r0, #1
 8008198:	d09d      	beq.n	80080d6 <_printf_i+0x15a>
 800819a:	3501      	adds	r5, #1
 800819c:	68e3      	ldr	r3, [r4, #12]
 800819e:	9903      	ldr	r1, [sp, #12]
 80081a0:	1a5b      	subs	r3, r3, r1
 80081a2:	42ab      	cmp	r3, r5
 80081a4:	dcf2      	bgt.n	800818c <_printf_i+0x210>
 80081a6:	e7eb      	b.n	8008180 <_printf_i+0x204>
 80081a8:	2500      	movs	r5, #0
 80081aa:	f104 0619 	add.w	r6, r4, #25
 80081ae:	e7f5      	b.n	800819c <_printf_i+0x220>
 80081b0:	080083bb 	.word	0x080083bb
 80081b4:	080083cc 	.word	0x080083cc

080081b8 <_sbrk_r>:
 80081b8:	b538      	push	{r3, r4, r5, lr}
 80081ba:	2300      	movs	r3, #0
 80081bc:	4d05      	ldr	r5, [pc, #20]	@ (80081d4 <_sbrk_r+0x1c>)
 80081be:	4604      	mov	r4, r0
 80081c0:	4608      	mov	r0, r1
 80081c2:	602b      	str	r3, [r5, #0]
 80081c4:	f7f9 ff4e 	bl	8002064 <_sbrk>
 80081c8:	1c43      	adds	r3, r0, #1
 80081ca:	d102      	bne.n	80081d2 <_sbrk_r+0x1a>
 80081cc:	682b      	ldr	r3, [r5, #0]
 80081ce:	b103      	cbz	r3, 80081d2 <_sbrk_r+0x1a>
 80081d0:	6023      	str	r3, [r4, #0]
 80081d2:	bd38      	pop	{r3, r4, r5, pc}
 80081d4:	20001c7c 	.word	0x20001c7c

080081d8 <memchr>:
 80081d8:	4603      	mov	r3, r0
 80081da:	b510      	push	{r4, lr}
 80081dc:	b2c9      	uxtb	r1, r1
 80081de:	4402      	add	r2, r0
 80081e0:	4293      	cmp	r3, r2
 80081e2:	4618      	mov	r0, r3
 80081e4:	d101      	bne.n	80081ea <memchr+0x12>
 80081e6:	2000      	movs	r0, #0
 80081e8:	e003      	b.n	80081f2 <memchr+0x1a>
 80081ea:	7804      	ldrb	r4, [r0, #0]
 80081ec:	3301      	adds	r3, #1
 80081ee:	428c      	cmp	r4, r1
 80081f0:	d1f6      	bne.n	80081e0 <memchr+0x8>
 80081f2:	bd10      	pop	{r4, pc}

080081f4 <_realloc_r>:
 80081f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081f8:	4607      	mov	r7, r0
 80081fa:	4614      	mov	r4, r2
 80081fc:	460d      	mov	r5, r1
 80081fe:	b921      	cbnz	r1, 800820a <_realloc_r+0x16>
 8008200:	4611      	mov	r1, r2
 8008202:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008206:	f7ff bc63 	b.w	8007ad0 <_malloc_r>
 800820a:	b92a      	cbnz	r2, 8008218 <_realloc_r+0x24>
 800820c:	f7ff fbf6 	bl	80079fc <_free_r>
 8008210:	4625      	mov	r5, r4
 8008212:	4628      	mov	r0, r5
 8008214:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008218:	f000 f81a 	bl	8008250 <_malloc_usable_size_r>
 800821c:	4284      	cmp	r4, r0
 800821e:	4606      	mov	r6, r0
 8008220:	d802      	bhi.n	8008228 <_realloc_r+0x34>
 8008222:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008226:	d8f4      	bhi.n	8008212 <_realloc_r+0x1e>
 8008228:	4621      	mov	r1, r4
 800822a:	4638      	mov	r0, r7
 800822c:	f7ff fc50 	bl	8007ad0 <_malloc_r>
 8008230:	4680      	mov	r8, r0
 8008232:	b908      	cbnz	r0, 8008238 <_realloc_r+0x44>
 8008234:	4645      	mov	r5, r8
 8008236:	e7ec      	b.n	8008212 <_realloc_r+0x1e>
 8008238:	42b4      	cmp	r4, r6
 800823a:	4622      	mov	r2, r4
 800823c:	4629      	mov	r1, r5
 800823e:	bf28      	it	cs
 8008240:	4632      	movcs	r2, r6
 8008242:	f7ff fbcd 	bl	80079e0 <memcpy>
 8008246:	4629      	mov	r1, r5
 8008248:	4638      	mov	r0, r7
 800824a:	f7ff fbd7 	bl	80079fc <_free_r>
 800824e:	e7f1      	b.n	8008234 <_realloc_r+0x40>

08008250 <_malloc_usable_size_r>:
 8008250:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008254:	1f18      	subs	r0, r3, #4
 8008256:	2b00      	cmp	r3, #0
 8008258:	bfbc      	itt	lt
 800825a:	580b      	ldrlt	r3, [r1, r0]
 800825c:	18c0      	addlt	r0, r0, r3
 800825e:	4770      	bx	lr

08008260 <abort>:
 8008260:	2006      	movs	r0, #6
 8008262:	b508      	push	{r3, lr}
 8008264:	f000 f82c 	bl	80082c0 <raise>
 8008268:	2001      	movs	r0, #1
 800826a:	f7f9 fef0 	bl	800204e <_exit>

0800826e <_raise_r>:
 800826e:	291f      	cmp	r1, #31
 8008270:	b538      	push	{r3, r4, r5, lr}
 8008272:	4605      	mov	r5, r0
 8008274:	460c      	mov	r4, r1
 8008276:	d904      	bls.n	8008282 <_raise_r+0x14>
 8008278:	2316      	movs	r3, #22
 800827a:	6003      	str	r3, [r0, #0]
 800827c:	f04f 30ff 	mov.w	r0, #4294967295
 8008280:	bd38      	pop	{r3, r4, r5, pc}
 8008282:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008284:	b112      	cbz	r2, 800828c <_raise_r+0x1e>
 8008286:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800828a:	b94b      	cbnz	r3, 80082a0 <_raise_r+0x32>
 800828c:	4628      	mov	r0, r5
 800828e:	f000 f831 	bl	80082f4 <_getpid_r>
 8008292:	4622      	mov	r2, r4
 8008294:	4601      	mov	r1, r0
 8008296:	4628      	mov	r0, r5
 8008298:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800829c:	f000 b818 	b.w	80082d0 <_kill_r>
 80082a0:	2b01      	cmp	r3, #1
 80082a2:	d00a      	beq.n	80082ba <_raise_r+0x4c>
 80082a4:	1c59      	adds	r1, r3, #1
 80082a6:	d103      	bne.n	80082b0 <_raise_r+0x42>
 80082a8:	2316      	movs	r3, #22
 80082aa:	6003      	str	r3, [r0, #0]
 80082ac:	2001      	movs	r0, #1
 80082ae:	e7e7      	b.n	8008280 <_raise_r+0x12>
 80082b0:	2100      	movs	r1, #0
 80082b2:	4620      	mov	r0, r4
 80082b4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80082b8:	4798      	blx	r3
 80082ba:	2000      	movs	r0, #0
 80082bc:	e7e0      	b.n	8008280 <_raise_r+0x12>
	...

080082c0 <raise>:
 80082c0:	4b02      	ldr	r3, [pc, #8]	@ (80082cc <raise+0xc>)
 80082c2:	4601      	mov	r1, r0
 80082c4:	6818      	ldr	r0, [r3, #0]
 80082c6:	f7ff bfd2 	b.w	800826e <_raise_r>
 80082ca:	bf00      	nop
 80082cc:	20000010 	.word	0x20000010

080082d0 <_kill_r>:
 80082d0:	b538      	push	{r3, r4, r5, lr}
 80082d2:	2300      	movs	r3, #0
 80082d4:	4d06      	ldr	r5, [pc, #24]	@ (80082f0 <_kill_r+0x20>)
 80082d6:	4604      	mov	r4, r0
 80082d8:	4608      	mov	r0, r1
 80082da:	4611      	mov	r1, r2
 80082dc:	602b      	str	r3, [r5, #0]
 80082de:	f7f9 fea6 	bl	800202e <_kill>
 80082e2:	1c43      	adds	r3, r0, #1
 80082e4:	d102      	bne.n	80082ec <_kill_r+0x1c>
 80082e6:	682b      	ldr	r3, [r5, #0]
 80082e8:	b103      	cbz	r3, 80082ec <_kill_r+0x1c>
 80082ea:	6023      	str	r3, [r4, #0]
 80082ec:	bd38      	pop	{r3, r4, r5, pc}
 80082ee:	bf00      	nop
 80082f0:	20001c7c 	.word	0x20001c7c

080082f4 <_getpid_r>:
 80082f4:	f7f9 be94 	b.w	8002020 <_getpid>

080082f8 <_init>:
 80082f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80082fa:	bf00      	nop
 80082fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80082fe:	bc08      	pop	{r3}
 8008300:	469e      	mov	lr, r3
 8008302:	4770      	bx	lr

08008304 <_fini>:
 8008304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008306:	bf00      	nop
 8008308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800830a:	bc08      	pop	{r3}
 800830c:	469e      	mov	lr, r3
 800830e:	4770      	bx	lr
