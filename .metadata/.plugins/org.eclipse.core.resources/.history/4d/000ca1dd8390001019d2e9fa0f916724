/*
 * Stepper.c
 *
 *  Created on: Sep 10, 2025
 *      Author: Andrea
 */
#include <Stepper.hpp>


Stepper::Stepper(int8_t ID, int32_t Resolution, int32_t Acc) {
    id = ID;
    resolution = Resolution;
    Acceleration = Acc;
    HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); // Avvia PWM sul canale 1
    last_update = HAL_GetTick();
}

void Stepper::ProfileVelocity(int32_t rpm){
	uint32_t now = HAL_GetTick();
	float dt = (now - last_update) / 1000.0f; // dt in secondi

	last_update = now;
	if (rpm < Current_Speed){
		Current_Speed -= Acceleration*dt;
		if (Current_Speed < rpm){ Current_Speed = rpm;}
	}else if(rpm > Current_Speed){
		Current_Speed += Acceleration*dt;
		if (Current_Speed > rpm){ Current_Speed = rpm;}
	}
	setStepsFreq(Rpm_to_StepS(rpm));
}

void Stepper::QuickStop(){
	Current_Speed = 0;
	Target_Speed = 0;
    __HAL_TIM_DISABLE(&htim1);                         // Ferma il timer
    __HAL_TIM_SET_AUTORELOAD(&htim1, 1000);             // Imposta ARR
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0); // Imposta duty cycle
    __HAL_TIM_ENABLE(&htim1);                          // Riavvia il timer

}

void Stepper::setStepsFreq(uint32_t StepPerS) {
	//valore di arr => 64MHz / (Prescalar (63)+1) / arr = Hz PWM
	if (StepPerS == 0) StepPerS = 1; // evita divisione per zero
	uint32_t arr = 1000000 / StepPerS;

    if (StepPerS <= 0) {
    	__HAL_TIM_DISABLE(&htim1);                         // Ferma il timer
		__HAL_TIM_SET_AUTORELOAD(&htim1, arr);             // Imposta ARR
		__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, 0); // Imposta duty cycle
		__HAL_TIM_ENABLE(&htim1);
        return;
    }

    __HAL_TIM_DISABLE(&htim1);                         // Ferma il timer
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr);             // Imposta ARR
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, arr/2); // Imposta duty cycle
    __HAL_TIM_ENABLE(&htim1);                          // Riavvia il timer
}

int32_t Stepper::Rpm_to_StepS (int32_t rpm){
	return (resolution*rpm)/60;
}

