/*
 * Stepper.c
 *
 *  Created on: Sep 10, 2025
 *      Author: Andrea
 */
#include <Stepper.hpp>


Stepper::Stepper(int8_t ID, int32_t Resolution, int32_t Acc) {
    id = ID;
    resolution = Resolution;
    Acceleration = Acc;
}

void Stepper::ProfileVelocity(){
	uint32_t now = HAL_GetTick();
	int32_t dt = (now - last_update)/1000;
	if (Rpm < Current_Speed){
		Current_Speed += Acceleration*dt;
		if (Current_Speed > Target_Speed) Current_Speed = Target_Speed;
	}else if(Rpm > Current_Speed){
		Current_Speed -= Acceleration*dt;
		if (Current_Speed < Target_Speed) Current_Speed = Target_Speed;
	}
	setStepsFreq(Rpm_to_ARR(Current_Speed));
}

void Stepper::QuickStop(){
	Current_Speed = 0;
	Target_Speed = 0;
    __HAL_TIM_DISABLE(&htim1);                         // Ferma il timer
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr);             // Imposta ARR
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, arr); // Imposta duty cycle
    __HAL_TIM_ENABLE(&htim1);                          // Riavvia il timer

}

void Stepper::setStepsFreq(uint32_t arr) {
	//valore di arr => 64MHz / (Prescalar (63)+1) / arr = Hz PWM
    __HAL_TIM_DISABLE(&htim1);                         // Ferma il timer
    __HAL_TIM_SET_AUTORELOAD(&htim1, arr);             // Imposta ARR
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, arr/2); // Imposta duty cycle
    __HAL_TIM_ENABLE(&htim1);                          // Riavvia il timer
}

void Rpm_to_ARR (int32_t rpm){
	return (1000000*60)/(resolution*rpm);
}
