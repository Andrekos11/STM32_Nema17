
LowLevelSTM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031ec  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  080032f8  080032f8  000042f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003324  08003324  0000500c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  08003324  08003324  0000500c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  08003324  08003324  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  08003324  08003324  00004324  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800332c  0800332c  0000432c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003330  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b0  2000000c  0800333c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001bc  0800333c  000051bc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ce06  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000024f3  00000000  00000000  00011e3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00014330  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f8  00000000  00000000  00015000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001a110  00000000  00000000  000159f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fb00  00000000  00000000  0002fb08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c357  00000000  00000000  0003f608  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cb95f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003474  00000000  00000000  000cb9a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  000cee18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	080032e0 	.word	0x080032e0

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	080032e0 	.word	0x080032e0

0800014c <__aeabi_f2iz>:
 800014c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000150:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000154:	d30f      	bcc.n	8000176 <__aeabi_f2iz+0x2a>
 8000156:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 800015a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 800015e:	d90d      	bls.n	800017c <__aeabi_f2iz+0x30>
 8000160:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000164:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000168:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 800016c:	fa23 f002 	lsr.w	r0, r3, r2
 8000170:	bf18      	it	ne
 8000172:	4240      	negne	r0, r0
 8000174:	4770      	bx	lr
 8000176:	f04f 0000 	mov.w	r0, #0
 800017a:	4770      	bx	lr
 800017c:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000180:	d101      	bne.n	8000186 <__aeabi_f2iz+0x3a>
 8000182:	0242      	lsls	r2, r0, #9
 8000184:	d105      	bne.n	8000192 <__aeabi_f2iz+0x46>
 8000186:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 800018a:	bf08      	it	eq
 800018c:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000190:	4770      	bx	lr
 8000192:	f04f 0000 	mov.w	r0, #0
 8000196:	4770      	bx	lr

08000198 <_ZN7StepperC1Ev>:
		float Target_Speed=0;   									//Target speed value
		float Acceleration=0;   									//Acceleration, quadratic ramp
		float Actual_position=0;
		float Target_position=0;
		uint32_t last_update = 0;
		Stepper(){}
 8000198:	b480      	push	{r7}
 800019a:	b083      	sub	sp, #12
 800019c:	af00      	add	r7, sp, #0
 800019e:	6078      	str	r0, [r7, #4]
 80001a0:	687b      	ldr	r3, [r7, #4]
 80001a2:	f04f 0200 	mov.w	r2, #0
 80001a6:	609a      	str	r2, [r3, #8]
 80001a8:	687b      	ldr	r3, [r7, #4]
 80001aa:	f04f 0200 	mov.w	r2, #0
 80001ae:	60da      	str	r2, [r3, #12]
 80001b0:	687b      	ldr	r3, [r7, #4]
 80001b2:	f04f 0200 	mov.w	r2, #0
 80001b6:	611a      	str	r2, [r3, #16]
 80001b8:	687b      	ldr	r3, [r7, #4]
 80001ba:	f04f 0200 	mov.w	r2, #0
 80001be:	615a      	str	r2, [r3, #20]
 80001c0:	687b      	ldr	r3, [r7, #4]
 80001c2:	f04f 0200 	mov.w	r2, #0
 80001c6:	619a      	str	r2, [r3, #24]
 80001c8:	687b      	ldr	r3, [r7, #4]
 80001ca:	2200      	movs	r2, #0
 80001cc:	61da      	str	r2, [r3, #28]
 80001ce:	687b      	ldr	r3, [r7, #4]
 80001d0:	4618      	mov	r0, r3
 80001d2:	370c      	adds	r7, #12
 80001d4:	46bd      	mov	sp, r7
 80001d6:	bc80      	pop	{r7}
 80001d8:	4770      	bx	lr

080001da <_ZN7MyUSARTC1Ehh>:
 */
#include "ComunicationLib.hpp"



MyUSART::MyUSART (uint8_t Header, uint8_t ClosingBit){
 80001da:	b480      	push	{r7}
 80001dc:	b085      	sub	sp, #20
 80001de:	af00      	add	r7, sp, #0
 80001e0:	6078      	str	r0, [r7, #4]
 80001e2:	460b      	mov	r3, r1
 80001e4:	70fb      	strb	r3, [r7, #3]
 80001e6:	4613      	mov	r3, r2
 80001e8:	70bb      	strb	r3, [r7, #2]
 80001ea:	687b      	ldr	r3, [r7, #4]
 80001ec:	2210      	movs	r2, #16
 80001ee:	601a      	str	r2, [r3, #0]
	header = Header;
 80001f0:	687b      	ldr	r3, [r7, #4]
 80001f2:	78fa      	ldrb	r2, [r7, #3]
 80001f4:	711a      	strb	r2, [r3, #4]
	closing_bit = ClosingBit;
 80001f6:	687b      	ldr	r3, [r7, #4]
 80001f8:	78ba      	ldrb	r2, [r7, #2]
 80001fa:	715a      	strb	r2, [r3, #5]
	for(int i=0; i<BufferLen; i++){
 80001fc:	2300      	movs	r3, #0
 80001fe:	60fb      	str	r3, [r7, #12]
 8000200:	e008      	b.n	8000214 <_ZN7MyUSARTC1Ehh+0x3a>
		rx_buffer[i]=0x00;
 8000202:	687a      	ldr	r2, [r7, #4]
 8000204:	68fb      	ldr	r3, [r7, #12]
 8000206:	4413      	add	r3, r2
 8000208:	3306      	adds	r3, #6
 800020a:	2200      	movs	r2, #0
 800020c:	701a      	strb	r2, [r3, #0]
	for(int i=0; i<BufferLen; i++){
 800020e:	68fb      	ldr	r3, [r7, #12]
 8000210:	3301      	adds	r3, #1
 8000212:	60fb      	str	r3, [r7, #12]
 8000214:	687b      	ldr	r3, [r7, #4]
 8000216:	681b      	ldr	r3, [r3, #0]
 8000218:	68fa      	ldr	r2, [r7, #12]
 800021a:	429a      	cmp	r2, r3
 800021c:	dbf1      	blt.n	8000202 <_ZN7MyUSARTC1Ehh+0x28>
	}
}
 800021e:	687b      	ldr	r3, [r7, #4]
 8000220:	4618      	mov	r0, r3
 8000222:	3714      	adds	r7, #20
 8000224:	46bd      	mov	sp, r7
 8000226:	bc80      	pop	{r7}
 8000228:	4770      	bx	lr
	...

0800022c <_ZN7MyUSART11Analyse_msgEv>:

MyUSART Uart1(0xAA, 0xEE);

Stepper Nodo[5];

void MyUSART :: Analyse_msg(){
 800022c:	b5b0      	push	{r4, r5, r7, lr}
 800022e:	b08a      	sub	sp, #40	@ 0x28
 8000230:	af00      	add	r7, sp, #0
 8000232:	6078      	str	r0, [r7, #4]
	switch(rx_buffer[2]){
 8000234:	687b      	ldr	r3, [r7, #4]
 8000236:	7a1b      	ldrb	r3, [r3, #8]
 8000238:	2b02      	cmp	r3, #2
 800023a:	d044      	beq.n	80002c6 <_ZN7MyUSART11Analyse_msgEv+0x9a>
 800023c:	2b02      	cmp	r3, #2
 800023e:	dc54      	bgt.n	80002ea <_ZN7MyUSART11Analyse_msgEv+0xbe>
 8000240:	2b00      	cmp	r3, #0
 8000242:	d002      	beq.n	800024a <_ZN7MyUSART11Analyse_msgEv+0x1e>
 8000244:	2b01      	cmp	r3, #1
 8000246:	d02c      	beq.n	80002a2 <_ZN7MyUSART11Analyse_msgEv+0x76>
	case 1: Nodo[rx_buffer[1]].SetVelocity(FloatExtraction(rx_buffer, 3));
		break;
	case 2: Nodo[rx_buffer[1]].SetAcceleration(FloatExtraction(rx_buffer, 7));
		break;
	}
}
 8000248:	e04f      	b.n	80002ea <_ZN7MyUSART11Analyse_msgEv+0xbe>
		Nodo[rx_buffer[1]]= Stepper(rx_buffer[1], FloatExtraction(rx_buffer, 3), FloatExtraction(rx_buffer, 7));
 800024a:	687b      	ldr	r3, [r7, #4]
 800024c:	79db      	ldrb	r3, [r3, #7]
 800024e:	b25c      	sxtb	r4, r3
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	3306      	adds	r3, #6
 8000254:	2203      	movs	r2, #3
 8000256:	4619      	mov	r1, r3
 8000258:	6878      	ldr	r0, [r7, #4]
 800025a:	f000 f86d 	bl	8000338 <_ZN7MyUSART15FloatExtractionEPKhi>
 800025e:	4603      	mov	r3, r0
 8000260:	4618      	mov	r0, r3
 8000262:	f7ff ff73 	bl	800014c <__aeabi_f2iz>
 8000266:	4605      	mov	r5, r0
 8000268:	687b      	ldr	r3, [r7, #4]
 800026a:	3306      	adds	r3, #6
 800026c:	2207      	movs	r2, #7
 800026e:	4619      	mov	r1, r3
 8000270:	6878      	ldr	r0, [r7, #4]
 8000272:	f000 f861 	bl	8000338 <_ZN7MyUSART15FloatExtractionEPKhi>
 8000276:	4603      	mov	r3, r0
 8000278:	f107 0008 	add.w	r0, r7, #8
 800027c:	462a      	mov	r2, r5
 800027e:	4621      	mov	r1, r4
 8000280:	f000 f88c 	bl	800039c <_ZN7StepperC1Ealf>
 8000284:	687b      	ldr	r3, [r7, #4]
 8000286:	79db      	ldrb	r3, [r3, #7]
 8000288:	4a1a      	ldr	r2, [pc, #104]	@ (80002f4 <_ZN7MyUSART11Analyse_msgEv+0xc8>)
 800028a:	015b      	lsls	r3, r3, #5
 800028c:	4413      	add	r3, r2
 800028e:	461d      	mov	r5, r3
 8000290:	f107 0408 	add.w	r4, r7, #8
 8000294:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000296:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000298:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800029c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
		break;
 80002a0:	e023      	b.n	80002ea <_ZN7MyUSART11Analyse_msgEv+0xbe>
	case 1: Nodo[rx_buffer[1]].SetVelocity(FloatExtraction(rx_buffer, 3));
 80002a2:	687b      	ldr	r3, [r7, #4]
 80002a4:	79db      	ldrb	r3, [r3, #7]
 80002a6:	015b      	lsls	r3, r3, #5
 80002a8:	4a12      	ldr	r2, [pc, #72]	@ (80002f4 <_ZN7MyUSART11Analyse_msgEv+0xc8>)
 80002aa:	189c      	adds	r4, r3, r2
 80002ac:	687b      	ldr	r3, [r7, #4]
 80002ae:	3306      	adds	r3, #6
 80002b0:	2203      	movs	r2, #3
 80002b2:	4619      	mov	r1, r3
 80002b4:	6878      	ldr	r0, [r7, #4]
 80002b6:	f000 f83f 	bl	8000338 <_ZN7MyUSART15FloatExtractionEPKhi>
 80002ba:	4603      	mov	r3, r0
 80002bc:	4619      	mov	r1, r3
 80002be:	4620      	mov	r0, r4
 80002c0:	f000 f8c1 	bl	8000446 <_ZN7Stepper11SetVelocityEf>
		break;
 80002c4:	e011      	b.n	80002ea <_ZN7MyUSART11Analyse_msgEv+0xbe>
	case 2: Nodo[rx_buffer[1]].SetAcceleration(FloatExtraction(rx_buffer, 7));
 80002c6:	687b      	ldr	r3, [r7, #4]
 80002c8:	79db      	ldrb	r3, [r3, #7]
 80002ca:	015b      	lsls	r3, r3, #5
 80002cc:	4a09      	ldr	r2, [pc, #36]	@ (80002f4 <_ZN7MyUSART11Analyse_msgEv+0xc8>)
 80002ce:	189c      	adds	r4, r3, r2
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	3306      	adds	r3, #6
 80002d4:	2207      	movs	r2, #7
 80002d6:	4619      	mov	r1, r3
 80002d8:	6878      	ldr	r0, [r7, #4]
 80002da:	f000 f82d 	bl	8000338 <_ZN7MyUSART15FloatExtractionEPKhi>
 80002de:	4603      	mov	r3, r0
 80002e0:	4619      	mov	r1, r3
 80002e2:	4620      	mov	r0, r4
 80002e4:	f000 f8a2 	bl	800042c <_ZN7Stepper15SetAccelerationEf>
		break;
 80002e8:	bf00      	nop
}
 80002ea:	bf00      	nop
 80002ec:	3728      	adds	r7, #40	@ 0x28
 80002ee:	46bd      	mov	sp, r7
 80002f0:	bdb0      	pop	{r4, r5, r7, pc}
 80002f2:	bf00      	nop
 80002f4:	20000040 	.word	0x20000040

080002f8 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80002f8:	b580      	push	{r7, lr}
 80002fa:	b082      	sub	sp, #8
 80002fc:	af00      	add	r7, sp, #0
 80002fe:	6078      	str	r0, [r7, #4]
  if (huart->Instance == USART1)
 8000300:	687b      	ldr	r3, [r7, #4]
 8000302:	681b      	ldr	r3, [r3, #0]
 8000304:	4a08      	ldr	r2, [pc, #32]	@ (8000328 <HAL_UART_RxCpltCallback+0x30>)
 8000306:	4293      	cmp	r3, r2
 8000308:	d10a      	bne.n	8000320 <HAL_UART_RxCpltCallback+0x28>
  {
	//HAL_GPIO_TogglePin(Led_GPIO_Port,Led_Pin);
    //HAL_UART_Transmit(&huart1, tx_buff, 10, HAL_MAX_DELAY);
	Uart1.Analyse_msg();
 800030a:	4808      	ldr	r0, [pc, #32]	@ (800032c <HAL_UART_RxCpltCallback+0x34>)
 800030c:	f7ff ff8e 	bl	800022c <_ZN7MyUSART11Analyse_msgEv>
    HAL_UART_Receive_IT(&huart1, Uart1.rx_buffer , Uart1.BufferLen);
 8000310:	4b06      	ldr	r3, [pc, #24]	@ (800032c <HAL_UART_RxCpltCallback+0x34>)
 8000312:	681b      	ldr	r3, [r3, #0]
 8000314:	b29b      	uxth	r3, r3
 8000316:	461a      	mov	r2, r3
 8000318:	4905      	ldr	r1, [pc, #20]	@ (8000330 <HAL_UART_RxCpltCallback+0x38>)
 800031a:	4806      	ldr	r0, [pc, #24]	@ (8000334 <HAL_UART_RxCpltCallback+0x3c>)
 800031c:	f002 fa7d 	bl	800281a <HAL_UART_Receive_IT>
  }
}
 8000320:	bf00      	nop
 8000322:	3708      	adds	r7, #8
 8000324:	46bd      	mov	sp, r7
 8000326:	bd80      	pop	{r7, pc}
 8000328:	40013800 	.word	0x40013800
 800032c:	20000028 	.word	0x20000028
 8000330:	2000002e 	.word	0x2000002e
 8000334:	20000170 	.word	0x20000170

08000338 <_ZN7MyUSART15FloatExtractionEPKhi>:

float MyUSART::FloatExtraction(const uint8_t buffer[16], int pos){
 8000338:	b480      	push	{r7}
 800033a:	b087      	sub	sp, #28
 800033c:	af00      	add	r7, sp, #0
 800033e:	60f8      	str	r0, [r7, #12]
 8000340:	60b9      	str	r1, [r7, #8]
 8000342:	607a      	str	r2, [r7, #4]
	float valore;
	std::memcpy(&valore, buffer + pos, sizeof(float));
 8000344:	687b      	ldr	r3, [r7, #4]
 8000346:	68ba      	ldr	r2, [r7, #8]
 8000348:	4413      	add	r3, r2
 800034a:	681b      	ldr	r3, [r3, #0]
 800034c:	617b      	str	r3, [r7, #20]
	return valore;
 800034e:	697b      	ldr	r3, [r7, #20]
}
 8000350:	4618      	mov	r0, r3
 8000352:	371c      	adds	r7, #28
 8000354:	46bd      	mov	sp, r7
 8000356:	bc80      	pop	{r7}
 8000358:	4770      	bx	lr
	...

0800035c <_Z41__static_initialization_and_destruction_0v>:
 800035c:	b5b0      	push	{r4, r5, r7, lr}
 800035e:	af00      	add	r7, sp, #0
MyUSART Uart1(0xAA, 0xEE);
 8000360:	22ee      	movs	r2, #238	@ 0xee
 8000362:	21aa      	movs	r1, #170	@ 0xaa
 8000364:	4808      	ldr	r0, [pc, #32]	@ (8000388 <_Z41__static_initialization_and_destruction_0v+0x2c>)
 8000366:	f7ff ff38 	bl	80001da <_ZN7MyUSARTC1Ehh>
Stepper Nodo[5];
 800036a:	4b08      	ldr	r3, [pc, #32]	@ (800038c <_Z41__static_initialization_and_destruction_0v+0x30>)
 800036c:	2404      	movs	r4, #4
 800036e:	461d      	mov	r5, r3
 8000370:	e004      	b.n	800037c <_Z41__static_initialization_and_destruction_0v+0x20>
 8000372:	4628      	mov	r0, r5
 8000374:	f7ff ff10 	bl	8000198 <_ZN7StepperC1Ev>
 8000378:	3c01      	subs	r4, #1
 800037a:	3520      	adds	r5, #32
 800037c:	2c00      	cmp	r4, #0
 800037e:	daf8      	bge.n	8000372 <_Z41__static_initialization_and_destruction_0v+0x16>
}
 8000380:	bf00      	nop
 8000382:	bf00      	nop
 8000384:	bdb0      	pop	{r4, r5, r7, pc}
 8000386:	bf00      	nop
 8000388:	20000028 	.word	0x20000028
 800038c:	20000040 	.word	0x20000040

08000390 <_GLOBAL__sub_I__ZN7MyUSARTC2Ehh>:
 8000390:	b580      	push	{r7, lr}
 8000392:	af00      	add	r7, sp, #0
 8000394:	f7ff ffe2 	bl	800035c <_Z41__static_initialization_and_destruction_0v>
 8000398:	bd80      	pop	{r7, pc}
	...

0800039c <_ZN7StepperC1Ealf>:
 */
#include <Stepper.hpp>



Stepper::Stepper(int8_t ID, int32_t Resolution, float Acc) {
 800039c:	b580      	push	{r7, lr}
 800039e:	b084      	sub	sp, #16
 80003a0:	af00      	add	r7, sp, #0
 80003a2:	60f8      	str	r0, [r7, #12]
 80003a4:	607a      	str	r2, [r7, #4]
 80003a6:	603b      	str	r3, [r7, #0]
 80003a8:	460b      	mov	r3, r1
 80003aa:	72fb      	strb	r3, [r7, #11]
 80003ac:	68fb      	ldr	r3, [r7, #12]
 80003ae:	f04f 0200 	mov.w	r2, #0
 80003b2:	609a      	str	r2, [r3, #8]
 80003b4:	68fb      	ldr	r3, [r7, #12]
 80003b6:	f04f 0200 	mov.w	r2, #0
 80003ba:	60da      	str	r2, [r3, #12]
 80003bc:	68fb      	ldr	r3, [r7, #12]
 80003be:	f04f 0200 	mov.w	r2, #0
 80003c2:	611a      	str	r2, [r3, #16]
 80003c4:	68fb      	ldr	r3, [r7, #12]
 80003c6:	f04f 0200 	mov.w	r2, #0
 80003ca:	615a      	str	r2, [r3, #20]
 80003cc:	68fb      	ldr	r3, [r7, #12]
 80003ce:	f04f 0200 	mov.w	r2, #0
 80003d2:	619a      	str	r2, [r3, #24]
 80003d4:	68fb      	ldr	r3, [r7, #12]
 80003d6:	2200      	movs	r2, #0
 80003d8:	61da      	str	r2, [r3, #28]
    id = ID;
 80003da:	68fb      	ldr	r3, [r7, #12]
 80003dc:	7afa      	ldrb	r2, [r7, #11]
 80003de:	701a      	strb	r2, [r3, #0]
    resolution = Resolution;
 80003e0:	68fb      	ldr	r3, [r7, #12]
 80003e2:	687a      	ldr	r2, [r7, #4]
 80003e4:	605a      	str	r2, [r3, #4]
    Acceleration = Acc;
 80003e6:	68fb      	ldr	r3, [r7, #12]
 80003e8:	683a      	ldr	r2, [r7, #0]
 80003ea:	611a      	str	r2, [r3, #16]
    switch(id){
 80003ec:	68fb      	ldr	r3, [r7, #12]
 80003ee:	f993 3000 	ldrsb.w	r3, [r3]
 80003f2:	2b01      	cmp	r3, #1
 80003f4:	d002      	beq.n	80003fc <_ZN7StepperC1Ealf+0x60>
 80003f6:	2b02      	cmp	r3, #2
 80003f8:	d005      	beq.n	8000406 <_ZN7StepperC1Ealf+0x6a>
 80003fa:	e009      	b.n	8000410 <_ZN7StepperC1Ealf+0x74>
    case 1: HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1); break;
 80003fc:	2100      	movs	r1, #0
 80003fe:	4809      	ldr	r0, [pc, #36]	@ (8000424 <_ZN7StepperC1Ealf+0x88>)
 8000400:	f001 fc30 	bl	8001c64 <HAL_TIM_PWM_Start>
 8000404:	e004      	b.n	8000410 <_ZN7StepperC1Ealf+0x74>
    case 2: HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_2); break;
 8000406:	2104      	movs	r1, #4
 8000408:	4807      	ldr	r0, [pc, #28]	@ (8000428 <_ZN7StepperC1Ealf+0x8c>)
 800040a:	f001 fc2b 	bl	8001c64 <HAL_TIM_PWM_Start>
 800040e:	bf00      	nop
    }

    last_update = HAL_GetTick();
 8000410:	f000 fc0a 	bl	8000c28 <HAL_GetTick>
 8000414:	4602      	mov	r2, r0
 8000416:	68fb      	ldr	r3, [r7, #12]
 8000418:	61da      	str	r2, [r3, #28]
}
 800041a:	68fb      	ldr	r3, [r7, #12]
 800041c:	4618      	mov	r0, r3
 800041e:	3710      	adds	r7, #16
 8000420:	46bd      	mov	sp, r7
 8000422:	bd80      	pop	{r7, pc}
 8000424:	200000e0 	.word	0x200000e0
 8000428:	20000128 	.word	0x20000128

0800042c <_ZN7Stepper15SetAccelerationEf>:



void Stepper::SetAcceleration(float acc)
{
 800042c:	b480      	push	{r7}
 800042e:	b083      	sub	sp, #12
 8000430:	af00      	add	r7, sp, #0
 8000432:	6078      	str	r0, [r7, #4]
 8000434:	6039      	str	r1, [r7, #0]
	Acceleration = acc;
 8000436:	687b      	ldr	r3, [r7, #4]
 8000438:	683a      	ldr	r2, [r7, #0]
 800043a:	611a      	str	r2, [r3, #16]
}
 800043c:	bf00      	nop
 800043e:	370c      	adds	r7, #12
 8000440:	46bd      	mov	sp, r7
 8000442:	bc80      	pop	{r7}
 8000444:	4770      	bx	lr

08000446 <_ZN7Stepper11SetVelocityEf>:
void Stepper::SetVelocity(float rpm)
{
 8000446:	b480      	push	{r7}
 8000448:	b083      	sub	sp, #12
 800044a:	af00      	add	r7, sp, #0
 800044c:	6078      	str	r0, [r7, #4]
 800044e:	6039      	str	r1, [r7, #0]
	Target_Speed = rpm;
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	683a      	ldr	r2, [r7, #0]
 8000454:	60da      	str	r2, [r3, #12]
}
 8000456:	bf00      	nop
 8000458:	370c      	adds	r7, #12
 800045a:	46bd      	mov	sp, r7
 800045c:	bc80      	pop	{r7}
 800045e:	4770      	bx	lr

08000460 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000460:	b580      	push	{r7, lr}
 8000462:	b088      	sub	sp, #32
 8000464:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000466:	f107 0310 	add.w	r3, r7, #16
 800046a:	2200      	movs	r2, #0
 800046c:	601a      	str	r2, [r3, #0]
 800046e:	605a      	str	r2, [r3, #4]
 8000470:	609a      	str	r2, [r3, #8]
 8000472:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000474:	4b39      	ldr	r3, [pc, #228]	@ (800055c <MX_GPIO_Init+0xfc>)
 8000476:	699b      	ldr	r3, [r3, #24]
 8000478:	4a38      	ldr	r2, [pc, #224]	@ (800055c <MX_GPIO_Init+0xfc>)
 800047a:	f043 0310 	orr.w	r3, r3, #16
 800047e:	6193      	str	r3, [r2, #24]
 8000480:	4b36      	ldr	r3, [pc, #216]	@ (800055c <MX_GPIO_Init+0xfc>)
 8000482:	699b      	ldr	r3, [r3, #24]
 8000484:	f003 0310 	and.w	r3, r3, #16
 8000488:	60fb      	str	r3, [r7, #12]
 800048a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800048c:	4b33      	ldr	r3, [pc, #204]	@ (800055c <MX_GPIO_Init+0xfc>)
 800048e:	699b      	ldr	r3, [r3, #24]
 8000490:	4a32      	ldr	r2, [pc, #200]	@ (800055c <MX_GPIO_Init+0xfc>)
 8000492:	f043 0320 	orr.w	r3, r3, #32
 8000496:	6193      	str	r3, [r2, #24]
 8000498:	4b30      	ldr	r3, [pc, #192]	@ (800055c <MX_GPIO_Init+0xfc>)
 800049a:	699b      	ldr	r3, [r3, #24]
 800049c:	f003 0320 	and.w	r3, r3, #32
 80004a0:	60bb      	str	r3, [r7, #8]
 80004a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004a4:	4b2d      	ldr	r3, [pc, #180]	@ (800055c <MX_GPIO_Init+0xfc>)
 80004a6:	699b      	ldr	r3, [r3, #24]
 80004a8:	4a2c      	ldr	r2, [pc, #176]	@ (800055c <MX_GPIO_Init+0xfc>)
 80004aa:	f043 0304 	orr.w	r3, r3, #4
 80004ae:	6193      	str	r3, [r2, #24]
 80004b0:	4b2a      	ldr	r3, [pc, #168]	@ (800055c <MX_GPIO_Init+0xfc>)
 80004b2:	699b      	ldr	r3, [r3, #24]
 80004b4:	f003 0304 	and.w	r3, r3, #4
 80004b8:	607b      	str	r3, [r7, #4]
 80004ba:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004bc:	4b27      	ldr	r3, [pc, #156]	@ (800055c <MX_GPIO_Init+0xfc>)
 80004be:	699b      	ldr	r3, [r3, #24]
 80004c0:	4a26      	ldr	r2, [pc, #152]	@ (800055c <MX_GPIO_Init+0xfc>)
 80004c2:	f043 0308 	orr.w	r3, r3, #8
 80004c6:	6193      	str	r3, [r2, #24]
 80004c8:	4b24      	ldr	r3, [pc, #144]	@ (800055c <MX_GPIO_Init+0xfc>)
 80004ca:	699b      	ldr	r3, [r3, #24]
 80004cc:	f003 0308 	and.w	r3, r3, #8
 80004d0:	603b      	str	r3, [r7, #0]
 80004d2:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Led_GPIO_Port, Led_Pin, GPIO_PIN_RESET);
 80004d4:	2200      	movs	r2, #0
 80004d6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80004da:	4821      	ldr	r0, [pc, #132]	@ (8000560 <MX_GPIO_Init+0x100>)
 80004dc:	f000 fef2 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, ResetMotors_Pin|SleepMotors_Pin, GPIO_PIN_SET);
 80004e0:	2201      	movs	r2, #1
 80004e2:	2130      	movs	r1, #48	@ 0x30
 80004e4:	481f      	ldr	r0, [pc, #124]	@ (8000564 <MX_GPIO_Init+0x104>)
 80004e6:	f000 feed 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, Nema1_Dir_Pin|Nema1_En_Pin, GPIO_PIN_RESET);
 80004ea:	2200      	movs	r2, #0
 80004ec:	21c0      	movs	r1, #192	@ 0xc0
 80004ee:	481d      	ldr	r0, [pc, #116]	@ (8000564 <MX_GPIO_Init+0x104>)
 80004f0:	f000 fee8 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, Nema3_En_Pin|Nema3_Dir_Pin|Nema2_En_Pin|Nema2_Dir_Pin, GPIO_PIN_RESET);
 80004f4:	2200      	movs	r2, #0
 80004f6:	21f0      	movs	r1, #240	@ 0xf0
 80004f8:	481b      	ldr	r0, [pc, #108]	@ (8000568 <MX_GPIO_Init+0x108>)
 80004fa:	f000 fee3 	bl	80012c4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Led_Pin */
  GPIO_InitStruct.Pin = Led_Pin;
 80004fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000502:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000504:	2301      	movs	r3, #1
 8000506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000508:	2300      	movs	r3, #0
 800050a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800050c:	2302      	movs	r3, #2
 800050e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(Led_GPIO_Port, &GPIO_InitStruct);
 8000510:	f107 0310 	add.w	r3, r7, #16
 8000514:	4619      	mov	r1, r3
 8000516:	4812      	ldr	r0, [pc, #72]	@ (8000560 <MX_GPIO_Init+0x100>)
 8000518:	f000 fd50 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : ResetMotors_Pin SleepMotors_Pin Nema1_Dir_Pin Nema1_En_Pin */
  GPIO_InitStruct.Pin = ResetMotors_Pin|SleepMotors_Pin|Nema1_Dir_Pin|Nema1_En_Pin;
 800051c:	23f0      	movs	r3, #240	@ 0xf0
 800051e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000520:	2301      	movs	r3, #1
 8000522:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000524:	2300      	movs	r3, #0
 8000526:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000528:	2302      	movs	r3, #2
 800052a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800052c:	f107 0310 	add.w	r3, r7, #16
 8000530:	4619      	mov	r1, r3
 8000532:	480c      	ldr	r0, [pc, #48]	@ (8000564 <MX_GPIO_Init+0x104>)
 8000534:	f000 fd42 	bl	8000fbc <HAL_GPIO_Init>

  /*Configure GPIO pins : Nema3_En_Pin Nema3_Dir_Pin Nema2_En_Pin Nema2_Dir_Pin */
  GPIO_InitStruct.Pin = Nema3_En_Pin|Nema3_Dir_Pin|Nema2_En_Pin|Nema2_Dir_Pin;
 8000538:	23f0      	movs	r3, #240	@ 0xf0
 800053a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800053c:	2301      	movs	r3, #1
 800053e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000540:	2300      	movs	r3, #0
 8000542:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000544:	2302      	movs	r3, #2
 8000546:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000548:	f107 0310 	add.w	r3, r7, #16
 800054c:	4619      	mov	r1, r3
 800054e:	4806      	ldr	r0, [pc, #24]	@ (8000568 <MX_GPIO_Init+0x108>)
 8000550:	f000 fd34 	bl	8000fbc <HAL_GPIO_Init>

}
 8000554:	bf00      	nop
 8000556:	3720      	adds	r7, #32
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40021000 	.word	0x40021000
 8000560:	40011000 	.word	0x40011000
 8000564:	40010800 	.word	0x40010800
 8000568:	40010c00 	.word	0x40010c00

0800056c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000570:	f000 fb02 	bl	8000b78 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000574:	f000 f80a 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000578:	f7ff ff72 	bl	8000460 <MX_GPIO_Init>
  MX_TIM1_Init();
 800057c:	f000 f8c0 	bl	8000700 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000580:	f000 f95e 	bl	8000840 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000584:	f000 fa54 	bl	8000a30 <MX_USART1_UART_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	bf00      	nop
 800058a:	e7fd      	b.n	8000588 <main+0x1c>

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b090      	sub	sp, #64	@ 0x40
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0318 	add.w	r3, r7, #24
 8000596:	2228      	movs	r2, #40	@ 0x28
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f002 fe74 	bl	8003288 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	1d3b      	adds	r3, r7, #4
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005ae:	2301      	movs	r3, #1
 80005b0:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005b2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005b6:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005b8:	2300      	movs	r3, #0
 80005ba:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005bc:	2301      	movs	r3, #1
 80005be:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005c0:	2302      	movs	r3, #2
 80005c2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80005ca:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80005ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005d0:	f107 0318 	add.w	r3, r7, #24
 80005d4:	4618      	mov	r0, r3
 80005d6:	f000 fe8d 	bl	80012f4 <HAL_RCC_OscConfig>
 80005da:	4603      	mov	r3, r0
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d001      	beq.n	80005e4 <SystemClock_Config+0x58>
  {
    Error_Handler();
 80005e0:	f000 f819 	bl	8000616 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e4:	230f      	movs	r3, #15
 80005e6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ec:	2300      	movs	r3, #0
 80005ee:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80005f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005f6:	2300      	movs	r3, #0
 80005f8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80005fa:	1d3b      	adds	r3, r7, #4
 80005fc:	2102      	movs	r1, #2
 80005fe:	4618      	mov	r0, r3
 8000600:	f001 f8fa 	bl	80017f8 <HAL_RCC_ClockConfig>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0x82>
  {
    Error_Handler();
 800060a:	f000 f804 	bl	8000616 <Error_Handler>
  }
}
 800060e:	bf00      	nop
 8000610:	3740      	adds	r7, #64	@ 0x40
 8000612:	46bd      	mov	sp, r7
 8000614:	bd80      	pop	{r7, pc}

08000616 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000616:	b480      	push	{r7}
 8000618:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800061a:	b672      	cpsid	i
}
 800061c:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800061e:	bf00      	nop
 8000620:	e7fd      	b.n	800061e <Error_Handler+0x8>
	...

08000624 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000624:	b480      	push	{r7}
 8000626:	b085      	sub	sp, #20
 8000628:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800062a:	4b15      	ldr	r3, [pc, #84]	@ (8000680 <HAL_MspInit+0x5c>)
 800062c:	699b      	ldr	r3, [r3, #24]
 800062e:	4a14      	ldr	r2, [pc, #80]	@ (8000680 <HAL_MspInit+0x5c>)
 8000630:	f043 0301 	orr.w	r3, r3, #1
 8000634:	6193      	str	r3, [r2, #24]
 8000636:	4b12      	ldr	r3, [pc, #72]	@ (8000680 <HAL_MspInit+0x5c>)
 8000638:	699b      	ldr	r3, [r3, #24]
 800063a:	f003 0301 	and.w	r3, r3, #1
 800063e:	60bb      	str	r3, [r7, #8]
 8000640:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000642:	4b0f      	ldr	r3, [pc, #60]	@ (8000680 <HAL_MspInit+0x5c>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a0e      	ldr	r2, [pc, #56]	@ (8000680 <HAL_MspInit+0x5c>)
 8000648:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b0c      	ldr	r3, [pc, #48]	@ (8000680 <HAL_MspInit+0x5c>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000656:	607b      	str	r3, [r7, #4]
 8000658:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** DISABLE: JTAG-DP Disabled and SW-DP Disabled
  */
  __HAL_AFIO_REMAP_SWJ_DISABLE();
 800065a:	4b0a      	ldr	r3, [pc, #40]	@ (8000684 <HAL_MspInit+0x60>)
 800065c:	685b      	ldr	r3, [r3, #4]
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000666:	60fb      	str	r3, [r7, #12]
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	4a04      	ldr	r2, [pc, #16]	@ (8000684 <HAL_MspInit+0x60>)
 8000672:	68fb      	ldr	r3, [r7, #12]
 8000674:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000676:	bf00      	nop
 8000678:	3714      	adds	r7, #20
 800067a:	46bd      	mov	sp, r7
 800067c:	bc80      	pop	{r7}
 800067e:	4770      	bx	lr
 8000680:	40021000 	.word	0x40021000
 8000684:	40010000 	.word	0x40010000

08000688 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800068c:	bf00      	nop
 800068e:	e7fd      	b.n	800068c <NMI_Handler+0x4>

08000690 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000690:	b480      	push	{r7}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000694:	bf00      	nop
 8000696:	e7fd      	b.n	8000694 <HardFault_Handler+0x4>

08000698 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000698:	b480      	push	{r7}
 800069a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800069c:	bf00      	nop
 800069e:	e7fd      	b.n	800069c <MemManage_Handler+0x4>

080006a0 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006a4:	bf00      	nop
 80006a6:	e7fd      	b.n	80006a4 <BusFault_Handler+0x4>

080006a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006ac:	bf00      	nop
 80006ae:	e7fd      	b.n	80006ac <UsageFault_Handler+0x4>

080006b0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006b4:	bf00      	nop
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bc80      	pop	{r7}
 80006ba:	4770      	bx	lr

080006bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006c0:	bf00      	nop
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bc80      	pop	{r7}
 80006c6:	4770      	bx	lr

080006c8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006c8:	b480      	push	{r7}
 80006ca:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006cc:	bf00      	nop
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bc80      	pop	{r7}
 80006d2:	4770      	bx	lr

080006d4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006d8:	f000 fa94 	bl	8000c04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006dc:	bf00      	nop
 80006de:	bd80      	pop	{r7, pc}

080006e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80006e4:	4802      	ldr	r0, [pc, #8]	@ (80006f0 <USART1_IRQHandler+0x10>)
 80006e6:	f002 f8bd 	bl	8002864 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80006ea:	bf00      	nop
 80006ec:	bd80      	pop	{r7, pc}
 80006ee:	bf00      	nop
 80006f0:	20000170 	.word	0x20000170

080006f4 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006f4:	b480      	push	{r7}
 80006f6:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80006f8:	bf00      	nop
 80006fa:	46bd      	mov	sp, r7
 80006fc:	bc80      	pop	{r7}
 80006fe:	4770      	bx	lr

08000700 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b096      	sub	sp, #88	@ 0x58
 8000704:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000706:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 800070a:	2200      	movs	r2, #0
 800070c:	601a      	str	r2, [r3, #0]
 800070e:	605a      	str	r2, [r3, #4]
 8000710:	609a      	str	r2, [r3, #8]
 8000712:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000714:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8000718:	2200      	movs	r2, #0
 800071a:	601a      	str	r2, [r3, #0]
 800071c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800071e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]
 800072e:	615a      	str	r2, [r3, #20]
 8000730:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000732:	1d3b      	adds	r3, r7, #4
 8000734:	2220      	movs	r2, #32
 8000736:	2100      	movs	r1, #0
 8000738:	4618      	mov	r0, r3
 800073a:	f002 fda5 	bl	8003288 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800073e:	4b3e      	ldr	r3, [pc, #248]	@ (8000838 <MX_TIM1_Init+0x138>)
 8000740:	4a3e      	ldr	r2, [pc, #248]	@ (800083c <MX_TIM1_Init+0x13c>)
 8000742:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000744:	4b3c      	ldr	r3, [pc, #240]	@ (8000838 <MX_TIM1_Init+0x138>)
 8000746:	2200      	movs	r2, #0
 8000748:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800074a:	4b3b      	ldr	r3, [pc, #236]	@ (8000838 <MX_TIM1_Init+0x138>)
 800074c:	2200      	movs	r2, #0
 800074e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000750:	4b39      	ldr	r3, [pc, #228]	@ (8000838 <MX_TIM1_Init+0x138>)
 8000752:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000756:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000758:	4b37      	ldr	r3, [pc, #220]	@ (8000838 <MX_TIM1_Init+0x138>)
 800075a:	2200      	movs	r2, #0
 800075c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800075e:	4b36      	ldr	r3, [pc, #216]	@ (8000838 <MX_TIM1_Init+0x138>)
 8000760:	2200      	movs	r2, #0
 8000762:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000764:	4b34      	ldr	r3, [pc, #208]	@ (8000838 <MX_TIM1_Init+0x138>)
 8000766:	2200      	movs	r2, #0
 8000768:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800076a:	4833      	ldr	r0, [pc, #204]	@ (8000838 <MX_TIM1_Init+0x138>)
 800076c:	f001 f9d2 	bl	8001b14 <HAL_TIM_Base_Init>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8000776:	f7ff ff4e 	bl	8000616 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800077a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800077e:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000780:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8000784:	4619      	mov	r1, r3
 8000786:	482c      	ldr	r0, [pc, #176]	@ (8000838 <MX_TIM1_Init+0x138>)
 8000788:	f001 fbd0 	bl	8001f2c <HAL_TIM_ConfigClockSource>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d001      	beq.n	8000796 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8000792:	f7ff ff40 	bl	8000616 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000796:	4828      	ldr	r0, [pc, #160]	@ (8000838 <MX_TIM1_Init+0x138>)
 8000798:	f001 fa0b 	bl	8001bb2 <HAL_TIM_PWM_Init>
 800079c:	4603      	mov	r3, r0
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d001      	beq.n	80007a6 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80007a2:	f7ff ff38 	bl	8000616 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007a6:	2300      	movs	r3, #0
 80007a8:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007aa:	2300      	movs	r3, #0
 80007ac:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80007ae:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80007b2:	4619      	mov	r1, r3
 80007b4:	4820      	ldr	r0, [pc, #128]	@ (8000838 <MX_TIM1_Init+0x138>)
 80007b6:	f001 ff31 	bl	800261c <HAL_TIMEx_MasterConfigSynchronization>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d001      	beq.n	80007c4 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80007c0:	f7ff ff29 	bl	8000616 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80007c4:	2360      	movs	r3, #96	@ 0x60
 80007c6:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 80007c8:	2300      	movs	r3, #0
 80007ca:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80007d0:	2300      	movs	r3, #0
 80007d2:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007d4:	2300      	movs	r3, #0
 80007d6:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80007d8:	2300      	movs	r3, #0
 80007da:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80007dc:	2300      	movs	r3, #0
 80007de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80007e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007e4:	2200      	movs	r2, #0
 80007e6:	4619      	mov	r1, r3
 80007e8:	4813      	ldr	r0, [pc, #76]	@ (8000838 <MX_TIM1_Init+0x138>)
 80007ea:	f001 fadd 	bl	8001da8 <HAL_TIM_PWM_ConfigChannel>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 80007f4:	f7ff ff0f 	bl	8000616 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80007f8:	2300      	movs	r3, #0
 80007fa:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80007fc:	2300      	movs	r3, #0
 80007fe:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000800:	2300      	movs	r3, #0
 8000802:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000804:	2300      	movs	r3, #0
 8000806:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800080c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000810:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000812:	2300      	movs	r3, #0
 8000814:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000816:	1d3b      	adds	r3, r7, #4
 8000818:	4619      	mov	r1, r3
 800081a:	4807      	ldr	r0, [pc, #28]	@ (8000838 <MX_TIM1_Init+0x138>)
 800081c:	f001 ff5c 	bl	80026d8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000826:	f7ff fef6 	bl	8000616 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800082a:	4803      	ldr	r0, [pc, #12]	@ (8000838 <MX_TIM1_Init+0x138>)
 800082c:	f000 f8ae 	bl	800098c <HAL_TIM_MspPostInit>

}
 8000830:	bf00      	nop
 8000832:	3758      	adds	r7, #88	@ 0x58
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	200000e0 	.word	0x200000e0
 800083c:	40012c00 	.word	0x40012c00

08000840 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b08e      	sub	sp, #56	@ 0x38
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000846:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800084a:	2200      	movs	r2, #0
 800084c:	601a      	str	r2, [r3, #0]
 800084e:	605a      	str	r2, [r3, #4]
 8000850:	609a      	str	r2, [r3, #8]
 8000852:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000854:	f107 0320 	add.w	r3, r7, #32
 8000858:	2200      	movs	r2, #0
 800085a:	601a      	str	r2, [r3, #0]
 800085c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2200      	movs	r2, #0
 8000862:	601a      	str	r2, [r3, #0]
 8000864:	605a      	str	r2, [r3, #4]
 8000866:	609a      	str	r2, [r3, #8]
 8000868:	60da      	str	r2, [r3, #12]
 800086a:	611a      	str	r2, [r3, #16]
 800086c:	615a      	str	r2, [r3, #20]
 800086e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000870:	4b2d      	ldr	r3, [pc, #180]	@ (8000928 <MX_TIM2_Init+0xe8>)
 8000872:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000876:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8000878:	4b2b      	ldr	r3, [pc, #172]	@ (8000928 <MX_TIM2_Init+0xe8>)
 800087a:	2200      	movs	r2, #0
 800087c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800087e:	4b2a      	ldr	r3, [pc, #168]	@ (8000928 <MX_TIM2_Init+0xe8>)
 8000880:	2200      	movs	r2, #0
 8000882:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000884:	4b28      	ldr	r3, [pc, #160]	@ (8000928 <MX_TIM2_Init+0xe8>)
 8000886:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800088a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800088c:	4b26      	ldr	r3, [pc, #152]	@ (8000928 <MX_TIM2_Init+0xe8>)
 800088e:	2200      	movs	r2, #0
 8000890:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000892:	4b25      	ldr	r3, [pc, #148]	@ (8000928 <MX_TIM2_Init+0xe8>)
 8000894:	2200      	movs	r2, #0
 8000896:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000898:	4823      	ldr	r0, [pc, #140]	@ (8000928 <MX_TIM2_Init+0xe8>)
 800089a:	f001 f93b 	bl	8001b14 <HAL_TIM_Base_Init>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d001      	beq.n	80008a8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80008a4:	f7ff feb7 	bl	8000616 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ae:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80008b2:	4619      	mov	r1, r3
 80008b4:	481c      	ldr	r0, [pc, #112]	@ (8000928 <MX_TIM2_Init+0xe8>)
 80008b6:	f001 fb39 	bl	8001f2c <HAL_TIM_ConfigClockSource>
 80008ba:	4603      	mov	r3, r0
 80008bc:	2b00      	cmp	r3, #0
 80008be:	d001      	beq.n	80008c4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 80008c0:	f7ff fea9 	bl	8000616 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80008c4:	4818      	ldr	r0, [pc, #96]	@ (8000928 <MX_TIM2_Init+0xe8>)
 80008c6:	f001 f974 	bl	8001bb2 <HAL_TIM_PWM_Init>
 80008ca:	4603      	mov	r3, r0
 80008cc:	2b00      	cmp	r3, #0
 80008ce:	d001      	beq.n	80008d4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 80008d0:	f7ff fea1 	bl	8000616 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008d4:	2300      	movs	r3, #0
 80008d6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008d8:	2300      	movs	r3, #0
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008dc:	f107 0320 	add.w	r3, r7, #32
 80008e0:	4619      	mov	r1, r3
 80008e2:	4811      	ldr	r0, [pc, #68]	@ (8000928 <MX_TIM2_Init+0xe8>)
 80008e4:	f001 fe9a 	bl	800261c <HAL_TIMEx_MasterConfigSynchronization>
 80008e8:	4603      	mov	r3, r0
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d001      	beq.n	80008f2 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80008ee:	f7ff fe92 	bl	8000616 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80008f2:	2360      	movs	r3, #96	@ 0x60
 80008f4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008f6:	2300      	movs	r3, #0
 80008f8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008fa:	2300      	movs	r3, #0
 80008fc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000902:	1d3b      	adds	r3, r7, #4
 8000904:	2204      	movs	r2, #4
 8000906:	4619      	mov	r1, r3
 8000908:	4807      	ldr	r0, [pc, #28]	@ (8000928 <MX_TIM2_Init+0xe8>)
 800090a:	f001 fa4d 	bl	8001da8 <HAL_TIM_PWM_ConfigChannel>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000914:	f7ff fe7f 	bl	8000616 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000918:	4803      	ldr	r0, [pc, #12]	@ (8000928 <MX_TIM2_Init+0xe8>)
 800091a:	f000 f837 	bl	800098c <HAL_TIM_MspPostInit>

}
 800091e:	bf00      	nop
 8000920:	3738      	adds	r7, #56	@ 0x38
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}
 8000926:	bf00      	nop
 8000928:	20000128 	.word	0x20000128

0800092c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	681b      	ldr	r3, [r3, #0]
 8000938:	4a12      	ldr	r2, [pc, #72]	@ (8000984 <HAL_TIM_Base_MspInit+0x58>)
 800093a:	4293      	cmp	r3, r2
 800093c:	d10c      	bne.n	8000958 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800093e:	4b12      	ldr	r3, [pc, #72]	@ (8000988 <HAL_TIM_Base_MspInit+0x5c>)
 8000940:	699b      	ldr	r3, [r3, #24]
 8000942:	4a11      	ldr	r2, [pc, #68]	@ (8000988 <HAL_TIM_Base_MspInit+0x5c>)
 8000944:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000948:	6193      	str	r3, [r2, #24]
 800094a:	4b0f      	ldr	r3, [pc, #60]	@ (8000988 <HAL_TIM_Base_MspInit+0x5c>)
 800094c:	699b      	ldr	r3, [r3, #24]
 800094e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8000952:	60fb      	str	r3, [r7, #12]
 8000954:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8000956:	e010      	b.n	800097a <HAL_TIM_Base_MspInit+0x4e>
  else if(tim_baseHandle->Instance==TIM2)
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000960:	d10b      	bne.n	800097a <HAL_TIM_Base_MspInit+0x4e>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000962:	4b09      	ldr	r3, [pc, #36]	@ (8000988 <HAL_TIM_Base_MspInit+0x5c>)
 8000964:	69db      	ldr	r3, [r3, #28]
 8000966:	4a08      	ldr	r2, [pc, #32]	@ (8000988 <HAL_TIM_Base_MspInit+0x5c>)
 8000968:	f043 0301 	orr.w	r3, r3, #1
 800096c:	61d3      	str	r3, [r2, #28]
 800096e:	4b06      	ldr	r3, [pc, #24]	@ (8000988 <HAL_TIM_Base_MspInit+0x5c>)
 8000970:	69db      	ldr	r3, [r3, #28]
 8000972:	f003 0301 	and.w	r3, r3, #1
 8000976:	60bb      	str	r3, [r7, #8]
 8000978:	68bb      	ldr	r3, [r7, #8]
}
 800097a:	bf00      	nop
 800097c:	3714      	adds	r7, #20
 800097e:	46bd      	mov	sp, r7
 8000980:	bc80      	pop	{r7}
 8000982:	4770      	bx	lr
 8000984:	40012c00 	.word	0x40012c00
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b088      	sub	sp, #32
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000994:	f107 0310 	add.w	r3, r7, #16
 8000998:	2200      	movs	r2, #0
 800099a:	601a      	str	r2, [r3, #0]
 800099c:	605a      	str	r2, [r3, #4]
 800099e:	609a      	str	r2, [r3, #8]
 80009a0:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM1)
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	4a1f      	ldr	r2, [pc, #124]	@ (8000a24 <HAL_TIM_MspPostInit+0x98>)
 80009a8:	4293      	cmp	r3, r2
 80009aa:	d119      	bne.n	80009e0 <HAL_TIM_MspPostInit+0x54>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ac:	4b1e      	ldr	r3, [pc, #120]	@ (8000a28 <HAL_TIM_MspPostInit+0x9c>)
 80009ae:	699b      	ldr	r3, [r3, #24]
 80009b0:	4a1d      	ldr	r2, [pc, #116]	@ (8000a28 <HAL_TIM_MspPostInit+0x9c>)
 80009b2:	f043 0304 	orr.w	r3, r3, #4
 80009b6:	6193      	str	r3, [r2, #24]
 80009b8:	4b1b      	ldr	r3, [pc, #108]	@ (8000a28 <HAL_TIM_MspPostInit+0x9c>)
 80009ba:	699b      	ldr	r3, [r3, #24]
 80009bc:	f003 0304 	and.w	r3, r3, #4
 80009c0:	60fb      	str	r3, [r7, #12]
 80009c2:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWM_Nema1_Pin;
 80009c4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80009c8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009ca:	2302      	movs	r3, #2
 80009cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2302      	movs	r3, #2
 80009d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(PWM_Nema1_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 0310 	add.w	r3, r7, #16
 80009d6:	4619      	mov	r1, r3
 80009d8:	4814      	ldr	r0, [pc, #80]	@ (8000a2c <HAL_TIM_MspPostInit+0xa0>)
 80009da:	f000 faef 	bl	8000fbc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80009de:	e01c      	b.n	8000a1a <HAL_TIM_MspPostInit+0x8e>
  else if(timHandle->Instance==TIM2)
 80009e0:	687b      	ldr	r3, [r7, #4]
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80009e8:	d117      	bne.n	8000a1a <HAL_TIM_MspPostInit+0x8e>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ea:	4b0f      	ldr	r3, [pc, #60]	@ (8000a28 <HAL_TIM_MspPostInit+0x9c>)
 80009ec:	699b      	ldr	r3, [r3, #24]
 80009ee:	4a0e      	ldr	r2, [pc, #56]	@ (8000a28 <HAL_TIM_MspPostInit+0x9c>)
 80009f0:	f043 0304 	orr.w	r3, r3, #4
 80009f4:	6193      	str	r3, [r2, #24]
 80009f6:	4b0c      	ldr	r3, [pc, #48]	@ (8000a28 <HAL_TIM_MspPostInit+0x9c>)
 80009f8:	699b      	ldr	r3, [r3, #24]
 80009fa:	f003 0304 	and.w	r3, r3, #4
 80009fe:	60bb      	str	r3, [r7, #8]
 8000a00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000a02:	2302      	movs	r3, #2
 8000a04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0e:	f107 0310 	add.w	r3, r7, #16
 8000a12:	4619      	mov	r1, r3
 8000a14:	4805      	ldr	r0, [pc, #20]	@ (8000a2c <HAL_TIM_MspPostInit+0xa0>)
 8000a16:	f000 fad1 	bl	8000fbc <HAL_GPIO_Init>
}
 8000a1a:	bf00      	nop
 8000a1c:	3720      	adds	r7, #32
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}
 8000a22:	bf00      	nop
 8000a24:	40012c00 	.word	0x40012c00
 8000a28:	40021000 	.word	0x40021000
 8000a2c:	40010800 	.word	0x40010800

08000a30 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000a34:	4b11      	ldr	r3, [pc, #68]	@ (8000a7c <MX_USART1_UART_Init+0x4c>)
 8000a36:	4a12      	ldr	r2, [pc, #72]	@ (8000a80 <MX_USART1_UART_Init+0x50>)
 8000a38:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000a3a:	4b10      	ldr	r3, [pc, #64]	@ (8000a7c <MX_USART1_UART_Init+0x4c>)
 8000a3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000a40:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000a42:	4b0e      	ldr	r3, [pc, #56]	@ (8000a7c <MX_USART1_UART_Init+0x4c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000a48:	4b0c      	ldr	r3, [pc, #48]	@ (8000a7c <MX_USART1_UART_Init+0x4c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8000a7c <MX_USART1_UART_Init+0x4c>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000a54:	4b09      	ldr	r3, [pc, #36]	@ (8000a7c <MX_USART1_UART_Init+0x4c>)
 8000a56:	220c      	movs	r2, #12
 8000a58:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a5a:	4b08      	ldr	r3, [pc, #32]	@ (8000a7c <MX_USART1_UART_Init+0x4c>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a60:	4b06      	ldr	r3, [pc, #24]	@ (8000a7c <MX_USART1_UART_Init+0x4c>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000a66:	4805      	ldr	r0, [pc, #20]	@ (8000a7c <MX_USART1_UART_Init+0x4c>)
 8000a68:	f001 fe87 	bl	800277a <HAL_UART_Init>
 8000a6c:	4603      	mov	r3, r0
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d001      	beq.n	8000a76 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000a72:	f7ff fdd0 	bl	8000616 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000170 	.word	0x20000170
 8000a80:	40013800 	.word	0x40013800

08000a84 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af00      	add	r7, sp, #0
 8000a8a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a8c:	f107 0310 	add.w	r3, r7, #16
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
 8000a94:	605a      	str	r2, [r3, #4]
 8000a96:	609a      	str	r2, [r3, #8]
 8000a98:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4a20      	ldr	r2, [pc, #128]	@ (8000b20 <HAL_UART_MspInit+0x9c>)
 8000aa0:	4293      	cmp	r3, r2
 8000aa2:	d139      	bne.n	8000b18 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000aa4:	4b1f      	ldr	r3, [pc, #124]	@ (8000b24 <HAL_UART_MspInit+0xa0>)
 8000aa6:	699b      	ldr	r3, [r3, #24]
 8000aa8:	4a1e      	ldr	r2, [pc, #120]	@ (8000b24 <HAL_UART_MspInit+0xa0>)
 8000aaa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000aae:	6193      	str	r3, [r2, #24]
 8000ab0:	4b1c      	ldr	r3, [pc, #112]	@ (8000b24 <HAL_UART_MspInit+0xa0>)
 8000ab2:	699b      	ldr	r3, [r3, #24]
 8000ab4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ab8:	60fb      	str	r3, [r7, #12]
 8000aba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000abc:	4b19      	ldr	r3, [pc, #100]	@ (8000b24 <HAL_UART_MspInit+0xa0>)
 8000abe:	699b      	ldr	r3, [r3, #24]
 8000ac0:	4a18      	ldr	r2, [pc, #96]	@ (8000b24 <HAL_UART_MspInit+0xa0>)
 8000ac2:	f043 0304 	orr.w	r3, r3, #4
 8000ac6:	6193      	str	r3, [r2, #24]
 8000ac8:	4b16      	ldr	r3, [pc, #88]	@ (8000b24 <HAL_UART_MspInit+0xa0>)
 8000aca:	699b      	ldr	r3, [r3, #24]
 8000acc:	f003 0304 	and.w	r3, r3, #4
 8000ad0:	60bb      	str	r3, [r7, #8]
 8000ad2:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000ad4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000ad8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ada:	2302      	movs	r3, #2
 8000adc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ae2:	f107 0310 	add.w	r3, r7, #16
 8000ae6:	4619      	mov	r1, r3
 8000ae8:	480f      	ldr	r0, [pc, #60]	@ (8000b28 <HAL_UART_MspInit+0xa4>)
 8000aea:	f000 fa67 	bl	8000fbc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000aee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000af2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000af4:	2300      	movs	r3, #0
 8000af6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000af8:	2300      	movs	r3, #0
 8000afa:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000afc:	f107 0310 	add.w	r3, r7, #16
 8000b00:	4619      	mov	r1, r3
 8000b02:	4809      	ldr	r0, [pc, #36]	@ (8000b28 <HAL_UART_MspInit+0xa4>)
 8000b04:	f000 fa5a 	bl	8000fbc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2100      	movs	r1, #0
 8000b0c:	2025      	movs	r0, #37	@ 0x25
 8000b0e:	f000 f96c 	bl	8000dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000b12:	2025      	movs	r0, #37	@ 0x25
 8000b14:	f000 f985 	bl	8000e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000b18:	bf00      	nop
 8000b1a:	3720      	adds	r7, #32
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	40013800 	.word	0x40013800
 8000b24:	40021000 	.word	0x40021000
 8000b28:	40010800 	.word	0x40010800

08000b2c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000b2c:	f7ff fde2 	bl	80006f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b30:	480b      	ldr	r0, [pc, #44]	@ (8000b60 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000b32:	490c      	ldr	r1, [pc, #48]	@ (8000b64 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000b34:	4a0c      	ldr	r2, [pc, #48]	@ (8000b68 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000b36:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b38:	e002      	b.n	8000b40 <LoopCopyDataInit>

08000b3a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b3a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b3c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b3e:	3304      	adds	r3, #4

08000b40 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b40:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b42:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b44:	d3f9      	bcc.n	8000b3a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b46:	4a09      	ldr	r2, [pc, #36]	@ (8000b6c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000b48:	4c09      	ldr	r4, [pc, #36]	@ (8000b70 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b4a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b4c:	e001      	b.n	8000b52 <LoopFillZerobss>

08000b4e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b4e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b50:	3204      	adds	r2, #4

08000b52 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b52:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b54:	d3fb      	bcc.n	8000b4e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b56:	f002 fb9f 	bl	8003298 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b5a:	f7ff fd07 	bl	800056c <main>
  bx lr
 8000b5e:	4770      	bx	lr
  ldr r0, =_sdata
 8000b60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b64:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b68:	08003330 	.word	0x08003330
  ldr r2, =_sbss
 8000b6c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b70:	200001bc 	.word	0x200001bc

08000b74 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b74:	e7fe      	b.n	8000b74 <ADC1_2_IRQHandler>
	...

08000b78 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ba0 <HAL_Init+0x28>)
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	4a07      	ldr	r2, [pc, #28]	@ (8000ba0 <HAL_Init+0x28>)
 8000b82:	f043 0310 	orr.w	r3, r3, #16
 8000b86:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b88:	2003      	movs	r0, #3
 8000b8a:	f000 f923 	bl	8000dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b8e:	200f      	movs	r0, #15
 8000b90:	f000 f808 	bl	8000ba4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b94:	f7ff fd46 	bl	8000624 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b98:	2300      	movs	r3, #0
}
 8000b9a:	4618      	mov	r0, r3
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	40022000 	.word	0x40022000

08000ba4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b082      	sub	sp, #8
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bac:	4b12      	ldr	r3, [pc, #72]	@ (8000bf8 <HAL_InitTick+0x54>)
 8000bae:	681a      	ldr	r2, [r3, #0]
 8000bb0:	4b12      	ldr	r3, [pc, #72]	@ (8000bfc <HAL_InitTick+0x58>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bba:	fbb3 f3f1 	udiv	r3, r3, r1
 8000bbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 f93b 	bl	8000e3e <HAL_SYSTICK_Config>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d001      	beq.n	8000bd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bce:	2301      	movs	r3, #1
 8000bd0:	e00e      	b.n	8000bf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	2b0f      	cmp	r3, #15
 8000bd6:	d80a      	bhi.n	8000bee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000bd8:	2200      	movs	r2, #0
 8000bda:	6879      	ldr	r1, [r7, #4]
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	f000 f903 	bl	8000dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000be4:	4a06      	ldr	r2, [pc, #24]	@ (8000c00 <HAL_InitTick+0x5c>)
 8000be6:	687b      	ldr	r3, [r7, #4]
 8000be8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e000      	b.n	8000bf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000bee:	2301      	movs	r3, #1
}
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	3708      	adds	r7, #8
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000000 	.word	0x20000000
 8000bfc:	20000008 	.word	0x20000008
 8000c00:	20000004 	.word	0x20000004

08000c04 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c04:	b480      	push	{r7}
 8000c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c08:	4b05      	ldr	r3, [pc, #20]	@ (8000c20 <HAL_IncTick+0x1c>)
 8000c0a:	781b      	ldrb	r3, [r3, #0]
 8000c0c:	461a      	mov	r2, r3
 8000c0e:	4b05      	ldr	r3, [pc, #20]	@ (8000c24 <HAL_IncTick+0x20>)
 8000c10:	681b      	ldr	r3, [r3, #0]
 8000c12:	4413      	add	r3, r2
 8000c14:	4a03      	ldr	r2, [pc, #12]	@ (8000c24 <HAL_IncTick+0x20>)
 8000c16:	6013      	str	r3, [r2, #0]
}
 8000c18:	bf00      	nop
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bc80      	pop	{r7}
 8000c1e:	4770      	bx	lr
 8000c20:	20000008 	.word	0x20000008
 8000c24:	200001b8 	.word	0x200001b8

08000c28 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  return uwTick;
 8000c2c:	4b02      	ldr	r3, [pc, #8]	@ (8000c38 <HAL_GetTick+0x10>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bc80      	pop	{r7}
 8000c36:	4770      	bx	lr
 8000c38:	200001b8 	.word	0x200001b8

08000c3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	b085      	sub	sp, #20
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	f003 0307 	and.w	r3, r3, #7
 8000c4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c4c:	4b0c      	ldr	r3, [pc, #48]	@ (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c4e:	68db      	ldr	r3, [r3, #12]
 8000c50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c52:	68ba      	ldr	r2, [r7, #8]
 8000c54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000c58:	4013      	ands	r3, r2
 8000c5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c60:	68bb      	ldr	r3, [r7, #8]
 8000c62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000c68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c6e:	4a04      	ldr	r2, [pc, #16]	@ (8000c80 <__NVIC_SetPriorityGrouping+0x44>)
 8000c70:	68bb      	ldr	r3, [r7, #8]
 8000c72:	60d3      	str	r3, [r2, #12]
}
 8000c74:	bf00      	nop
 8000c76:	3714      	adds	r7, #20
 8000c78:	46bd      	mov	sp, r7
 8000c7a:	bc80      	pop	{r7}
 8000c7c:	4770      	bx	lr
 8000c7e:	bf00      	nop
 8000c80:	e000ed00 	.word	0xe000ed00

08000c84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c84:	b480      	push	{r7}
 8000c86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c88:	4b04      	ldr	r3, [pc, #16]	@ (8000c9c <__NVIC_GetPriorityGrouping+0x18>)
 8000c8a:	68db      	ldr	r3, [r3, #12]
 8000c8c:	0a1b      	lsrs	r3, r3, #8
 8000c8e:	f003 0307 	and.w	r3, r3, #7
}
 8000c92:	4618      	mov	r0, r3
 8000c94:	46bd      	mov	sp, r7
 8000c96:	bc80      	pop	{r7}
 8000c98:	4770      	bx	lr
 8000c9a:	bf00      	nop
 8000c9c:	e000ed00 	.word	0xe000ed00

08000ca0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	4603      	mov	r3, r0
 8000ca8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	db0b      	blt.n	8000cca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cb2:	79fb      	ldrb	r3, [r7, #7]
 8000cb4:	f003 021f 	and.w	r2, r3, #31
 8000cb8:	4906      	ldr	r1, [pc, #24]	@ (8000cd4 <__NVIC_EnableIRQ+0x34>)
 8000cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cbe:	095b      	lsrs	r3, r3, #5
 8000cc0:	2001      	movs	r0, #1
 8000cc2:	fa00 f202 	lsl.w	r2, r0, r2
 8000cc6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000cca:	bf00      	nop
 8000ccc:	370c      	adds	r7, #12
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bc80      	pop	{r7}
 8000cd2:	4770      	bx	lr
 8000cd4:	e000e100 	.word	0xe000e100

08000cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	6039      	str	r1, [r7, #0]
 8000ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	db0a      	blt.n	8000d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	b2da      	uxtb	r2, r3
 8000cf0:	490c      	ldr	r1, [pc, #48]	@ (8000d24 <__NVIC_SetPriority+0x4c>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	0112      	lsls	r2, r2, #4
 8000cf8:	b2d2      	uxtb	r2, r2
 8000cfa:	440b      	add	r3, r1
 8000cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d00:	e00a      	b.n	8000d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d02:	683b      	ldr	r3, [r7, #0]
 8000d04:	b2da      	uxtb	r2, r3
 8000d06:	4908      	ldr	r1, [pc, #32]	@ (8000d28 <__NVIC_SetPriority+0x50>)
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	f003 030f 	and.w	r3, r3, #15
 8000d0e:	3b04      	subs	r3, #4
 8000d10:	0112      	lsls	r2, r2, #4
 8000d12:	b2d2      	uxtb	r2, r2
 8000d14:	440b      	add	r3, r1
 8000d16:	761a      	strb	r2, [r3, #24]
}
 8000d18:	bf00      	nop
 8000d1a:	370c      	adds	r7, #12
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bc80      	pop	{r7}
 8000d20:	4770      	bx	lr
 8000d22:	bf00      	nop
 8000d24:	e000e100 	.word	0xe000e100
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b089      	sub	sp, #36	@ 0x24
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d40:	69fb      	ldr	r3, [r7, #28]
 8000d42:	f1c3 0307 	rsb	r3, r3, #7
 8000d46:	2b04      	cmp	r3, #4
 8000d48:	bf28      	it	cs
 8000d4a:	2304      	movcs	r3, #4
 8000d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d4e:	69fb      	ldr	r3, [r7, #28]
 8000d50:	3304      	adds	r3, #4
 8000d52:	2b06      	cmp	r3, #6
 8000d54:	d902      	bls.n	8000d5c <NVIC_EncodePriority+0x30>
 8000d56:	69fb      	ldr	r3, [r7, #28]
 8000d58:	3b03      	subs	r3, #3
 8000d5a:	e000      	b.n	8000d5e <NVIC_EncodePriority+0x32>
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d60:	f04f 32ff 	mov.w	r2, #4294967295
 8000d64:	69bb      	ldr	r3, [r7, #24]
 8000d66:	fa02 f303 	lsl.w	r3, r2, r3
 8000d6a:	43da      	mvns	r2, r3
 8000d6c:	68bb      	ldr	r3, [r7, #8]
 8000d6e:	401a      	ands	r2, r3
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d74:	f04f 31ff 	mov.w	r1, #4294967295
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000d7e:	43d9      	mvns	r1, r3
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d84:	4313      	orrs	r3, r2
         );
}
 8000d86:	4618      	mov	r0, r3
 8000d88:	3724      	adds	r7, #36	@ 0x24
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	bc80      	pop	{r7}
 8000d8e:	4770      	bx	lr

08000d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3b01      	subs	r3, #1
 8000d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000da0:	d301      	bcc.n	8000da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000da2:	2301      	movs	r3, #1
 8000da4:	e00f      	b.n	8000dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000da6:	4a0a      	ldr	r2, [pc, #40]	@ (8000dd0 <SysTick_Config+0x40>)
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	3b01      	subs	r3, #1
 8000dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000dae:	210f      	movs	r1, #15
 8000db0:	f04f 30ff 	mov.w	r0, #4294967295
 8000db4:	f7ff ff90 	bl	8000cd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000db8:	4b05      	ldr	r3, [pc, #20]	@ (8000dd0 <SysTick_Config+0x40>)
 8000dba:	2200      	movs	r2, #0
 8000dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000dbe:	4b04      	ldr	r3, [pc, #16]	@ (8000dd0 <SysTick_Config+0x40>)
 8000dc0:	2207      	movs	r2, #7
 8000dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000dc4:	2300      	movs	r3, #0
}
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	3708      	adds	r7, #8
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	bd80      	pop	{r7, pc}
 8000dce:	bf00      	nop
 8000dd0:	e000e010 	.word	0xe000e010

08000dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b082      	sub	sp, #8
 8000dd8:	af00      	add	r7, sp, #0
 8000dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ddc:	6878      	ldr	r0, [r7, #4]
 8000dde:	f7ff ff2d 	bl	8000c3c <__NVIC_SetPriorityGrouping>
}
 8000de2:	bf00      	nop
 8000de4:	3708      	adds	r7, #8
 8000de6:	46bd      	mov	sp, r7
 8000de8:	bd80      	pop	{r7, pc}

08000dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000dea:	b580      	push	{r7, lr}
 8000dec:	b086      	sub	sp, #24
 8000dee:	af00      	add	r7, sp, #0
 8000df0:	4603      	mov	r3, r0
 8000df2:	60b9      	str	r1, [r7, #8]
 8000df4:	607a      	str	r2, [r7, #4]
 8000df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000dfc:	f7ff ff42 	bl	8000c84 <__NVIC_GetPriorityGrouping>
 8000e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e02:	687a      	ldr	r2, [r7, #4]
 8000e04:	68b9      	ldr	r1, [r7, #8]
 8000e06:	6978      	ldr	r0, [r7, #20]
 8000e08:	f7ff ff90 	bl	8000d2c <NVIC_EncodePriority>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e12:	4611      	mov	r1, r2
 8000e14:	4618      	mov	r0, r3
 8000e16:	f7ff ff5f 	bl	8000cd8 <__NVIC_SetPriority>
}
 8000e1a:	bf00      	nop
 8000e1c:	3718      	adds	r7, #24
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	b082      	sub	sp, #8
 8000e26:	af00      	add	r7, sp, #0
 8000e28:	4603      	mov	r3, r0
 8000e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e30:	4618      	mov	r0, r3
 8000e32:	f7ff ff35 	bl	8000ca0 <__NVIC_EnableIRQ>
}
 8000e36:	bf00      	nop
 8000e38:	3708      	adds	r7, #8
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	bd80      	pop	{r7, pc}

08000e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ffa2 	bl	8000d90 <SysTick_Config>
 8000e4c:	4603      	mov	r3, r0
}
 8000e4e:	4618      	mov	r0, r3
 8000e50:	3708      	adds	r7, #8
 8000e52:	46bd      	mov	sp, r7
 8000e54:	bd80      	pop	{r7, pc}

08000e56 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000e56:	b480      	push	{r7}
 8000e58:	b085      	sub	sp, #20
 8000e5a:	af00      	add	r7, sp, #0
 8000e5c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000e68:	b2db      	uxtb	r3, r3
 8000e6a:	2b02      	cmp	r3, #2
 8000e6c:	d008      	beq.n	8000e80 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	2204      	movs	r2, #4
 8000e72:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8000e7c:	2301      	movs	r3, #1
 8000e7e:	e020      	b.n	8000ec2 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000e80:	687b      	ldr	r3, [r7, #4]
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	681a      	ldr	r2, [r3, #0]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	681b      	ldr	r3, [r3, #0]
 8000e8a:	f022 020e 	bic.w	r2, r2, #14
 8000e8e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	681a      	ldr	r2, [r3, #0]
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	f022 0201 	bic.w	r2, r2, #1
 8000e9e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000ea0:	687b      	ldr	r3, [r7, #4]
 8000ea2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000ea8:	2101      	movs	r1, #1
 8000eaa:	fa01 f202 	lsl.w	r2, r1, r2
 8000eae:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	2200      	movs	r2, #0
 8000ebc:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8000ec0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	3714      	adds	r7, #20
 8000ec6:	46bd      	mov	sp, r7
 8000ec8:	bc80      	pop	{r7}
 8000eca:	4770      	bx	lr

08000ecc <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	b084      	sub	sp, #16
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8000ede:	b2db      	uxtb	r3, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d005      	beq.n	8000ef0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ee4:	687b      	ldr	r3, [r7, #4]
 8000ee6:	2204      	movs	r2, #4
 8000ee8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8000eea:	2301      	movs	r3, #1
 8000eec:	73fb      	strb	r3, [r7, #15]
 8000eee:	e051      	b.n	8000f94 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000ef0:	687b      	ldr	r3, [r7, #4]
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	681a      	ldr	r2, [r3, #0]
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	681b      	ldr	r3, [r3, #0]
 8000efa:	f022 020e 	bic.w	r2, r2, #14
 8000efe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	681a      	ldr	r2, [r3, #0]
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f022 0201 	bic.w	r2, r2, #1
 8000f0e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	4a22      	ldr	r2, [pc, #136]	@ (8000fa0 <HAL_DMA_Abort_IT+0xd4>)
 8000f16:	4293      	cmp	r3, r2
 8000f18:	d029      	beq.n	8000f6e <HAL_DMA_Abort_IT+0xa2>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	4a21      	ldr	r2, [pc, #132]	@ (8000fa4 <HAL_DMA_Abort_IT+0xd8>)
 8000f20:	4293      	cmp	r3, r2
 8000f22:	d022      	beq.n	8000f6a <HAL_DMA_Abort_IT+0x9e>
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681b      	ldr	r3, [r3, #0]
 8000f28:	4a1f      	ldr	r2, [pc, #124]	@ (8000fa8 <HAL_DMA_Abort_IT+0xdc>)
 8000f2a:	4293      	cmp	r3, r2
 8000f2c:	d01a      	beq.n	8000f64 <HAL_DMA_Abort_IT+0x98>
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	4a1e      	ldr	r2, [pc, #120]	@ (8000fac <HAL_DMA_Abort_IT+0xe0>)
 8000f34:	4293      	cmp	r3, r2
 8000f36:	d012      	beq.n	8000f5e <HAL_DMA_Abort_IT+0x92>
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	4a1c      	ldr	r2, [pc, #112]	@ (8000fb0 <HAL_DMA_Abort_IT+0xe4>)
 8000f3e:	4293      	cmp	r3, r2
 8000f40:	d00a      	beq.n	8000f58 <HAL_DMA_Abort_IT+0x8c>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	681b      	ldr	r3, [r3, #0]
 8000f46:	4a1b      	ldr	r2, [pc, #108]	@ (8000fb4 <HAL_DMA_Abort_IT+0xe8>)
 8000f48:	4293      	cmp	r3, r2
 8000f4a:	d102      	bne.n	8000f52 <HAL_DMA_Abort_IT+0x86>
 8000f4c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8000f50:	e00e      	b.n	8000f70 <HAL_DMA_Abort_IT+0xa4>
 8000f52:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f56:	e00b      	b.n	8000f70 <HAL_DMA_Abort_IT+0xa4>
 8000f58:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000f5c:	e008      	b.n	8000f70 <HAL_DMA_Abort_IT+0xa4>
 8000f5e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f62:	e005      	b.n	8000f70 <HAL_DMA_Abort_IT+0xa4>
 8000f64:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f68:	e002      	b.n	8000f70 <HAL_DMA_Abort_IT+0xa4>
 8000f6a:	2310      	movs	r3, #16
 8000f6c:	e000      	b.n	8000f70 <HAL_DMA_Abort_IT+0xa4>
 8000f6e:	2301      	movs	r3, #1
 8000f70:	4a11      	ldr	r2, [pc, #68]	@ (8000fb8 <HAL_DMA_Abort_IT+0xec>)
 8000f72:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	2201      	movs	r2, #1
 8000f78:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d003      	beq.n	8000f94 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000f90:	6878      	ldr	r0, [r7, #4]
 8000f92:	4798      	blx	r3
    } 
  }
  return status;
 8000f94:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f96:	4618      	mov	r0, r3
 8000f98:	3710      	adds	r7, #16
 8000f9a:	46bd      	mov	sp, r7
 8000f9c:	bd80      	pop	{r7, pc}
 8000f9e:	bf00      	nop
 8000fa0:	40020008 	.word	0x40020008
 8000fa4:	4002001c 	.word	0x4002001c
 8000fa8:	40020030 	.word	0x40020030
 8000fac:	40020044 	.word	0x40020044
 8000fb0:	40020058 	.word	0x40020058
 8000fb4:	4002006c 	.word	0x4002006c
 8000fb8:	40020000 	.word	0x40020000

08000fbc <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fbc:	b480      	push	{r7}
 8000fbe:	b08b      	sub	sp, #44	@ 0x2c
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000fce:	e169      	b.n	80012a4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8000fd0:	2201      	movs	r2, #1
 8000fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000fd4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd8:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000fda:	683b      	ldr	r3, [r7, #0]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	69fa      	ldr	r2, [r7, #28]
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8000fe4:	69ba      	ldr	r2, [r7, #24]
 8000fe6:	69fb      	ldr	r3, [r7, #28]
 8000fe8:	429a      	cmp	r2, r3
 8000fea:	f040 8158 	bne.w	800129e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	685b      	ldr	r3, [r3, #4]
 8000ff2:	4a9a      	ldr	r2, [pc, #616]	@ (800125c <HAL_GPIO_Init+0x2a0>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d05e      	beq.n	80010b6 <HAL_GPIO_Init+0xfa>
 8000ff8:	4a98      	ldr	r2, [pc, #608]	@ (800125c <HAL_GPIO_Init+0x2a0>)
 8000ffa:	4293      	cmp	r3, r2
 8000ffc:	d875      	bhi.n	80010ea <HAL_GPIO_Init+0x12e>
 8000ffe:	4a98      	ldr	r2, [pc, #608]	@ (8001260 <HAL_GPIO_Init+0x2a4>)
 8001000:	4293      	cmp	r3, r2
 8001002:	d058      	beq.n	80010b6 <HAL_GPIO_Init+0xfa>
 8001004:	4a96      	ldr	r2, [pc, #600]	@ (8001260 <HAL_GPIO_Init+0x2a4>)
 8001006:	4293      	cmp	r3, r2
 8001008:	d86f      	bhi.n	80010ea <HAL_GPIO_Init+0x12e>
 800100a:	4a96      	ldr	r2, [pc, #600]	@ (8001264 <HAL_GPIO_Init+0x2a8>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d052      	beq.n	80010b6 <HAL_GPIO_Init+0xfa>
 8001010:	4a94      	ldr	r2, [pc, #592]	@ (8001264 <HAL_GPIO_Init+0x2a8>)
 8001012:	4293      	cmp	r3, r2
 8001014:	d869      	bhi.n	80010ea <HAL_GPIO_Init+0x12e>
 8001016:	4a94      	ldr	r2, [pc, #592]	@ (8001268 <HAL_GPIO_Init+0x2ac>)
 8001018:	4293      	cmp	r3, r2
 800101a:	d04c      	beq.n	80010b6 <HAL_GPIO_Init+0xfa>
 800101c:	4a92      	ldr	r2, [pc, #584]	@ (8001268 <HAL_GPIO_Init+0x2ac>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d863      	bhi.n	80010ea <HAL_GPIO_Init+0x12e>
 8001022:	4a92      	ldr	r2, [pc, #584]	@ (800126c <HAL_GPIO_Init+0x2b0>)
 8001024:	4293      	cmp	r3, r2
 8001026:	d046      	beq.n	80010b6 <HAL_GPIO_Init+0xfa>
 8001028:	4a90      	ldr	r2, [pc, #576]	@ (800126c <HAL_GPIO_Init+0x2b0>)
 800102a:	4293      	cmp	r3, r2
 800102c:	d85d      	bhi.n	80010ea <HAL_GPIO_Init+0x12e>
 800102e:	2b12      	cmp	r3, #18
 8001030:	d82a      	bhi.n	8001088 <HAL_GPIO_Init+0xcc>
 8001032:	2b12      	cmp	r3, #18
 8001034:	d859      	bhi.n	80010ea <HAL_GPIO_Init+0x12e>
 8001036:	a201      	add	r2, pc, #4	@ (adr r2, 800103c <HAL_GPIO_Init+0x80>)
 8001038:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800103c:	080010b7 	.word	0x080010b7
 8001040:	08001091 	.word	0x08001091
 8001044:	080010a3 	.word	0x080010a3
 8001048:	080010e5 	.word	0x080010e5
 800104c:	080010eb 	.word	0x080010eb
 8001050:	080010eb 	.word	0x080010eb
 8001054:	080010eb 	.word	0x080010eb
 8001058:	080010eb 	.word	0x080010eb
 800105c:	080010eb 	.word	0x080010eb
 8001060:	080010eb 	.word	0x080010eb
 8001064:	080010eb 	.word	0x080010eb
 8001068:	080010eb 	.word	0x080010eb
 800106c:	080010eb 	.word	0x080010eb
 8001070:	080010eb 	.word	0x080010eb
 8001074:	080010eb 	.word	0x080010eb
 8001078:	080010eb 	.word	0x080010eb
 800107c:	080010eb 	.word	0x080010eb
 8001080:	08001099 	.word	0x08001099
 8001084:	080010ad 	.word	0x080010ad
 8001088:	4a79      	ldr	r2, [pc, #484]	@ (8001270 <HAL_GPIO_Init+0x2b4>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d013      	beq.n	80010b6 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800108e:	e02c      	b.n	80010ea <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	623b      	str	r3, [r7, #32]
          break;
 8001096:	e029      	b.n	80010ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001098:	683b      	ldr	r3, [r7, #0]
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	3304      	adds	r3, #4
 800109e:	623b      	str	r3, [r7, #32]
          break;
 80010a0:	e024      	b.n	80010ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	68db      	ldr	r3, [r3, #12]
 80010a6:	3308      	adds	r3, #8
 80010a8:	623b      	str	r3, [r7, #32]
          break;
 80010aa:	e01f      	b.n	80010ec <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	68db      	ldr	r3, [r3, #12]
 80010b0:	330c      	adds	r3, #12
 80010b2:	623b      	str	r3, [r7, #32]
          break;
 80010b4:	e01a      	b.n	80010ec <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80010b6:	683b      	ldr	r3, [r7, #0]
 80010b8:	689b      	ldr	r3, [r3, #8]
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d102      	bne.n	80010c4 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80010be:	2304      	movs	r3, #4
 80010c0:	623b      	str	r3, [r7, #32]
          break;
 80010c2:	e013      	b.n	80010ec <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	689b      	ldr	r3, [r3, #8]
 80010c8:	2b01      	cmp	r3, #1
 80010ca:	d105      	bne.n	80010d8 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010cc:	2308      	movs	r3, #8
 80010ce:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	69fa      	ldr	r2, [r7, #28]
 80010d4:	611a      	str	r2, [r3, #16]
          break;
 80010d6:	e009      	b.n	80010ec <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80010d8:	2308      	movs	r3, #8
 80010da:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	69fa      	ldr	r2, [r7, #28]
 80010e0:	615a      	str	r2, [r3, #20]
          break;
 80010e2:	e003      	b.n	80010ec <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80010e4:	2300      	movs	r3, #0
 80010e6:	623b      	str	r3, [r7, #32]
          break;
 80010e8:	e000      	b.n	80010ec <HAL_GPIO_Init+0x130>
          break;
 80010ea:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80010ec:	69bb      	ldr	r3, [r7, #24]
 80010ee:	2bff      	cmp	r3, #255	@ 0xff
 80010f0:	d801      	bhi.n	80010f6 <HAL_GPIO_Init+0x13a>
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	e001      	b.n	80010fa <HAL_GPIO_Init+0x13e>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	3304      	adds	r3, #4
 80010fa:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80010fc:	69bb      	ldr	r3, [r7, #24]
 80010fe:	2bff      	cmp	r3, #255	@ 0xff
 8001100:	d802      	bhi.n	8001108 <HAL_GPIO_Init+0x14c>
 8001102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	e002      	b.n	800110e <HAL_GPIO_Init+0x152>
 8001108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800110a:	3b08      	subs	r3, #8
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	681a      	ldr	r2, [r3, #0]
 8001114:	210f      	movs	r1, #15
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	fa01 f303 	lsl.w	r3, r1, r3
 800111c:	43db      	mvns	r3, r3
 800111e:	401a      	ands	r2, r3
 8001120:	6a39      	ldr	r1, [r7, #32]
 8001122:	693b      	ldr	r3, [r7, #16]
 8001124:	fa01 f303 	lsl.w	r3, r1, r3
 8001128:	431a      	orrs	r2, r3
 800112a:	697b      	ldr	r3, [r7, #20]
 800112c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	685b      	ldr	r3, [r3, #4]
 8001132:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001136:	2b00      	cmp	r3, #0
 8001138:	f000 80b1 	beq.w	800129e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 800113c:	4b4d      	ldr	r3, [pc, #308]	@ (8001274 <HAL_GPIO_Init+0x2b8>)
 800113e:	699b      	ldr	r3, [r3, #24]
 8001140:	4a4c      	ldr	r2, [pc, #304]	@ (8001274 <HAL_GPIO_Init+0x2b8>)
 8001142:	f043 0301 	orr.w	r3, r3, #1
 8001146:	6193      	str	r3, [r2, #24]
 8001148:	4b4a      	ldr	r3, [pc, #296]	@ (8001274 <HAL_GPIO_Init+0x2b8>)
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0301 	and.w	r3, r3, #1
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001154:	4a48      	ldr	r2, [pc, #288]	@ (8001278 <HAL_GPIO_Init+0x2bc>)
 8001156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001158:	089b      	lsrs	r3, r3, #2
 800115a:	3302      	adds	r3, #2
 800115c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001160:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001164:	f003 0303 	and.w	r3, r3, #3
 8001168:	009b      	lsls	r3, r3, #2
 800116a:	220f      	movs	r2, #15
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	68fa      	ldr	r2, [r7, #12]
 8001174:	4013      	ands	r3, r2
 8001176:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	4a40      	ldr	r2, [pc, #256]	@ (800127c <HAL_GPIO_Init+0x2c0>)
 800117c:	4293      	cmp	r3, r2
 800117e:	d013      	beq.n	80011a8 <HAL_GPIO_Init+0x1ec>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	4a3f      	ldr	r2, [pc, #252]	@ (8001280 <HAL_GPIO_Init+0x2c4>)
 8001184:	4293      	cmp	r3, r2
 8001186:	d00d      	beq.n	80011a4 <HAL_GPIO_Init+0x1e8>
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	4a3e      	ldr	r2, [pc, #248]	@ (8001284 <HAL_GPIO_Init+0x2c8>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d007      	beq.n	80011a0 <HAL_GPIO_Init+0x1e4>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	4a3d      	ldr	r2, [pc, #244]	@ (8001288 <HAL_GPIO_Init+0x2cc>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d101      	bne.n	800119c <HAL_GPIO_Init+0x1e0>
 8001198:	2303      	movs	r3, #3
 800119a:	e006      	b.n	80011aa <HAL_GPIO_Init+0x1ee>
 800119c:	2304      	movs	r3, #4
 800119e:	e004      	b.n	80011aa <HAL_GPIO_Init+0x1ee>
 80011a0:	2302      	movs	r3, #2
 80011a2:	e002      	b.n	80011aa <HAL_GPIO_Init+0x1ee>
 80011a4:	2301      	movs	r3, #1
 80011a6:	e000      	b.n	80011aa <HAL_GPIO_Init+0x1ee>
 80011a8:	2300      	movs	r3, #0
 80011aa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80011ac:	f002 0203 	and.w	r2, r2, #3
 80011b0:	0092      	lsls	r2, r2, #2
 80011b2:	4093      	lsls	r3, r2
 80011b4:	68fa      	ldr	r2, [r7, #12]
 80011b6:	4313      	orrs	r3, r2
 80011b8:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80011ba:	492f      	ldr	r1, [pc, #188]	@ (8001278 <HAL_GPIO_Init+0x2bc>)
 80011bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80011be:	089b      	lsrs	r3, r3, #2
 80011c0:	3302      	adds	r3, #2
 80011c2:	68fa      	ldr	r2, [r7, #12]
 80011c4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	685b      	ldr	r3, [r3, #4]
 80011cc:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d006      	beq.n	80011e2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80011d4:	4b2d      	ldr	r3, [pc, #180]	@ (800128c <HAL_GPIO_Init+0x2d0>)
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	492c      	ldr	r1, [pc, #176]	@ (800128c <HAL_GPIO_Init+0x2d0>)
 80011da:	69bb      	ldr	r3, [r7, #24]
 80011dc:	4313      	orrs	r3, r2
 80011de:	608b      	str	r3, [r1, #8]
 80011e0:	e006      	b.n	80011f0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80011e2:	4b2a      	ldr	r3, [pc, #168]	@ (800128c <HAL_GPIO_Init+0x2d0>)
 80011e4:	689a      	ldr	r2, [r3, #8]
 80011e6:	69bb      	ldr	r3, [r7, #24]
 80011e8:	43db      	mvns	r3, r3
 80011ea:	4928      	ldr	r1, [pc, #160]	@ (800128c <HAL_GPIO_Init+0x2d0>)
 80011ec:	4013      	ands	r3, r2
 80011ee:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d006      	beq.n	800120a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80011fc:	4b23      	ldr	r3, [pc, #140]	@ (800128c <HAL_GPIO_Init+0x2d0>)
 80011fe:	68da      	ldr	r2, [r3, #12]
 8001200:	4922      	ldr	r1, [pc, #136]	@ (800128c <HAL_GPIO_Init+0x2d0>)
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	4313      	orrs	r3, r2
 8001206:	60cb      	str	r3, [r1, #12]
 8001208:	e006      	b.n	8001218 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800120a:	4b20      	ldr	r3, [pc, #128]	@ (800128c <HAL_GPIO_Init+0x2d0>)
 800120c:	68da      	ldr	r2, [r3, #12]
 800120e:	69bb      	ldr	r3, [r7, #24]
 8001210:	43db      	mvns	r3, r3
 8001212:	491e      	ldr	r1, [pc, #120]	@ (800128c <HAL_GPIO_Init+0x2d0>)
 8001214:	4013      	ands	r3, r2
 8001216:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001218:	683b      	ldr	r3, [r7, #0]
 800121a:	685b      	ldr	r3, [r3, #4]
 800121c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001220:	2b00      	cmp	r3, #0
 8001222:	d006      	beq.n	8001232 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001224:	4b19      	ldr	r3, [pc, #100]	@ (800128c <HAL_GPIO_Init+0x2d0>)
 8001226:	685a      	ldr	r2, [r3, #4]
 8001228:	4918      	ldr	r1, [pc, #96]	@ (800128c <HAL_GPIO_Init+0x2d0>)
 800122a:	69bb      	ldr	r3, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	604b      	str	r3, [r1, #4]
 8001230:	e006      	b.n	8001240 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001232:	4b16      	ldr	r3, [pc, #88]	@ (800128c <HAL_GPIO_Init+0x2d0>)
 8001234:	685a      	ldr	r2, [r3, #4]
 8001236:	69bb      	ldr	r3, [r7, #24]
 8001238:	43db      	mvns	r3, r3
 800123a:	4914      	ldr	r1, [pc, #80]	@ (800128c <HAL_GPIO_Init+0x2d0>)
 800123c:	4013      	ands	r3, r2
 800123e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	685b      	ldr	r3, [r3, #4]
 8001244:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001248:	2b00      	cmp	r3, #0
 800124a:	d021      	beq.n	8001290 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800124c:	4b0f      	ldr	r3, [pc, #60]	@ (800128c <HAL_GPIO_Init+0x2d0>)
 800124e:	681a      	ldr	r2, [r3, #0]
 8001250:	490e      	ldr	r1, [pc, #56]	@ (800128c <HAL_GPIO_Init+0x2d0>)
 8001252:	69bb      	ldr	r3, [r7, #24]
 8001254:	4313      	orrs	r3, r2
 8001256:	600b      	str	r3, [r1, #0]
 8001258:	e021      	b.n	800129e <HAL_GPIO_Init+0x2e2>
 800125a:	bf00      	nop
 800125c:	10320000 	.word	0x10320000
 8001260:	10310000 	.word	0x10310000
 8001264:	10220000 	.word	0x10220000
 8001268:	10210000 	.word	0x10210000
 800126c:	10120000 	.word	0x10120000
 8001270:	10110000 	.word	0x10110000
 8001274:	40021000 	.word	0x40021000
 8001278:	40010000 	.word	0x40010000
 800127c:	40010800 	.word	0x40010800
 8001280:	40010c00 	.word	0x40010c00
 8001284:	40011000 	.word	0x40011000
 8001288:	40011400 	.word	0x40011400
 800128c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001290:	4b0b      	ldr	r3, [pc, #44]	@ (80012c0 <HAL_GPIO_Init+0x304>)
 8001292:	681a      	ldr	r2, [r3, #0]
 8001294:	69bb      	ldr	r3, [r7, #24]
 8001296:	43db      	mvns	r3, r3
 8001298:	4909      	ldr	r1, [pc, #36]	@ (80012c0 <HAL_GPIO_Init+0x304>)
 800129a:	4013      	ands	r3, r2
 800129c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800129e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012a0:	3301      	adds	r3, #1
 80012a2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	681a      	ldr	r2, [r3, #0]
 80012a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012aa:	fa22 f303 	lsr.w	r3, r2, r3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	f47f ae8e 	bne.w	8000fd0 <HAL_GPIO_Init+0x14>
  }
}
 80012b4:	bf00      	nop
 80012b6:	bf00      	nop
 80012b8:	372c      	adds	r7, #44	@ 0x2c
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bc80      	pop	{r7}
 80012be:	4770      	bx	lr
 80012c0:	40010400 	.word	0x40010400

080012c4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80012c4:	b480      	push	{r7}
 80012c6:	b083      	sub	sp, #12
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
 80012cc:	460b      	mov	r3, r1
 80012ce:	807b      	strh	r3, [r7, #2]
 80012d0:	4613      	mov	r3, r2
 80012d2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80012d4:	787b      	ldrb	r3, [r7, #1]
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d003      	beq.n	80012e2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80012da:	887a      	ldrh	r2, [r7, #2]
 80012dc:	687b      	ldr	r3, [r7, #4]
 80012de:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80012e0:	e003      	b.n	80012ea <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80012e2:	887b      	ldrh	r3, [r7, #2]
 80012e4:	041a      	lsls	r2, r3, #16
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	611a      	str	r2, [r3, #16]
}
 80012ea:	bf00      	nop
 80012ec:	370c      	adds	r7, #12
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bc80      	pop	{r7}
 80012f2:	4770      	bx	lr

080012f4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	b086      	sub	sp, #24
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d101      	bne.n	8001306 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001302:	2301      	movs	r3, #1
 8001304:	e272      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f003 0301 	and.w	r3, r3, #1
 800130e:	2b00      	cmp	r3, #0
 8001310:	f000 8087 	beq.w	8001422 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001314:	4b92      	ldr	r3, [pc, #584]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f003 030c 	and.w	r3, r3, #12
 800131c:	2b04      	cmp	r3, #4
 800131e:	d00c      	beq.n	800133a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001320:	4b8f      	ldr	r3, [pc, #572]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f003 030c 	and.w	r3, r3, #12
 8001328:	2b08      	cmp	r3, #8
 800132a:	d112      	bne.n	8001352 <HAL_RCC_OscConfig+0x5e>
 800132c:	4b8c      	ldr	r3, [pc, #560]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800132e:	685b      	ldr	r3, [r3, #4]
 8001330:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001334:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001338:	d10b      	bne.n	8001352 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800133a:	4b89      	ldr	r3, [pc, #548]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001342:	2b00      	cmp	r3, #0
 8001344:	d06c      	beq.n	8001420 <HAL_RCC_OscConfig+0x12c>
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	685b      	ldr	r3, [r3, #4]
 800134a:	2b00      	cmp	r3, #0
 800134c:	d168      	bne.n	8001420 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800134e:	2301      	movs	r3, #1
 8001350:	e24c      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	685b      	ldr	r3, [r3, #4]
 8001356:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800135a:	d106      	bne.n	800136a <HAL_RCC_OscConfig+0x76>
 800135c:	4b80      	ldr	r3, [pc, #512]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	4a7f      	ldr	r2, [pc, #508]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001362:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001366:	6013      	str	r3, [r2, #0]
 8001368:	e02e      	b.n	80013c8 <HAL_RCC_OscConfig+0xd4>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	685b      	ldr	r3, [r3, #4]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d10c      	bne.n	800138c <HAL_RCC_OscConfig+0x98>
 8001372:	4b7b      	ldr	r3, [pc, #492]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a7a      	ldr	r2, [pc, #488]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001378:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b78      	ldr	r3, [pc, #480]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	4a77      	ldr	r2, [pc, #476]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001384:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001388:	6013      	str	r3, [r2, #0]
 800138a:	e01d      	b.n	80013c8 <HAL_RCC_OscConfig+0xd4>
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	685b      	ldr	r3, [r3, #4]
 8001390:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001394:	d10c      	bne.n	80013b0 <HAL_RCC_OscConfig+0xbc>
 8001396:	4b72      	ldr	r3, [pc, #456]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	4a71      	ldr	r2, [pc, #452]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800139c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013a0:	6013      	str	r3, [r2, #0]
 80013a2:	4b6f      	ldr	r3, [pc, #444]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ac:	6013      	str	r3, [r2, #0]
 80013ae:	e00b      	b.n	80013c8 <HAL_RCC_OscConfig+0xd4>
 80013b0:	4b6b      	ldr	r3, [pc, #428]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	4a6a      	ldr	r2, [pc, #424]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013b6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013ba:	6013      	str	r3, [r2, #0]
 80013bc:	4b68      	ldr	r3, [pc, #416]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	4a67      	ldr	r2, [pc, #412]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013c2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80013c6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d013      	beq.n	80013f8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013d0:	f7ff fc2a 	bl	8000c28 <HAL_GetTick>
 80013d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013d6:	e008      	b.n	80013ea <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013d8:	f7ff fc26 	bl	8000c28 <HAL_GetTick>
 80013dc:	4602      	mov	r2, r0
 80013de:	693b      	ldr	r3, [r7, #16]
 80013e0:	1ad3      	subs	r3, r2, r3
 80013e2:	2b64      	cmp	r3, #100	@ 0x64
 80013e4:	d901      	bls.n	80013ea <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80013e6:	2303      	movs	r3, #3
 80013e8:	e200      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80013ea:	4b5d      	ldr	r3, [pc, #372]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d0f0      	beq.n	80013d8 <HAL_RCC_OscConfig+0xe4>
 80013f6:	e014      	b.n	8001422 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fc16 	bl	8000c28 <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001400:	f7ff fc12 	bl	8000c28 <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b64      	cmp	r3, #100	@ 0x64
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e1ec      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001412:	4b53      	ldr	r3, [pc, #332]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x10c>
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001420:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0302 	and.w	r3, r3, #2
 800142a:	2b00      	cmp	r3, #0
 800142c:	d063      	beq.n	80014f6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800142e:	4b4c      	ldr	r3, [pc, #304]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f003 030c 	and.w	r3, r3, #12
 8001436:	2b00      	cmp	r3, #0
 8001438:	d00b      	beq.n	8001452 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800143a:	4b49      	ldr	r3, [pc, #292]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800143c:	685b      	ldr	r3, [r3, #4]
 800143e:	f003 030c 	and.w	r3, r3, #12
 8001442:	2b08      	cmp	r3, #8
 8001444:	d11c      	bne.n	8001480 <HAL_RCC_OscConfig+0x18c>
 8001446:	4b46      	ldr	r3, [pc, #280]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d116      	bne.n	8001480 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001452:	4b43      	ldr	r3, [pc, #268]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f003 0302 	and.w	r3, r3, #2
 800145a:	2b00      	cmp	r3, #0
 800145c:	d005      	beq.n	800146a <HAL_RCC_OscConfig+0x176>
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	691b      	ldr	r3, [r3, #16]
 8001462:	2b01      	cmp	r3, #1
 8001464:	d001      	beq.n	800146a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e1c0      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800146a:	4b3d      	ldr	r3, [pc, #244]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	695b      	ldr	r3, [r3, #20]
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	4939      	ldr	r1, [pc, #228]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800147a:	4313      	orrs	r3, r2
 800147c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800147e:	e03a      	b.n	80014f6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	691b      	ldr	r3, [r3, #16]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d020      	beq.n	80014ca <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001488:	4b36      	ldr	r3, [pc, #216]	@ (8001564 <HAL_RCC_OscConfig+0x270>)
 800148a:	2201      	movs	r2, #1
 800148c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800148e:	f7ff fbcb 	bl	8000c28 <HAL_GetTick>
 8001492:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001494:	e008      	b.n	80014a8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001496:	f7ff fbc7 	bl	8000c28 <HAL_GetTick>
 800149a:	4602      	mov	r2, r0
 800149c:	693b      	ldr	r3, [r7, #16]
 800149e:	1ad3      	subs	r3, r2, r3
 80014a0:	2b02      	cmp	r3, #2
 80014a2:	d901      	bls.n	80014a8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80014a4:	2303      	movs	r3, #3
 80014a6:	e1a1      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014a8:	4b2d      	ldr	r3, [pc, #180]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d0f0      	beq.n	8001496 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014b4:	4b2a      	ldr	r3, [pc, #168]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	695b      	ldr	r3, [r3, #20]
 80014c0:	00db      	lsls	r3, r3, #3
 80014c2:	4927      	ldr	r1, [pc, #156]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80014c4:	4313      	orrs	r3, r2
 80014c6:	600b      	str	r3, [r1, #0]
 80014c8:	e015      	b.n	80014f6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014ca:	4b26      	ldr	r3, [pc, #152]	@ (8001564 <HAL_RCC_OscConfig+0x270>)
 80014cc:	2200      	movs	r2, #0
 80014ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014d0:	f7ff fbaa 	bl	8000c28 <HAL_GetTick>
 80014d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014d6:	e008      	b.n	80014ea <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d8:	f7ff fba6 	bl	8000c28 <HAL_GetTick>
 80014dc:	4602      	mov	r2, r0
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	1ad3      	subs	r3, r2, r3
 80014e2:	2b02      	cmp	r3, #2
 80014e4:	d901      	bls.n	80014ea <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80014e6:	2303      	movs	r3, #3
 80014e8:	e180      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80014ea:	4b1d      	ldr	r3, [pc, #116]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0302 	and.w	r3, r3, #2
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d1f0      	bne.n	80014d8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0308 	and.w	r3, r3, #8
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d03a      	beq.n	8001578 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	699b      	ldr	r3, [r3, #24]
 8001506:	2b00      	cmp	r3, #0
 8001508:	d019      	beq.n	800153e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800150a:	4b17      	ldr	r3, [pc, #92]	@ (8001568 <HAL_RCC_OscConfig+0x274>)
 800150c:	2201      	movs	r2, #1
 800150e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001510:	f7ff fb8a 	bl	8000c28 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001518:	f7ff fb86 	bl	8000c28 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e160      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800152a:	4b0d      	ldr	r3, [pc, #52]	@ (8001560 <HAL_RCC_OscConfig+0x26c>)
 800152c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d0f0      	beq.n	8001518 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001536:	2001      	movs	r0, #1
 8001538:	f000 face 	bl	8001ad8 <RCC_Delay>
 800153c:	e01c      	b.n	8001578 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800153e:	4b0a      	ldr	r3, [pc, #40]	@ (8001568 <HAL_RCC_OscConfig+0x274>)
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001544:	f7ff fb70 	bl	8000c28 <HAL_GetTick>
 8001548:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800154a:	e00f      	b.n	800156c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800154c:	f7ff fb6c 	bl	8000c28 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	2b02      	cmp	r3, #2
 8001558:	d908      	bls.n	800156c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e146      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
 800155e:	bf00      	nop
 8001560:	40021000 	.word	0x40021000
 8001564:	42420000 	.word	0x42420000
 8001568:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800156c:	4b92      	ldr	r3, [pc, #584]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800156e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001570:	f003 0302 	and.w	r3, r3, #2
 8001574:	2b00      	cmp	r3, #0
 8001576:	d1e9      	bne.n	800154c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f003 0304 	and.w	r3, r3, #4
 8001580:	2b00      	cmp	r3, #0
 8001582:	f000 80a6 	beq.w	80016d2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001586:	2300      	movs	r3, #0
 8001588:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800158a:	4b8b      	ldr	r3, [pc, #556]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800158c:	69db      	ldr	r3, [r3, #28]
 800158e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001592:	2b00      	cmp	r3, #0
 8001594:	d10d      	bne.n	80015b2 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b88      	ldr	r3, [pc, #544]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001598:	69db      	ldr	r3, [r3, #28]
 800159a:	4a87      	ldr	r2, [pc, #540]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015a0:	61d3      	str	r3, [r2, #28]
 80015a2:	4b85      	ldr	r3, [pc, #532]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015aa:	60bb      	str	r3, [r7, #8]
 80015ac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ae:	2301      	movs	r3, #1
 80015b0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b2:	4b82      	ldr	r3, [pc, #520]	@ (80017bc <HAL_RCC_OscConfig+0x4c8>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d118      	bne.n	80015f0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015be:	4b7f      	ldr	r3, [pc, #508]	@ (80017bc <HAL_RCC_OscConfig+0x4c8>)
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	4a7e      	ldr	r2, [pc, #504]	@ (80017bc <HAL_RCC_OscConfig+0x4c8>)
 80015c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ca:	f7ff fb2d 	bl	8000c28 <HAL_GetTick>
 80015ce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d0:	e008      	b.n	80015e4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015d2:	f7ff fb29 	bl	8000c28 <HAL_GetTick>
 80015d6:	4602      	mov	r2, r0
 80015d8:	693b      	ldr	r3, [r7, #16]
 80015da:	1ad3      	subs	r3, r2, r3
 80015dc:	2b64      	cmp	r3, #100	@ 0x64
 80015de:	d901      	bls.n	80015e4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80015e0:	2303      	movs	r3, #3
 80015e2:	e103      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015e4:	4b75      	ldr	r3, [pc, #468]	@ (80017bc <HAL_RCC_OscConfig+0x4c8>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d0f0      	beq.n	80015d2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	2b01      	cmp	r3, #1
 80015f6:	d106      	bne.n	8001606 <HAL_RCC_OscConfig+0x312>
 80015f8:	4b6f      	ldr	r3, [pc, #444]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80015fa:	6a1b      	ldr	r3, [r3, #32]
 80015fc:	4a6e      	ldr	r2, [pc, #440]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80015fe:	f043 0301 	orr.w	r3, r3, #1
 8001602:	6213      	str	r3, [r2, #32]
 8001604:	e02d      	b.n	8001662 <HAL_RCC_OscConfig+0x36e>
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	68db      	ldr	r3, [r3, #12]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d10c      	bne.n	8001628 <HAL_RCC_OscConfig+0x334>
 800160e:	4b6a      	ldr	r3, [pc, #424]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001610:	6a1b      	ldr	r3, [r3, #32]
 8001612:	4a69      	ldr	r2, [pc, #420]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001614:	f023 0301 	bic.w	r3, r3, #1
 8001618:	6213      	str	r3, [r2, #32]
 800161a:	4b67      	ldr	r3, [pc, #412]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800161c:	6a1b      	ldr	r3, [r3, #32]
 800161e:	4a66      	ldr	r2, [pc, #408]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001620:	f023 0304 	bic.w	r3, r3, #4
 8001624:	6213      	str	r3, [r2, #32]
 8001626:	e01c      	b.n	8001662 <HAL_RCC_OscConfig+0x36e>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	68db      	ldr	r3, [r3, #12]
 800162c:	2b05      	cmp	r3, #5
 800162e:	d10c      	bne.n	800164a <HAL_RCC_OscConfig+0x356>
 8001630:	4b61      	ldr	r3, [pc, #388]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001632:	6a1b      	ldr	r3, [r3, #32]
 8001634:	4a60      	ldr	r2, [pc, #384]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001636:	f043 0304 	orr.w	r3, r3, #4
 800163a:	6213      	str	r3, [r2, #32]
 800163c:	4b5e      	ldr	r3, [pc, #376]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4a5d      	ldr	r2, [pc, #372]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001642:	f043 0301 	orr.w	r3, r3, #1
 8001646:	6213      	str	r3, [r2, #32]
 8001648:	e00b      	b.n	8001662 <HAL_RCC_OscConfig+0x36e>
 800164a:	4b5b      	ldr	r3, [pc, #364]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800164c:	6a1b      	ldr	r3, [r3, #32]
 800164e:	4a5a      	ldr	r2, [pc, #360]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001650:	f023 0301 	bic.w	r3, r3, #1
 8001654:	6213      	str	r3, [r2, #32]
 8001656:	4b58      	ldr	r3, [pc, #352]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	4a57      	ldr	r2, [pc, #348]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800165c:	f023 0304 	bic.w	r3, r3, #4
 8001660:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	68db      	ldr	r3, [r3, #12]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d015      	beq.n	8001696 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800166a:	f7ff fadd 	bl	8000c28 <HAL_GetTick>
 800166e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001670:	e00a      	b.n	8001688 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001672:	f7ff fad9 	bl	8000c28 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	693b      	ldr	r3, [r7, #16]
 800167a:	1ad3      	subs	r3, r2, r3
 800167c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001680:	4293      	cmp	r3, r2
 8001682:	d901      	bls.n	8001688 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001684:	2303      	movs	r3, #3
 8001686:	e0b1      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001688:	4b4b      	ldr	r3, [pc, #300]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	6a1b      	ldr	r3, [r3, #32]
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d0ee      	beq.n	8001672 <HAL_RCC_OscConfig+0x37e>
 8001694:	e014      	b.n	80016c0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001696:	f7ff fac7 	bl	8000c28 <HAL_GetTick>
 800169a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800169c:	e00a      	b.n	80016b4 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800169e:	f7ff fac3 	bl	8000c28 <HAL_GetTick>
 80016a2:	4602      	mov	r2, r0
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	1ad3      	subs	r3, r2, r3
 80016a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016ac:	4293      	cmp	r3, r2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e09b      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b4:	4b40      	ldr	r3, [pc, #256]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80016b6:	6a1b      	ldr	r3, [r3, #32]
 80016b8:	f003 0302 	and.w	r3, r3, #2
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d1ee      	bne.n	800169e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80016c0:	7dfb      	ldrb	r3, [r7, #23]
 80016c2:	2b01      	cmp	r3, #1
 80016c4:	d105      	bne.n	80016d2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016c6:	4b3c      	ldr	r3, [pc, #240]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80016c8:	69db      	ldr	r3, [r3, #28]
 80016ca:	4a3b      	ldr	r2, [pc, #236]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80016cc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016d0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	69db      	ldr	r3, [r3, #28]
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	f000 8087 	beq.w	80017ea <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80016dc:	4b36      	ldr	r3, [pc, #216]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	f003 030c 	and.w	r3, r3, #12
 80016e4:	2b08      	cmp	r3, #8
 80016e6:	d061      	beq.n	80017ac <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	69db      	ldr	r3, [r3, #28]
 80016ec:	2b02      	cmp	r3, #2
 80016ee:	d146      	bne.n	800177e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f0:	4b33      	ldr	r3, [pc, #204]	@ (80017c0 <HAL_RCC_OscConfig+0x4cc>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f6:	f7ff fa97 	bl	8000c28 <HAL_GetTick>
 80016fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80016fc:	e008      	b.n	8001710 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016fe:	f7ff fa93 	bl	8000c28 <HAL_GetTick>
 8001702:	4602      	mov	r2, r0
 8001704:	693b      	ldr	r3, [r7, #16]
 8001706:	1ad3      	subs	r3, r2, r3
 8001708:	2b02      	cmp	r3, #2
 800170a:	d901      	bls.n	8001710 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 800170c:	2303      	movs	r3, #3
 800170e:	e06d      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001710:	4b29      	ldr	r3, [pc, #164]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f0      	bne.n	80016fe <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a1b      	ldr	r3, [r3, #32]
 8001720:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001724:	d108      	bne.n	8001738 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001726:	4b24      	ldr	r3, [pc, #144]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	689b      	ldr	r3, [r3, #8]
 8001732:	4921      	ldr	r1, [pc, #132]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001734:	4313      	orrs	r3, r2
 8001736:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001738:	4b1f      	ldr	r3, [pc, #124]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a19      	ldr	r1, [r3, #32]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001748:	430b      	orrs	r3, r1
 800174a:	491b      	ldr	r1, [pc, #108]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 800174c:	4313      	orrs	r3, r2
 800174e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001750:	4b1b      	ldr	r3, [pc, #108]	@ (80017c0 <HAL_RCC_OscConfig+0x4cc>)
 8001752:	2201      	movs	r2, #1
 8001754:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001756:	f7ff fa67 	bl	8000c28 <HAL_GetTick>
 800175a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800175c:	e008      	b.n	8001770 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800175e:	f7ff fa63 	bl	8000c28 <HAL_GetTick>
 8001762:	4602      	mov	r2, r0
 8001764:	693b      	ldr	r3, [r7, #16]
 8001766:	1ad3      	subs	r3, r2, r3
 8001768:	2b02      	cmp	r3, #2
 800176a:	d901      	bls.n	8001770 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800176c:	2303      	movs	r3, #3
 800176e:	e03d      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001770:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001778:	2b00      	cmp	r3, #0
 800177a:	d0f0      	beq.n	800175e <HAL_RCC_OscConfig+0x46a>
 800177c:	e035      	b.n	80017ea <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800177e:	4b10      	ldr	r3, [pc, #64]	@ (80017c0 <HAL_RCC_OscConfig+0x4cc>)
 8001780:	2200      	movs	r2, #0
 8001782:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001784:	f7ff fa50 	bl	8000c28 <HAL_GetTick>
 8001788:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800178a:	e008      	b.n	800179e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800178c:	f7ff fa4c 	bl	8000c28 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	693b      	ldr	r3, [r7, #16]
 8001794:	1ad3      	subs	r3, r2, r3
 8001796:	2b02      	cmp	r3, #2
 8001798:	d901      	bls.n	800179e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800179a:	2303      	movs	r3, #3
 800179c:	e026      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <HAL_RCC_OscConfig+0x4c4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d1f0      	bne.n	800178c <HAL_RCC_OscConfig+0x498>
 80017aa:	e01e      	b.n	80017ea <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	69db      	ldr	r3, [r3, #28]
 80017b0:	2b01      	cmp	r3, #1
 80017b2:	d107      	bne.n	80017c4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e019      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
 80017b8:	40021000 	.word	0x40021000
 80017bc:	40007000 	.word	0x40007000
 80017c0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80017c4:	4b0b      	ldr	r3, [pc, #44]	@ (80017f4 <HAL_RCC_OscConfig+0x500>)
 80017c6:	685b      	ldr	r3, [r3, #4]
 80017c8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	429a      	cmp	r2, r3
 80017d6:	d106      	bne.n	80017e6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e2:	429a      	cmp	r2, r3
 80017e4:	d001      	beq.n	80017ea <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e000      	b.n	80017ec <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80017ea:	2300      	movs	r3, #0
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40021000 	.word	0x40021000

080017f8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b084      	sub	sp, #16
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]
 8001800:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	2b00      	cmp	r3, #0
 8001806:	d101      	bne.n	800180c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001808:	2301      	movs	r3, #1
 800180a:	e0d0      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800180c:	4b6a      	ldr	r3, [pc, #424]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0307 	and.w	r3, r3, #7
 8001814:	683a      	ldr	r2, [r7, #0]
 8001816:	429a      	cmp	r2, r3
 8001818:	d910      	bls.n	800183c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800181a:	4b67      	ldr	r3, [pc, #412]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800181c:	681b      	ldr	r3, [r3, #0]
 800181e:	f023 0207 	bic.w	r2, r3, #7
 8001822:	4965      	ldr	r1, [pc, #404]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001824:	683b      	ldr	r3, [r7, #0]
 8001826:	4313      	orrs	r3, r2
 8001828:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800182a:	4b63      	ldr	r3, [pc, #396]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	683a      	ldr	r2, [r7, #0]
 8001834:	429a      	cmp	r2, r3
 8001836:	d001      	beq.n	800183c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001838:	2301      	movs	r3, #1
 800183a:	e0b8      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0302 	and.w	r3, r3, #2
 8001844:	2b00      	cmp	r3, #0
 8001846:	d020      	beq.n	800188a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	f003 0304 	and.w	r3, r3, #4
 8001850:	2b00      	cmp	r3, #0
 8001852:	d005      	beq.n	8001860 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001854:	4b59      	ldr	r3, [pc, #356]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	4a58      	ldr	r2, [pc, #352]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800185a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800185e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0308 	and.w	r3, r3, #8
 8001868:	2b00      	cmp	r3, #0
 800186a:	d005      	beq.n	8001878 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800186c:	4b53      	ldr	r3, [pc, #332]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	4a52      	ldr	r2, [pc, #328]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001872:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001876:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001878:	4b50      	ldr	r3, [pc, #320]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	494d      	ldr	r1, [pc, #308]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001886:	4313      	orrs	r3, r2
 8001888:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0301 	and.w	r3, r3, #1
 8001892:	2b00      	cmp	r3, #0
 8001894:	d040      	beq.n	8001918 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	685b      	ldr	r3, [r3, #4]
 800189a:	2b01      	cmp	r3, #1
 800189c:	d107      	bne.n	80018ae <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800189e:	4b47      	ldr	r3, [pc, #284]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d115      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	e07f      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d107      	bne.n	80018c6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80018b6:	4b41      	ldr	r3, [pc, #260]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d109      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018c2:	2301      	movs	r3, #1
 80018c4:	e073      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80018c6:	4b3d      	ldr	r3, [pc, #244]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0302 	and.w	r3, r3, #2
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	d101      	bne.n	80018d6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
 80018d4:	e06b      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80018d6:	4b39      	ldr	r3, [pc, #228]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f023 0203 	bic.w	r2, r3, #3
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	4936      	ldr	r1, [pc, #216]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 80018e4:	4313      	orrs	r3, r2
 80018e6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80018e8:	f7ff f99e 	bl	8000c28 <HAL_GetTick>
 80018ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ee:	e00a      	b.n	8001906 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018f0:	f7ff f99a 	bl	8000c28 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018fe:	4293      	cmp	r3, r2
 8001900:	d901      	bls.n	8001906 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001902:	2303      	movs	r3, #3
 8001904:	e053      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001906:	4b2d      	ldr	r3, [pc, #180]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f003 020c 	and.w	r2, r3, #12
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	685b      	ldr	r3, [r3, #4]
 8001912:	009b      	lsls	r3, r3, #2
 8001914:	429a      	cmp	r2, r3
 8001916:	d1eb      	bne.n	80018f0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001918:	4b27      	ldr	r3, [pc, #156]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f003 0307 	and.w	r3, r3, #7
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	429a      	cmp	r2, r3
 8001924:	d210      	bcs.n	8001948 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001926:	4b24      	ldr	r3, [pc, #144]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	f023 0207 	bic.w	r2, r3, #7
 800192e:	4922      	ldr	r1, [pc, #136]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001930:	683b      	ldr	r3, [r7, #0]
 8001932:	4313      	orrs	r3, r2
 8001934:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001936:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <HAL_RCC_ClockConfig+0x1c0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f003 0307 	and.w	r3, r3, #7
 800193e:	683a      	ldr	r2, [r7, #0]
 8001940:	429a      	cmp	r2, r3
 8001942:	d001      	beq.n	8001948 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001944:	2301      	movs	r3, #1
 8001946:	e032      	b.n	80019ae <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	f003 0304 	and.w	r3, r3, #4
 8001950:	2b00      	cmp	r3, #0
 8001952:	d008      	beq.n	8001966 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001954:	4b19      	ldr	r3, [pc, #100]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	4916      	ldr	r1, [pc, #88]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001962:	4313      	orrs	r3, r2
 8001964:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0308 	and.w	r3, r3, #8
 800196e:	2b00      	cmp	r3, #0
 8001970:	d009      	beq.n	8001986 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001972:	4b12      	ldr	r3, [pc, #72]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001974:	685b      	ldr	r3, [r3, #4]
 8001976:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	691b      	ldr	r3, [r3, #16]
 800197e:	00db      	lsls	r3, r3, #3
 8001980:	490e      	ldr	r1, [pc, #56]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 8001982:	4313      	orrs	r3, r2
 8001984:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001986:	f000 f821 	bl	80019cc <HAL_RCC_GetSysClockFreq>
 800198a:	4602      	mov	r2, r0
 800198c:	4b0b      	ldr	r3, [pc, #44]	@ (80019bc <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	091b      	lsrs	r3, r3, #4
 8001992:	f003 030f 	and.w	r3, r3, #15
 8001996:	490a      	ldr	r1, [pc, #40]	@ (80019c0 <HAL_RCC_ClockConfig+0x1c8>)
 8001998:	5ccb      	ldrb	r3, [r1, r3]
 800199a:	fa22 f303 	lsr.w	r3, r2, r3
 800199e:	4a09      	ldr	r2, [pc, #36]	@ (80019c4 <HAL_RCC_ClockConfig+0x1cc>)
 80019a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <HAL_RCC_ClockConfig+0x1d0>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4618      	mov	r0, r3
 80019a8:	f7ff f8fc 	bl	8000ba4 <HAL_InitTick>

  return HAL_OK;
 80019ac:	2300      	movs	r3, #0
}
 80019ae:	4618      	mov	r0, r3
 80019b0:	3710      	adds	r7, #16
 80019b2:	46bd      	mov	sp, r7
 80019b4:	bd80      	pop	{r7, pc}
 80019b6:	bf00      	nop
 80019b8:	40022000 	.word	0x40022000
 80019bc:	40021000 	.word	0x40021000
 80019c0:	080032f8 	.word	0x080032f8
 80019c4:	20000000 	.word	0x20000000
 80019c8:	20000004 	.word	0x20000004

080019cc <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b087      	sub	sp, #28
 80019d0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80019d2:	2300      	movs	r3, #0
 80019d4:	60fb      	str	r3, [r7, #12]
 80019d6:	2300      	movs	r3, #0
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	2300      	movs	r3, #0
 80019dc:	617b      	str	r3, [r7, #20]
 80019de:	2300      	movs	r3, #0
 80019e0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80019e2:	2300      	movs	r3, #0
 80019e4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80019e6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x94>)
 80019e8:	685b      	ldr	r3, [r3, #4]
 80019ea:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	f003 030c 	and.w	r3, r3, #12
 80019f2:	2b04      	cmp	r3, #4
 80019f4:	d002      	beq.n	80019fc <HAL_RCC_GetSysClockFreq+0x30>
 80019f6:	2b08      	cmp	r3, #8
 80019f8:	d003      	beq.n	8001a02 <HAL_RCC_GetSysClockFreq+0x36>
 80019fa:	e027      	b.n	8001a4c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80019fc:	4b19      	ldr	r3, [pc, #100]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x98>)
 80019fe:	613b      	str	r3, [r7, #16]
      break;
 8001a00:	e027      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001a02:	68fb      	ldr	r3, [r7, #12]
 8001a04:	0c9b      	lsrs	r3, r3, #18
 8001a06:	f003 030f 	and.w	r3, r3, #15
 8001a0a:	4a17      	ldr	r2, [pc, #92]	@ (8001a68 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001a0c:	5cd3      	ldrb	r3, [r2, r3]
 8001a0e:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d010      	beq.n	8001a3c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001a1a:	4b11      	ldr	r3, [pc, #68]	@ (8001a60 <HAL_RCC_GetSysClockFreq+0x94>)
 8001a1c:	685b      	ldr	r3, [r3, #4]
 8001a1e:	0c5b      	lsrs	r3, r3, #17
 8001a20:	f003 0301 	and.w	r3, r3, #1
 8001a24:	4a11      	ldr	r2, [pc, #68]	@ (8001a6c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001a26:	5cd3      	ldrb	r3, [r2, r3]
 8001a28:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a0d      	ldr	r2, [pc, #52]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a2e:	fb03 f202 	mul.w	r2, r3, r2
 8001a32:	68bb      	ldr	r3, [r7, #8]
 8001a34:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	e004      	b.n	8001a46 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	4a0c      	ldr	r2, [pc, #48]	@ (8001a70 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001a40:	fb02 f303 	mul.w	r3, r2, r3
 8001a44:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001a46:	697b      	ldr	r3, [r7, #20]
 8001a48:	613b      	str	r3, [r7, #16]
      break;
 8001a4a:	e002      	b.n	8001a52 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001a4c:	4b05      	ldr	r3, [pc, #20]	@ (8001a64 <HAL_RCC_GetSysClockFreq+0x98>)
 8001a4e:	613b      	str	r3, [r7, #16]
      break;
 8001a50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001a52:	693b      	ldr	r3, [r7, #16]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	371c      	adds	r7, #28
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bc80      	pop	{r7}
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40021000 	.word	0x40021000
 8001a64:	007a1200 	.word	0x007a1200
 8001a68:	08003310 	.word	0x08003310
 8001a6c:	08003320 	.word	0x08003320
 8001a70:	003d0900 	.word	0x003d0900

08001a74 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001a74:	b480      	push	{r7}
 8001a76:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001a78:	4b02      	ldr	r3, [pc, #8]	@ (8001a84 <HAL_RCC_GetHCLKFreq+0x10>)
 8001a7a:	681b      	ldr	r3, [r3, #0]
}
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bc80      	pop	{r7}
 8001a82:	4770      	bx	lr
 8001a84:	20000000 	.word	0x20000000

08001a88 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001a8c:	f7ff fff2 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001a90:	4602      	mov	r2, r0
 8001a92:	4b05      	ldr	r3, [pc, #20]	@ (8001aa8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001a94:	685b      	ldr	r3, [r3, #4]
 8001a96:	0a1b      	lsrs	r3, r3, #8
 8001a98:	f003 0307 	and.w	r3, r3, #7
 8001a9c:	4903      	ldr	r1, [pc, #12]	@ (8001aac <HAL_RCC_GetPCLK1Freq+0x24>)
 8001a9e:	5ccb      	ldrb	r3, [r1, r3]
 8001aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001aa4:	4618      	mov	r0, r3
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	08003308 	.word	0x08003308

08001ab0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001ab4:	f7ff ffde 	bl	8001a74 <HAL_RCC_GetHCLKFreq>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	4b05      	ldr	r3, [pc, #20]	@ (8001ad0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001abc:	685b      	ldr	r3, [r3, #4]
 8001abe:	0adb      	lsrs	r3, r3, #11
 8001ac0:	f003 0307 	and.w	r3, r3, #7
 8001ac4:	4903      	ldr	r1, [pc, #12]	@ (8001ad4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ac6:	5ccb      	ldrb	r3, [r1, r3]
 8001ac8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	bd80      	pop	{r7, pc}
 8001ad0:	40021000 	.word	0x40021000
 8001ad4:	08003308 	.word	0x08003308

08001ad8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b085      	sub	sp, #20
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001ae0:	4b0a      	ldr	r3, [pc, #40]	@ (8001b0c <RCC_Delay+0x34>)
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	4a0a      	ldr	r2, [pc, #40]	@ (8001b10 <RCC_Delay+0x38>)
 8001ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8001aea:	0a5b      	lsrs	r3, r3, #9
 8001aec:	687a      	ldr	r2, [r7, #4]
 8001aee:	fb02 f303 	mul.w	r3, r2, r3
 8001af2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001af4:	bf00      	nop
  }
  while (Delay --);
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	1e5a      	subs	r2, r3, #1
 8001afa:	60fa      	str	r2, [r7, #12]
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d1f9      	bne.n	8001af4 <RCC_Delay+0x1c>
}
 8001b00:	bf00      	nop
 8001b02:	bf00      	nop
 8001b04:	3714      	adds	r7, #20
 8001b06:	46bd      	mov	sp, r7
 8001b08:	bc80      	pop	{r7}
 8001b0a:	4770      	bx	lr
 8001b0c:	20000000 	.word	0x20000000
 8001b10:	10624dd3 	.word	0x10624dd3

08001b14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b082      	sub	sp, #8
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	2b00      	cmp	r3, #0
 8001b20:	d101      	bne.n	8001b26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001b22:	2301      	movs	r3, #1
 8001b24:	e041      	b.n	8001baa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001b2c:	b2db      	uxtb	r3, r3
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d106      	bne.n	8001b40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	2200      	movs	r2, #0
 8001b36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001b3a:	6878      	ldr	r0, [r7, #4]
 8001b3c:	f7fe fef6 	bl	800092c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	2202      	movs	r2, #2
 8001b44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681a      	ldr	r2, [r3, #0]
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3304      	adds	r3, #4
 8001b50:	4619      	mov	r1, r3
 8001b52:	4610      	mov	r0, r2
 8001b54:	f000 fab2 	bl	80020bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	2201      	movs	r2, #1
 8001b5c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	2201      	movs	r2, #1
 8001b64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	2201      	movs	r2, #1
 8001b6c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2201      	movs	r2, #1
 8001b84:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	2201      	movs	r2, #1
 8001b8c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	2201      	movs	r2, #1
 8001b94:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	2201      	movs	r2, #1
 8001ba4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}

08001bb2 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001bb2:	b580      	push	{r7, lr}
 8001bb4:	b082      	sub	sp, #8
 8001bb6:	af00      	add	r7, sp, #0
 8001bb8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e041      	b.n	8001c48 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bca:	b2db      	uxtb	r3, r3
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d106      	bne.n	8001bde <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f000 f839 	bl	8001c50 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2202      	movs	r2, #2
 8001be2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681a      	ldr	r2, [r3, #0]
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	3304      	adds	r3, #4
 8001bee:	4619      	mov	r1, r3
 8001bf0:	4610      	mov	r0, r2
 8001bf2:	f000 fa63 	bl	80020bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	2201      	movs	r2, #1
 8001bfa:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2201      	movs	r2, #1
 8001c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2201      	movs	r2, #1
 8001c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2201      	movs	r2, #1
 8001c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	2201      	movs	r2, #1
 8001c2a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	2201      	movs	r2, #1
 8001c32:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	2201      	movs	r2, #1
 8001c42:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001c46:	2300      	movs	r3, #0
}
 8001c48:	4618      	mov	r0, r3
 8001c4a:	3708      	adds	r7, #8
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	bd80      	pop	{r7, pc}

08001c50 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001c58:	bf00      	nop
 8001c5a:	370c      	adds	r7, #12
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bc80      	pop	{r7}
 8001c60:	4770      	bx	lr
	...

08001c64 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d109      	bne.n	8001c88 <HAL_TIM_PWM_Start+0x24>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001c7a:	b2db      	uxtb	r3, r3
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	bf14      	ite	ne
 8001c80:	2301      	movne	r3, #1
 8001c82:	2300      	moveq	r3, #0
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	e022      	b.n	8001cce <HAL_TIM_PWM_Start+0x6a>
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	2b04      	cmp	r3, #4
 8001c8c:	d109      	bne.n	8001ca2 <HAL_TIM_PWM_Start+0x3e>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	bf14      	ite	ne
 8001c9a:	2301      	movne	r3, #1
 8001c9c:	2300      	moveq	r3, #0
 8001c9e:	b2db      	uxtb	r3, r3
 8001ca0:	e015      	b.n	8001cce <HAL_TIM_PWM_Start+0x6a>
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	2b08      	cmp	r3, #8
 8001ca6:	d109      	bne.n	8001cbc <HAL_TIM_PWM_Start+0x58>
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001cae:	b2db      	uxtb	r3, r3
 8001cb0:	2b01      	cmp	r3, #1
 8001cb2:	bf14      	ite	ne
 8001cb4:	2301      	movne	r3, #1
 8001cb6:	2300      	moveq	r3, #0
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	e008      	b.n	8001cce <HAL_TIM_PWM_Start+0x6a>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001cc2:	b2db      	uxtb	r3, r3
 8001cc4:	2b01      	cmp	r3, #1
 8001cc6:	bf14      	ite	ne
 8001cc8:	2301      	movne	r3, #1
 8001cca:	2300      	moveq	r3, #0
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d001      	beq.n	8001cd6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001cd2:	2301      	movs	r3, #1
 8001cd4:	e05e      	b.n	8001d94 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d104      	bne.n	8001ce6 <HAL_TIM_PWM_Start+0x82>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2202      	movs	r2, #2
 8001ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ce4:	e013      	b.n	8001d0e <HAL_TIM_PWM_Start+0xaa>
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	2b04      	cmp	r3, #4
 8001cea:	d104      	bne.n	8001cf6 <HAL_TIM_PWM_Start+0x92>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2202      	movs	r2, #2
 8001cf0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001cf4:	e00b      	b.n	8001d0e <HAL_TIM_PWM_Start+0xaa>
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	2b08      	cmp	r3, #8
 8001cfa:	d104      	bne.n	8001d06 <HAL_TIM_PWM_Start+0xa2>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d04:	e003      	b.n	8001d0e <HAL_TIM_PWM_Start+0xaa>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2202      	movs	r2, #2
 8001d0a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	2201      	movs	r2, #1
 8001d14:	6839      	ldr	r1, [r7, #0]
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 fc5c 	bl	80025d4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a1e      	ldr	r2, [pc, #120]	@ (8001d9c <HAL_TIM_PWM_Start+0x138>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d107      	bne.n	8001d36 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001d34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4a18      	ldr	r2, [pc, #96]	@ (8001d9c <HAL_TIM_PWM_Start+0x138>)
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	d00e      	beq.n	8001d5e <HAL_TIM_PWM_Start+0xfa>
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001d48:	d009      	beq.n	8001d5e <HAL_TIM_PWM_Start+0xfa>
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	681b      	ldr	r3, [r3, #0]
 8001d4e:	4a14      	ldr	r2, [pc, #80]	@ (8001da0 <HAL_TIM_PWM_Start+0x13c>)
 8001d50:	4293      	cmp	r3, r2
 8001d52:	d004      	beq.n	8001d5e <HAL_TIM_PWM_Start+0xfa>
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a12      	ldr	r2, [pc, #72]	@ (8001da4 <HAL_TIM_PWM_Start+0x140>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d111      	bne.n	8001d82 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	689b      	ldr	r3, [r3, #8]
 8001d64:	f003 0307 	and.w	r3, r3, #7
 8001d68:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d6a:	68fb      	ldr	r3, [r7, #12]
 8001d6c:	2b06      	cmp	r3, #6
 8001d6e:	d010      	beq.n	8001d92 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	681a      	ldr	r2, [r3, #0]
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f042 0201 	orr.w	r2, r2, #1
 8001d7e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d80:	e007      	b.n	8001d92 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f042 0201 	orr.w	r2, r2, #1
 8001d90:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d92:	2300      	movs	r3, #0
}
 8001d94:	4618      	mov	r0, r3
 8001d96:	3710      	adds	r7, #16
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	40012c00 	.word	0x40012c00
 8001da0:	40000400 	.word	0x40000400
 8001da4:	40000800 	.word	0x40000800

08001da8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b086      	sub	sp, #24
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	60f8      	str	r0, [r7, #12]
 8001db0:	60b9      	str	r1, [r7, #8]
 8001db2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001db4:	2300      	movs	r3, #0
 8001db6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001dbe:	2b01      	cmp	r3, #1
 8001dc0:	d101      	bne.n	8001dc6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001dc2:	2302      	movs	r3, #2
 8001dc4:	e0ae      	b.n	8001f24 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	2201      	movs	r2, #1
 8001dca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2b0c      	cmp	r3, #12
 8001dd2:	f200 809f 	bhi.w	8001f14 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001dd6:	a201      	add	r2, pc, #4	@ (adr r2, 8001ddc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001dd8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ddc:	08001e11 	.word	0x08001e11
 8001de0:	08001f15 	.word	0x08001f15
 8001de4:	08001f15 	.word	0x08001f15
 8001de8:	08001f15 	.word	0x08001f15
 8001dec:	08001e51 	.word	0x08001e51
 8001df0:	08001f15 	.word	0x08001f15
 8001df4:	08001f15 	.word	0x08001f15
 8001df8:	08001f15 	.word	0x08001f15
 8001dfc:	08001e93 	.word	0x08001e93
 8001e00:	08001f15 	.word	0x08001f15
 8001e04:	08001f15 	.word	0x08001f15
 8001e08:	08001f15 	.word	0x08001f15
 8001e0c:	08001ed3 	.word	0x08001ed3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68b9      	ldr	r1, [r7, #8]
 8001e16:	4618      	mov	r0, r3
 8001e18:	f000 f9be 	bl	8002198 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	699a      	ldr	r2, [r3, #24]
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	f042 0208 	orr.w	r2, r2, #8
 8001e2a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	699a      	ldr	r2, [r3, #24]
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 0204 	bic.w	r2, r2, #4
 8001e3a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	6999      	ldr	r1, [r3, #24]
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	691a      	ldr	r2, [r3, #16]
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	619a      	str	r2, [r3, #24]
      break;
 8001e4e:	e064      	b.n	8001f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001e50:	68fb      	ldr	r3, [r7, #12]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	68b9      	ldr	r1, [r7, #8]
 8001e56:	4618      	mov	r0, r3
 8001e58:	f000 fa04 	bl	8002264 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	699a      	ldr	r2, [r3, #24]
 8001e62:	68fb      	ldr	r3, [r7, #12]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001e6a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	699a      	ldr	r2, [r3, #24]
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001e7a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	6999      	ldr	r1, [r3, #24]
 8001e82:	68bb      	ldr	r3, [r7, #8]
 8001e84:	691b      	ldr	r3, [r3, #16]
 8001e86:	021a      	lsls	r2, r3, #8
 8001e88:	68fb      	ldr	r3, [r7, #12]
 8001e8a:	681b      	ldr	r3, [r3, #0]
 8001e8c:	430a      	orrs	r2, r1
 8001e8e:	619a      	str	r2, [r3, #24]
      break;
 8001e90:	e043      	b.n	8001f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	68b9      	ldr	r1, [r7, #8]
 8001e98:	4618      	mov	r0, r3
 8001e9a:	f000 fa4d 	bl	8002338 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	69da      	ldr	r2, [r3, #28]
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	f042 0208 	orr.w	r2, r2, #8
 8001eac:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	69da      	ldr	r2, [r3, #28]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	f022 0204 	bic.w	r2, r2, #4
 8001ebc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	69d9      	ldr	r1, [r3, #28]
 8001ec4:	68bb      	ldr	r3, [r7, #8]
 8001ec6:	691a      	ldr	r2, [r3, #16]
 8001ec8:	68fb      	ldr	r3, [r7, #12]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	430a      	orrs	r2, r1
 8001ece:	61da      	str	r2, [r3, #28]
      break;
 8001ed0:	e023      	b.n	8001f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001ed2:	68fb      	ldr	r3, [r7, #12]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	68b9      	ldr	r1, [r7, #8]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f000 fa97 	bl	800240c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001ede:	68fb      	ldr	r3, [r7, #12]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	69da      	ldr	r2, [r3, #28]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001eec:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	69da      	ldr	r2, [r3, #28]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001efc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001efe:	68fb      	ldr	r3, [r7, #12]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	69d9      	ldr	r1, [r3, #28]
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	021a      	lsls	r2, r3, #8
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	430a      	orrs	r2, r1
 8001f10:	61da      	str	r2, [r3, #28]
      break;
 8001f12:	e002      	b.n	8001f1a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001f14:	2301      	movs	r3, #1
 8001f16:	75fb      	strb	r3, [r7, #23]
      break;
 8001f18:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8001f22:	7dfb      	ldrb	r3, [r7, #23]
}
 8001f24:	4618      	mov	r0, r3
 8001f26:	3718      	adds	r7, #24
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	bd80      	pop	{r7, pc}

08001f2c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	b084      	sub	sp, #16
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	6078      	str	r0, [r7, #4]
 8001f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f36:	2300      	movs	r3, #0
 8001f38:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001f40:	2b01      	cmp	r3, #1
 8001f42:	d101      	bne.n	8001f48 <HAL_TIM_ConfigClockSource+0x1c>
 8001f44:	2302      	movs	r3, #2
 8001f46:	e0b4      	b.n	80020b2 <HAL_TIM_ConfigClockSource+0x186>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2201      	movs	r2, #1
 8001f4c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	689b      	ldr	r3, [r3, #8]
 8001f5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8001f66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8001f68:	68bb      	ldr	r3, [r7, #8]
 8001f6a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8001f6e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	68ba      	ldr	r2, [r7, #8]
 8001f76:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8001f78:	683b      	ldr	r3, [r7, #0]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f80:	d03e      	beq.n	8002000 <HAL_TIM_ConfigClockSource+0xd4>
 8001f82:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8001f86:	f200 8087 	bhi.w	8002098 <HAL_TIM_ConfigClockSource+0x16c>
 8001f8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f8e:	f000 8086 	beq.w	800209e <HAL_TIM_ConfigClockSource+0x172>
 8001f92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001f96:	d87f      	bhi.n	8002098 <HAL_TIM_ConfigClockSource+0x16c>
 8001f98:	2b70      	cmp	r3, #112	@ 0x70
 8001f9a:	d01a      	beq.n	8001fd2 <HAL_TIM_ConfigClockSource+0xa6>
 8001f9c:	2b70      	cmp	r3, #112	@ 0x70
 8001f9e:	d87b      	bhi.n	8002098 <HAL_TIM_ConfigClockSource+0x16c>
 8001fa0:	2b60      	cmp	r3, #96	@ 0x60
 8001fa2:	d050      	beq.n	8002046 <HAL_TIM_ConfigClockSource+0x11a>
 8001fa4:	2b60      	cmp	r3, #96	@ 0x60
 8001fa6:	d877      	bhi.n	8002098 <HAL_TIM_ConfigClockSource+0x16c>
 8001fa8:	2b50      	cmp	r3, #80	@ 0x50
 8001faa:	d03c      	beq.n	8002026 <HAL_TIM_ConfigClockSource+0xfa>
 8001fac:	2b50      	cmp	r3, #80	@ 0x50
 8001fae:	d873      	bhi.n	8002098 <HAL_TIM_ConfigClockSource+0x16c>
 8001fb0:	2b40      	cmp	r3, #64	@ 0x40
 8001fb2:	d058      	beq.n	8002066 <HAL_TIM_ConfigClockSource+0x13a>
 8001fb4:	2b40      	cmp	r3, #64	@ 0x40
 8001fb6:	d86f      	bhi.n	8002098 <HAL_TIM_ConfigClockSource+0x16c>
 8001fb8:	2b30      	cmp	r3, #48	@ 0x30
 8001fba:	d064      	beq.n	8002086 <HAL_TIM_ConfigClockSource+0x15a>
 8001fbc:	2b30      	cmp	r3, #48	@ 0x30
 8001fbe:	d86b      	bhi.n	8002098 <HAL_TIM_ConfigClockSource+0x16c>
 8001fc0:	2b20      	cmp	r3, #32
 8001fc2:	d060      	beq.n	8002086 <HAL_TIM_ConfigClockSource+0x15a>
 8001fc4:	2b20      	cmp	r3, #32
 8001fc6:	d867      	bhi.n	8002098 <HAL_TIM_ConfigClockSource+0x16c>
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d05c      	beq.n	8002086 <HAL_TIM_ConfigClockSource+0x15a>
 8001fcc:	2b10      	cmp	r3, #16
 8001fce:	d05a      	beq.n	8002086 <HAL_TIM_ConfigClockSource+0x15a>
 8001fd0:	e062      	b.n	8002098 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8001fda:	683b      	ldr	r3, [r7, #0]
 8001fdc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8001fe2:	f000 fad8 	bl	8002596 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8001fee:	68bb      	ldr	r3, [r7, #8]
 8001ff0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8001ff4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	68ba      	ldr	r2, [r7, #8]
 8001ffc:	609a      	str	r2, [r3, #8]
      break;
 8001ffe:	e04f      	b.n	80020a0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002004:	683b      	ldr	r3, [r7, #0]
 8002006:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002008:	683b      	ldr	r3, [r7, #0]
 800200a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800200c:	683b      	ldr	r3, [r7, #0]
 800200e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002010:	f000 fac1 	bl	8002596 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	689a      	ldr	r2, [r3, #8]
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002022:	609a      	str	r2, [r3, #8]
      break;
 8002024:	e03c      	b.n	80020a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800202e:	683b      	ldr	r3, [r7, #0]
 8002030:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002032:	461a      	mov	r2, r3
 8002034:	f000 fa38 	bl	80024a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	2150      	movs	r1, #80	@ 0x50
 800203e:	4618      	mov	r0, r3
 8002040:	f000 fa8f 	bl	8002562 <TIM_ITRx_SetConfig>
      break;
 8002044:	e02c      	b.n	80020a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800204a:	683b      	ldr	r3, [r7, #0]
 800204c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800204e:	683b      	ldr	r3, [r7, #0]
 8002050:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002052:	461a      	mov	r2, r3
 8002054:	f000 fa56 	bl	8002504 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	2160      	movs	r1, #96	@ 0x60
 800205e:	4618      	mov	r0, r3
 8002060:	f000 fa7f 	bl	8002562 <TIM_ITRx_SetConfig>
      break;
 8002064:	e01c      	b.n	80020a0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800206a:	683b      	ldr	r3, [r7, #0]
 800206c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002072:	461a      	mov	r2, r3
 8002074:	f000 fa18 	bl	80024a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	2140      	movs	r1, #64	@ 0x40
 800207e:	4618      	mov	r0, r3
 8002080:	f000 fa6f 	bl	8002562 <TIM_ITRx_SetConfig>
      break;
 8002084:	e00c      	b.n	80020a0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681a      	ldr	r2, [r3, #0]
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	4619      	mov	r1, r3
 8002090:	4610      	mov	r0, r2
 8002092:	f000 fa66 	bl	8002562 <TIM_ITRx_SetConfig>
      break;
 8002096:	e003      	b.n	80020a0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	73fb      	strb	r3, [r7, #15]
      break;
 800209c:	e000      	b.n	80020a0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800209e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2201      	movs	r2, #1
 80020a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80020b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}
	...

080020bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80020bc:	b480      	push	{r7}
 80020be:	b085      	sub	sp, #20
 80020c0:	af00      	add	r7, sp, #0
 80020c2:	6078      	str	r0, [r7, #4]
 80020c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	4a2f      	ldr	r2, [pc, #188]	@ (800218c <TIM_Base_SetConfig+0xd0>)
 80020d0:	4293      	cmp	r3, r2
 80020d2:	d00b      	beq.n	80020ec <TIM_Base_SetConfig+0x30>
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80020da:	d007      	beq.n	80020ec <TIM_Base_SetConfig+0x30>
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	4a2c      	ldr	r2, [pc, #176]	@ (8002190 <TIM_Base_SetConfig+0xd4>)
 80020e0:	4293      	cmp	r3, r2
 80020e2:	d003      	beq.n	80020ec <TIM_Base_SetConfig+0x30>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	4a2b      	ldr	r2, [pc, #172]	@ (8002194 <TIM_Base_SetConfig+0xd8>)
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d108      	bne.n	80020fe <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80020ec:	68fb      	ldr	r3, [r7, #12]
 80020ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80020f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	685b      	ldr	r3, [r3, #4]
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4313      	orrs	r3, r2
 80020fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	4a22      	ldr	r2, [pc, #136]	@ (800218c <TIM_Base_SetConfig+0xd0>)
 8002102:	4293      	cmp	r3, r2
 8002104:	d00b      	beq.n	800211e <TIM_Base_SetConfig+0x62>
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800210c:	d007      	beq.n	800211e <TIM_Base_SetConfig+0x62>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	4a1f      	ldr	r2, [pc, #124]	@ (8002190 <TIM_Base_SetConfig+0xd4>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d003      	beq.n	800211e <TIM_Base_SetConfig+0x62>
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4a1e      	ldr	r2, [pc, #120]	@ (8002194 <TIM_Base_SetConfig+0xd8>)
 800211a:	4293      	cmp	r3, r2
 800211c:	d108      	bne.n	8002130 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002124:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	68fa      	ldr	r2, [r7, #12]
 800212c:	4313      	orrs	r3, r2
 800212e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	4313      	orrs	r3, r2
 800213c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	68fa      	ldr	r2, [r7, #12]
 8002142:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002144:	683b      	ldr	r3, [r7, #0]
 8002146:	689a      	ldr	r2, [r3, #8]
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	681a      	ldr	r2, [r3, #0]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	4a0d      	ldr	r2, [pc, #52]	@ (800218c <TIM_Base_SetConfig+0xd0>)
 8002158:	4293      	cmp	r3, r2
 800215a:	d103      	bne.n	8002164 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800215c:	683b      	ldr	r3, [r7, #0]
 800215e:	691a      	ldr	r2, [r3, #16]
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	2201      	movs	r2, #1
 8002168:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	691b      	ldr	r3, [r3, #16]
 800216e:	f003 0301 	and.w	r3, r3, #1
 8002172:	2b00      	cmp	r3, #0
 8002174:	d005      	beq.n	8002182 <TIM_Base_SetConfig+0xc6>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	691b      	ldr	r3, [r3, #16]
 800217a:	f023 0201 	bic.w	r2, r3, #1
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	611a      	str	r2, [r3, #16]
  }
}
 8002182:	bf00      	nop
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	bc80      	pop	{r7}
 800218a:	4770      	bx	lr
 800218c:	40012c00 	.word	0x40012c00
 8002190:	40000400 	.word	0x40000400
 8002194:	40000800 	.word	0x40000800

08002198 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002198:	b480      	push	{r7}
 800219a:	b087      	sub	sp, #28
 800219c:	af00      	add	r7, sp, #0
 800219e:	6078      	str	r0, [r7, #4]
 80021a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	f023 0201 	bic.w	r2, r3, #1
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	685b      	ldr	r3, [r3, #4]
 80021b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	699b      	ldr	r3, [r3, #24]
 80021be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80021c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f023 0303 	bic.w	r3, r3, #3
 80021ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	68fa      	ldr	r2, [r7, #12]
 80021d6:	4313      	orrs	r3, r2
 80021d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	f023 0302 	bic.w	r3, r3, #2
 80021e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80021e2:	683b      	ldr	r3, [r7, #0]
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	697a      	ldr	r2, [r7, #20]
 80021e8:	4313      	orrs	r3, r2
 80021ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	4a1c      	ldr	r2, [pc, #112]	@ (8002260 <TIM_OC1_SetConfig+0xc8>)
 80021f0:	4293      	cmp	r3, r2
 80021f2:	d10c      	bne.n	800220e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f023 0308 	bic.w	r3, r3, #8
 80021fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	697a      	ldr	r2, [r7, #20]
 8002202:	4313      	orrs	r3, r2
 8002204:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002206:	697b      	ldr	r3, [r7, #20]
 8002208:	f023 0304 	bic.w	r3, r3, #4
 800220c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	4a13      	ldr	r2, [pc, #76]	@ (8002260 <TIM_OC1_SetConfig+0xc8>)
 8002212:	4293      	cmp	r3, r2
 8002214:	d111      	bne.n	800223a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800221c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002224:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	695b      	ldr	r3, [r3, #20]
 800222a:	693a      	ldr	r2, [r7, #16]
 800222c:	4313      	orrs	r3, r2
 800222e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	699b      	ldr	r3, [r3, #24]
 8002234:	693a      	ldr	r2, [r7, #16]
 8002236:	4313      	orrs	r3, r2
 8002238:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	693a      	ldr	r2, [r7, #16]
 800223e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	68fa      	ldr	r2, [r7, #12]
 8002244:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	685a      	ldr	r2, [r3, #4]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	621a      	str	r2, [r3, #32]
}
 8002254:	bf00      	nop
 8002256:	371c      	adds	r7, #28
 8002258:	46bd      	mov	sp, r7
 800225a:	bc80      	pop	{r7}
 800225c:	4770      	bx	lr
 800225e:	bf00      	nop
 8002260:	40012c00 	.word	0x40012c00

08002264 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002264:	b480      	push	{r7}
 8002266:	b087      	sub	sp, #28
 8002268:	af00      	add	r7, sp, #0
 800226a:	6078      	str	r0, [r7, #4]
 800226c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	6a1b      	ldr	r3, [r3, #32]
 8002272:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6a1b      	ldr	r3, [r3, #32]
 8002278:	f023 0210 	bic.w	r2, r3, #16
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	699b      	ldr	r3, [r3, #24]
 800228a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002292:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800229a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	021b      	lsls	r3, r3, #8
 80022a2:	68fa      	ldr	r2, [r7, #12]
 80022a4:	4313      	orrs	r3, r2
 80022a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	f023 0320 	bic.w	r3, r3, #32
 80022ae:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	689b      	ldr	r3, [r3, #8]
 80022b4:	011b      	lsls	r3, r3, #4
 80022b6:	697a      	ldr	r2, [r7, #20]
 80022b8:	4313      	orrs	r3, r2
 80022ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	4a1d      	ldr	r2, [pc, #116]	@ (8002334 <TIM_OC2_SetConfig+0xd0>)
 80022c0:	4293      	cmp	r3, r2
 80022c2:	d10d      	bne.n	80022e0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80022c4:	697b      	ldr	r3, [r7, #20]
 80022c6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80022ca:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	68db      	ldr	r3, [r3, #12]
 80022d0:	011b      	lsls	r3, r3, #4
 80022d2:	697a      	ldr	r2, [r7, #20]
 80022d4:	4313      	orrs	r3, r2
 80022d6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80022d8:	697b      	ldr	r3, [r7, #20]
 80022da:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80022de:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	4a14      	ldr	r2, [pc, #80]	@ (8002334 <TIM_OC2_SetConfig+0xd0>)
 80022e4:	4293      	cmp	r3, r2
 80022e6:	d113      	bne.n	8002310 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80022ee:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80022f0:	693b      	ldr	r3, [r7, #16]
 80022f2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80022f6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	695b      	ldr	r3, [r3, #20]
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	4313      	orrs	r3, r2
 8002302:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002304:	683b      	ldr	r3, [r7, #0]
 8002306:	699b      	ldr	r3, [r3, #24]
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	693a      	ldr	r2, [r7, #16]
 800230c:	4313      	orrs	r3, r2
 800230e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	68fa      	ldr	r2, [r7, #12]
 800231a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	697a      	ldr	r2, [r7, #20]
 8002328:	621a      	str	r2, [r3, #32]
}
 800232a:	bf00      	nop
 800232c:	371c      	adds	r7, #28
 800232e:	46bd      	mov	sp, r7
 8002330:	bc80      	pop	{r7}
 8002332:	4770      	bx	lr
 8002334:	40012c00 	.word	0x40012c00

08002338 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002338:	b480      	push	{r7}
 800233a:	b087      	sub	sp, #28
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
 8002340:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	69db      	ldr	r3, [r3, #28]
 800235e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002366:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f023 0303 	bic.w	r3, r3, #3
 800236e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002370:	683b      	ldr	r3, [r7, #0]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	68fa      	ldr	r2, [r7, #12]
 8002376:	4313      	orrs	r3, r2
 8002378:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800237a:	697b      	ldr	r3, [r7, #20]
 800237c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002380:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	689b      	ldr	r3, [r3, #8]
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	697a      	ldr	r2, [r7, #20]
 800238a:	4313      	orrs	r3, r2
 800238c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a1d      	ldr	r2, [pc, #116]	@ (8002408 <TIM_OC3_SetConfig+0xd0>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d10d      	bne.n	80023b2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002396:	697b      	ldr	r3, [r7, #20]
 8002398:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800239c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	68db      	ldr	r3, [r3, #12]
 80023a2:	021b      	lsls	r3, r3, #8
 80023a4:	697a      	ldr	r2, [r7, #20]
 80023a6:	4313      	orrs	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80023aa:	697b      	ldr	r3, [r7, #20]
 80023ac:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80023b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a14      	ldr	r2, [pc, #80]	@ (8002408 <TIM_OC3_SetConfig+0xd0>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d113      	bne.n	80023e2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80023ba:	693b      	ldr	r3, [r7, #16]
 80023bc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80023c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80023c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	695b      	ldr	r3, [r3, #20]
 80023ce:	011b      	lsls	r3, r3, #4
 80023d0:	693a      	ldr	r2, [r7, #16]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80023d6:	683b      	ldr	r3, [r7, #0]
 80023d8:	699b      	ldr	r3, [r3, #24]
 80023da:	011b      	lsls	r3, r3, #4
 80023dc:	693a      	ldr	r2, [r7, #16]
 80023de:	4313      	orrs	r3, r2
 80023e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	693a      	ldr	r2, [r7, #16]
 80023e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	68fa      	ldr	r2, [r7, #12]
 80023ec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	697a      	ldr	r2, [r7, #20]
 80023fa:	621a      	str	r2, [r3, #32]
}
 80023fc:	bf00      	nop
 80023fe:	371c      	adds	r7, #28
 8002400:	46bd      	mov	sp, r7
 8002402:	bc80      	pop	{r7}
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40012c00 	.word	0x40012c00

0800240c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800240c:	b480      	push	{r7}
 800240e:	b087      	sub	sp, #28
 8002410:	af00      	add	r7, sp, #0
 8002412:	6078      	str	r0, [r7, #4]
 8002414:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	6a1b      	ldr	r3, [r3, #32]
 800241a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a1b      	ldr	r3, [r3, #32]
 8002420:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	69db      	ldr	r3, [r3, #28]
 8002432:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800243a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002442:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	021b      	lsls	r3, r3, #8
 800244a:	68fa      	ldr	r2, [r7, #12]
 800244c:	4313      	orrs	r3, r2
 800244e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002456:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	689b      	ldr	r3, [r3, #8]
 800245c:	031b      	lsls	r3, r3, #12
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	4313      	orrs	r3, r2
 8002462:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	4a0f      	ldr	r2, [pc, #60]	@ (80024a4 <TIM_OC4_SetConfig+0x98>)
 8002468:	4293      	cmp	r3, r2
 800246a:	d109      	bne.n	8002480 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800246c:	697b      	ldr	r3, [r7, #20]
 800246e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002472:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	695b      	ldr	r3, [r3, #20]
 8002478:	019b      	lsls	r3, r3, #6
 800247a:	697a      	ldr	r2, [r7, #20]
 800247c:	4313      	orrs	r3, r2
 800247e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	697a      	ldr	r2, [r7, #20]
 8002484:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	68fa      	ldr	r2, [r7, #12]
 800248a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685a      	ldr	r2, [r3, #4]
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	693a      	ldr	r2, [r7, #16]
 8002498:	621a      	str	r2, [r3, #32]
}
 800249a:	bf00      	nop
 800249c:	371c      	adds	r7, #28
 800249e:	46bd      	mov	sp, r7
 80024a0:	bc80      	pop	{r7}
 80024a2:	4770      	bx	lr
 80024a4:	40012c00 	.word	0x40012c00

080024a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b087      	sub	sp, #28
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	60f8      	str	r0, [r7, #12]
 80024b0:	60b9      	str	r1, [r7, #8]
 80024b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	6a1b      	ldr	r3, [r3, #32]
 80024be:	f023 0201 	bic.w	r2, r3, #1
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	699b      	ldr	r3, [r3, #24]
 80024ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024cc:	693b      	ldr	r3, [r7, #16]
 80024ce:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	011b      	lsls	r3, r3, #4
 80024d8:	693a      	ldr	r2, [r7, #16]
 80024da:	4313      	orrs	r3, r2
 80024dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024de:	697b      	ldr	r3, [r7, #20]
 80024e0:	f023 030a 	bic.w	r3, r3, #10
 80024e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024e6:	697a      	ldr	r2, [r7, #20]
 80024e8:	68bb      	ldr	r3, [r7, #8]
 80024ea:	4313      	orrs	r3, r2
 80024ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	697a      	ldr	r2, [r7, #20]
 80024f8:	621a      	str	r2, [r3, #32]
}
 80024fa:	bf00      	nop
 80024fc:	371c      	adds	r7, #28
 80024fe:	46bd      	mov	sp, r7
 8002500:	bc80      	pop	{r7}
 8002502:	4770      	bx	lr

08002504 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002504:	b480      	push	{r7}
 8002506:	b087      	sub	sp, #28
 8002508:	af00      	add	r7, sp, #0
 800250a:	60f8      	str	r0, [r7, #12]
 800250c:	60b9      	str	r1, [r7, #8]
 800250e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002510:	68fb      	ldr	r3, [r7, #12]
 8002512:	6a1b      	ldr	r3, [r3, #32]
 8002514:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	6a1b      	ldr	r3, [r3, #32]
 800251a:	f023 0210 	bic.w	r2, r3, #16
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 800252e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	031b      	lsls	r3, r3, #12
 8002534:	693a      	ldr	r2, [r7, #16]
 8002536:	4313      	orrs	r3, r2
 8002538:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800253a:	697b      	ldr	r3, [r7, #20]
 800253c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002540:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	011b      	lsls	r3, r3, #4
 8002546:	697a      	ldr	r2, [r7, #20]
 8002548:	4313      	orrs	r3, r2
 800254a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	693a      	ldr	r2, [r7, #16]
 8002550:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002552:	68fb      	ldr	r3, [r7, #12]
 8002554:	697a      	ldr	r2, [r7, #20]
 8002556:	621a      	str	r2, [r3, #32]
}
 8002558:	bf00      	nop
 800255a:	371c      	adds	r7, #28
 800255c:	46bd      	mov	sp, r7
 800255e:	bc80      	pop	{r7}
 8002560:	4770      	bx	lr

08002562 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002562:	b480      	push	{r7}
 8002564:	b085      	sub	sp, #20
 8002566:	af00      	add	r7, sp, #0
 8002568:	6078      	str	r0, [r7, #4]
 800256a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	689b      	ldr	r3, [r3, #8]
 8002570:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002578:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800257a:	683a      	ldr	r2, [r7, #0]
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	f043 0307 	orr.w	r3, r3, #7
 8002584:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	68fa      	ldr	r2, [r7, #12]
 800258a:	609a      	str	r2, [r3, #8]
}
 800258c:	bf00      	nop
 800258e:	3714      	adds	r7, #20
 8002590:	46bd      	mov	sp, r7
 8002592:	bc80      	pop	{r7}
 8002594:	4770      	bx	lr

08002596 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002596:	b480      	push	{r7}
 8002598:	b087      	sub	sp, #28
 800259a:	af00      	add	r7, sp, #0
 800259c:	60f8      	str	r0, [r7, #12]
 800259e:	60b9      	str	r1, [r7, #8]
 80025a0:	607a      	str	r2, [r7, #4]
 80025a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	689b      	ldr	r3, [r3, #8]
 80025a8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80025b0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	021a      	lsls	r2, r3, #8
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	431a      	orrs	r2, r3
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	4313      	orrs	r3, r2
 80025be:	697a      	ldr	r2, [r7, #20]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	697a      	ldr	r2, [r7, #20]
 80025c8:	609a      	str	r2, [r3, #8]
}
 80025ca:	bf00      	nop
 80025cc:	371c      	adds	r7, #28
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr

080025d4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b087      	sub	sp, #28
 80025d8:	af00      	add	r7, sp, #0
 80025da:	60f8      	str	r0, [r7, #12]
 80025dc:	60b9      	str	r1, [r7, #8]
 80025de:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025e0:	68bb      	ldr	r3, [r7, #8]
 80025e2:	f003 031f 	and.w	r3, r3, #31
 80025e6:	2201      	movs	r2, #1
 80025e8:	fa02 f303 	lsl.w	r3, r2, r3
 80025ec:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	6a1a      	ldr	r2, [r3, #32]
 80025f2:	697b      	ldr	r3, [r7, #20]
 80025f4:	43db      	mvns	r3, r3
 80025f6:	401a      	ands	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	6a1a      	ldr	r2, [r3, #32]
 8002600:	68bb      	ldr	r3, [r7, #8]
 8002602:	f003 031f 	and.w	r3, r3, #31
 8002606:	6879      	ldr	r1, [r7, #4]
 8002608:	fa01 f303 	lsl.w	r3, r1, r3
 800260c:	431a      	orrs	r2, r3
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	621a      	str	r2, [r3, #32]
}
 8002612:	bf00      	nop
 8002614:	371c      	adds	r7, #28
 8002616:	46bd      	mov	sp, r7
 8002618:	bc80      	pop	{r7}
 800261a:	4770      	bx	lr

0800261c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800262c:	2b01      	cmp	r3, #1
 800262e:	d101      	bne.n	8002634 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002630:	2302      	movs	r3, #2
 8002632:	e046      	b.n	80026c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2201      	movs	r2, #1
 8002638:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	689b      	ldr	r3, [r3, #8]
 8002652:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800265a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800265c:	683b      	ldr	r3, [r7, #0]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	68fa      	ldr	r2, [r7, #12]
 8002662:	4313      	orrs	r3, r2
 8002664:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a16      	ldr	r2, [pc, #88]	@ (80026cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d00e      	beq.n	8002696 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002680:	d009      	beq.n	8002696 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a12      	ldr	r2, [pc, #72]	@ (80026d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d004      	beq.n	8002696 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a10      	ldr	r2, [pc, #64]	@ (80026d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d10c      	bne.n	80026b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002696:	68bb      	ldr	r3, [r7, #8]
 8002698:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800269c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800269e:	683b      	ldr	r3, [r7, #0]
 80026a0:	685b      	ldr	r3, [r3, #4]
 80026a2:	68ba      	ldr	r2, [r7, #8]
 80026a4:	4313      	orrs	r3, r2
 80026a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68ba      	ldr	r2, [r7, #8]
 80026ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	2201      	movs	r2, #1
 80026b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3714      	adds	r7, #20
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bc80      	pop	{r7}
 80026ca:	4770      	bx	lr
 80026cc:	40012c00 	.word	0x40012c00
 80026d0:	40000400 	.word	0x40000400
 80026d4:	40000800 	.word	0x40000800

080026d8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80026d8:	b480      	push	{r7}
 80026da:	b085      	sub	sp, #20
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80026e2:	2300      	movs	r3, #0
 80026e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80026ec:	2b01      	cmp	r3, #1
 80026ee:	d101      	bne.n	80026f4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80026f0:	2302      	movs	r3, #2
 80026f2:	e03d      	b.n	8002770 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2201      	movs	r2, #1
 80026f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8002702:	683b      	ldr	r3, [r7, #0]
 8002704:	68db      	ldr	r3, [r3, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002710:	683b      	ldr	r3, [r7, #0]
 8002712:	689b      	ldr	r3, [r3, #8]
 8002714:	4313      	orrs	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800271e:	683b      	ldr	r3, [r7, #0]
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	4313      	orrs	r3, r2
 8002724:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4313      	orrs	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8002734:	68fb      	ldr	r3, [r7, #12]
 8002736:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	691b      	ldr	r3, [r3, #16]
 800273e:	4313      	orrs	r3, r2
 8002740:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8002742:	68fb      	ldr	r3, [r7, #12]
 8002744:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8002748:	683b      	ldr	r3, [r7, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	4313      	orrs	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	69db      	ldr	r3, [r3, #28]
 800275a:	4313      	orrs	r3, r2
 800275c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	68fa      	ldr	r2, [r7, #12]
 8002764:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	bc80      	pop	{r7}
 8002778:	4770      	bx	lr

0800277a <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800277a:	b580      	push	{r7, lr}
 800277c:	b082      	sub	sp, #8
 800277e:	af00      	add	r7, sp, #0
 8002780:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2b00      	cmp	r3, #0
 8002786:	d101      	bne.n	800278c <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002788:	2301      	movs	r3, #1
 800278a:	e042      	b.n	8002812 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d106      	bne.n	80027a6 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	2200      	movs	r2, #0
 800279c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f7fe f96f 	bl	8000a84 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2224      	movs	r2, #36	@ 0x24
 80027aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68da      	ldr	r2, [r3, #12]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80027bc:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 fcd4 	bl	800316c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691a      	ldr	r2, [r3, #16]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027d2:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	695a      	ldr	r2, [r3, #20]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027e2:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	68da      	ldr	r2, [r3, #12]
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027f2:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	2200      	movs	r2, #0
 80027f8:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2220      	movs	r2, #32
 80027fe:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	2220      	movs	r2, #32
 8002806:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3708      	adds	r7, #8
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}

0800281a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800281a:	b580      	push	{r7, lr}
 800281c:	b084      	sub	sp, #16
 800281e:	af00      	add	r7, sp, #0
 8002820:	60f8      	str	r0, [r7, #12]
 8002822:	60b9      	str	r1, [r7, #8]
 8002824:	4613      	mov	r3, r2
 8002826:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800282e:	b2db      	uxtb	r3, r3
 8002830:	2b20      	cmp	r3, #32
 8002832:	d112      	bne.n	800285a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8002834:	68bb      	ldr	r3, [r7, #8]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d002      	beq.n	8002840 <HAL_UART_Receive_IT+0x26>
 800283a:	88fb      	ldrh	r3, [r7, #6]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d101      	bne.n	8002844 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e00b      	b.n	800285c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2200      	movs	r2, #0
 8002848:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800284a:	88fb      	ldrh	r3, [r7, #6]
 800284c:	461a      	mov	r2, r3
 800284e:	68b9      	ldr	r1, [r7, #8]
 8002850:	68f8      	ldr	r0, [r7, #12]
 8002852:	f000 fab6 	bl	8002dc2 <UART_Start_Receive_IT>
 8002856:	4603      	mov	r3, r0
 8002858:	e000      	b.n	800285c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800285a:	2302      	movs	r3, #2
  }
}
 800285c:	4618      	mov	r0, r3
 800285e:	3710      	adds	r7, #16
 8002860:	46bd      	mov	sp, r7
 8002862:	bd80      	pop	{r7, pc}

08002864 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002864:	b580      	push	{r7, lr}
 8002866:	b0ba      	sub	sp, #232	@ 0xe8
 8002868:	af00      	add	r7, sp, #0
 800286a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	68db      	ldr	r3, [r3, #12]
 800287c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	695b      	ldr	r3, [r3, #20]
 8002886:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800288a:	2300      	movs	r3, #0
 800288c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002890:	2300      	movs	r3, #0
 8002892:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002896:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800289a:	f003 030f 	and.w	r3, r3, #15
 800289e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80028a2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d10f      	bne.n	80028ca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80028aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028ae:	f003 0320 	and.w	r3, r3, #32
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d009      	beq.n	80028ca <HAL_UART_IRQHandler+0x66>
 80028b6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028ba:	f003 0320 	and.w	r3, r3, #32
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d003      	beq.n	80028ca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80028c2:	6878      	ldr	r0, [r7, #4]
 80028c4:	f000 fb93 	bl	8002fee <UART_Receive_IT>
      return;
 80028c8:	e25b      	b.n	8002d82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80028ca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	f000 80de 	beq.w	8002a90 <HAL_UART_IRQHandler+0x22c>
 80028d4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80028d8:	f003 0301 	and.w	r3, r3, #1
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d106      	bne.n	80028ee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80028e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028e4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	f000 80d1 	beq.w	8002a90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80028ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80028f2:	f003 0301 	and.w	r3, r3, #1
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00b      	beq.n	8002912 <HAL_UART_IRQHandler+0xae>
 80028fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80028fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002902:	2b00      	cmp	r3, #0
 8002904:	d005      	beq.n	8002912 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800290a:	f043 0201 	orr.w	r2, r3, #1
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002912:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002916:	f003 0304 	and.w	r3, r3, #4
 800291a:	2b00      	cmp	r3, #0
 800291c:	d00b      	beq.n	8002936 <HAL_UART_IRQHandler+0xd2>
 800291e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002922:	f003 0301 	and.w	r3, r3, #1
 8002926:	2b00      	cmp	r3, #0
 8002928:	d005      	beq.n	8002936 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800292e:	f043 0202 	orr.w	r2, r3, #2
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002936:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800293a:	f003 0302 	and.w	r3, r3, #2
 800293e:	2b00      	cmp	r3, #0
 8002940:	d00b      	beq.n	800295a <HAL_UART_IRQHandler+0xf6>
 8002942:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	2b00      	cmp	r3, #0
 800294c:	d005      	beq.n	800295a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002952:	f043 0204 	orr.w	r2, r3, #4
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800295a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800295e:	f003 0308 	and.w	r3, r3, #8
 8002962:	2b00      	cmp	r3, #0
 8002964:	d011      	beq.n	800298a <HAL_UART_IRQHandler+0x126>
 8002966:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800296a:	f003 0320 	and.w	r3, r3, #32
 800296e:	2b00      	cmp	r3, #0
 8002970:	d105      	bne.n	800297e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002972:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d005      	beq.n	800298a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002982:	f043 0208 	orr.w	r2, r3, #8
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298e:	2b00      	cmp	r3, #0
 8002990:	f000 81f2 	beq.w	8002d78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002994:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002998:	f003 0320 	and.w	r3, r3, #32
 800299c:	2b00      	cmp	r3, #0
 800299e:	d008      	beq.n	80029b2 <HAL_UART_IRQHandler+0x14e>
 80029a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029a4:	f003 0320 	and.w	r3, r3, #32
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d002      	beq.n	80029b2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80029ac:	6878      	ldr	r0, [r7, #4]
 80029ae:	f000 fb1e 	bl	8002fee <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	695b      	ldr	r3, [r3, #20]
 80029b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029bc:	2b00      	cmp	r3, #0
 80029be:	bf14      	ite	ne
 80029c0:	2301      	movne	r3, #1
 80029c2:	2300      	moveq	r3, #0
 80029c4:	b2db      	uxtb	r3, r3
 80029c6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029ce:	f003 0308 	and.w	r3, r3, #8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d103      	bne.n	80029de <HAL_UART_IRQHandler+0x17a>
 80029d6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d04f      	beq.n	8002a7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	f000 fa28 	bl	8002e34 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	695b      	ldr	r3, [r3, #20]
 80029ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d041      	beq.n	8002a76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	3314      	adds	r3, #20
 80029f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80029fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a00:	e853 3f00 	ldrex	r3, [r3]
 8002a04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002a08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002a0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002a10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	3314      	adds	r3, #20
 8002a1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002a1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002a22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002a26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002a2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002a2e:	e841 2300 	strex	r3, r2, [r1]
 8002a32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002a36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d1d9      	bne.n	80029f2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d013      	beq.n	8002a6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a4a:	4a7e      	ldr	r2, [pc, #504]	@ (8002c44 <HAL_UART_IRQHandler+0x3e0>)
 8002a4c:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a52:	4618      	mov	r0, r3
 8002a54:	f7fe fa3a 	bl	8000ecc <HAL_DMA_Abort_IT>
 8002a58:	4603      	mov	r3, r0
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d016      	beq.n	8002a8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a62:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002a64:	687a      	ldr	r2, [r7, #4]
 8002a66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002a68:	4610      	mov	r0, r2
 8002a6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a6c:	e00e      	b.n	8002a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002a6e:	6878      	ldr	r0, [r7, #4]
 8002a70:	f000 f993 	bl	8002d9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a74:	e00a      	b.n	8002a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002a76:	6878      	ldr	r0, [r7, #4]
 8002a78:	f000 f98f 	bl	8002d9a <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a7c:	e006      	b.n	8002a8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f98b 	bl	8002d9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	2200      	movs	r2, #0
 8002a88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002a8a:	e175      	b.n	8002d78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a8c:	bf00      	nop
    return;
 8002a8e:	e173      	b.n	8002d78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	f040 814f 	bne.w	8002d38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002a9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a9e:	f003 0310 	and.w	r3, r3, #16
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	f000 8148 	beq.w	8002d38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aac:	f003 0310 	and.w	r3, r3, #16
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	f000 8141 	beq.w	8002d38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002ab6:	2300      	movs	r3, #0
 8002ab8:	60bb      	str	r3, [r7, #8]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	60bb      	str	r3, [r7, #8]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	685b      	ldr	r3, [r3, #4]
 8002ac8:	60bb      	str	r3, [r7, #8]
 8002aca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	695b      	ldr	r3, [r3, #20]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	f000 80b6 	beq.w	8002c48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	685b      	ldr	r3, [r3, #4]
 8002ae4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002ae8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	f000 8145 	beq.w	8002d7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002afa:	429a      	cmp	r2, r3
 8002afc:	f080 813e 	bcs.w	8002d7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002b06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b0c:	699b      	ldr	r3, [r3, #24]
 8002b0e:	2b20      	cmp	r3, #32
 8002b10:	f000 8088 	beq.w	8002c24 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	330c      	adds	r3, #12
 8002b1a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b1e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002b22:	e853 3f00 	ldrex	r3, [r3]
 8002b26:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002b2a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002b2e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002b32:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	330c      	adds	r3, #12
 8002b3c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002b40:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b44:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b48:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002b4c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002b50:	e841 2300 	strex	r3, r2, [r1]
 8002b54:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002b58:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d1d9      	bne.n	8002b14 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	681b      	ldr	r3, [r3, #0]
 8002b64:	3314      	adds	r3, #20
 8002b66:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b68:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b6a:	e853 3f00 	ldrex	r3, [r3]
 8002b6e:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002b70:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b72:	f023 0301 	bic.w	r3, r3, #1
 8002b76:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	3314      	adds	r3, #20
 8002b80:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002b84:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002b88:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b8a:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002b8c:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002b90:	e841 2300 	strex	r3, r2, [r1]
 8002b94:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002b96:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1e1      	bne.n	8002b60 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	3314      	adds	r3, #20
 8002ba2:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ba4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002ba6:	e853 3f00 	ldrex	r3, [r3]
 8002baa:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002bac:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002bb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	3314      	adds	r3, #20
 8002bbc:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002bc0:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002bc2:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bc4:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002bc6:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002bc8:	e841 2300 	strex	r3, r2, [r1]
 8002bcc:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002bce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d1e3      	bne.n	8002b9c <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2220      	movs	r2, #32
 8002bd8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	330c      	adds	r3, #12
 8002be8:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bea:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002bec:	e853 3f00 	ldrex	r3, [r3]
 8002bf0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002bf2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002bf4:	f023 0310 	bic.w	r3, r3, #16
 8002bf8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	330c      	adds	r3, #12
 8002c02:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002c06:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002c08:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c0a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002c0c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002c0e:	e841 2300 	strex	r3, r2, [r1]
 8002c12:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002c14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1e3      	bne.n	8002be2 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f7fe f919 	bl	8000e56 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	2202      	movs	r2, #2
 8002c28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c32:	b29b      	uxth	r3, r3
 8002c34:	1ad3      	subs	r3, r2, r3
 8002c36:	b29b      	uxth	r3, r3
 8002c38:	4619      	mov	r1, r3
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f000 f8b6 	bl	8002dac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002c40:	e09c      	b.n	8002d7c <HAL_UART_IRQHandler+0x518>
 8002c42:	bf00      	nop
 8002c44:	08002ef9 	.word	0x08002ef9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c50:	b29b      	uxth	r3, r3
 8002c52:	1ad3      	subs	r3, r2, r3
 8002c54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002c5c:	b29b      	uxth	r3, r3
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	f000 808e 	beq.w	8002d80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002c64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002c68:	2b00      	cmp	r3, #0
 8002c6a:	f000 8089 	beq.w	8002d80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	330c      	adds	r3, #12
 8002c74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002c78:	e853 3f00 	ldrex	r3, [r3]
 8002c7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002c7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002c80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002c84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	330c      	adds	r3, #12
 8002c8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002c92:	647a      	str	r2, [r7, #68]	@ 0x44
 8002c94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002c98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002c9a:	e841 2300 	strex	r3, r2, [r1]
 8002c9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002ca0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d1e3      	bne.n	8002c6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	3314      	adds	r3, #20
 8002cac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	e853 3f00 	ldrex	r3, [r3]
 8002cb4:	623b      	str	r3, [r7, #32]
   return(result);
 8002cb6:	6a3b      	ldr	r3, [r7, #32]
 8002cb8:	f023 0301 	bic.w	r3, r3, #1
 8002cbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	3314      	adds	r3, #20
 8002cc6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002cca:	633a      	str	r2, [r7, #48]	@ 0x30
 8002ccc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002cd0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002cd2:	e841 2300 	strex	r3, r2, [r1]
 8002cd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002cd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d1e3      	bne.n	8002ca6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	2220      	movs	r2, #32
 8002ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2200      	movs	r2, #0
 8002cea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	330c      	adds	r3, #12
 8002cf2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cf4:	693b      	ldr	r3, [r7, #16]
 8002cf6:	e853 3f00 	ldrex	r3, [r3]
 8002cfa:	60fb      	str	r3, [r7, #12]
   return(result);
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	f023 0310 	bic.w	r3, r3, #16
 8002d02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	330c      	adds	r3, #12
 8002d0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002d10:	61fa      	str	r2, [r7, #28]
 8002d12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d14:	69b9      	ldr	r1, [r7, #24]
 8002d16:	69fa      	ldr	r2, [r7, #28]
 8002d18:	e841 2300 	strex	r3, r2, [r1]
 8002d1c:	617b      	str	r3, [r7, #20]
   return(result);
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d1e3      	bne.n	8002cec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	2202      	movs	r2, #2
 8002d28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002d2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d2e:	4619      	mov	r1, r3
 8002d30:	6878      	ldr	r0, [r7, #4]
 8002d32:	f000 f83b 	bl	8002dac <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d36:	e023      	b.n	8002d80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002d38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d009      	beq.n	8002d58 <HAL_UART_IRQHandler+0x4f4>
 8002d44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	d003      	beq.n	8002d58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002d50:	6878      	ldr	r0, [r7, #4]
 8002d52:	f000 f8e5 	bl	8002f20 <UART_Transmit_IT>
    return;
 8002d56:	e014      	b.n	8002d82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002d58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002d5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d00e      	beq.n	8002d82 <HAL_UART_IRQHandler+0x51e>
 8002d64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002d68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d008      	beq.n	8002d82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002d70:	6878      	ldr	r0, [r7, #4]
 8002d72:	f000 f924 	bl	8002fbe <UART_EndTransmit_IT>
    return;
 8002d76:	e004      	b.n	8002d82 <HAL_UART_IRQHandler+0x51e>
    return;
 8002d78:	bf00      	nop
 8002d7a:	e002      	b.n	8002d82 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d7c:	bf00      	nop
 8002d7e:	e000      	b.n	8002d82 <HAL_UART_IRQHandler+0x51e>
      return;
 8002d80:	bf00      	nop
  }
}
 8002d82:	37e8      	adds	r7, #232	@ 0xe8
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002d88:	b480      	push	{r7}
 8002d8a:	b083      	sub	sp, #12
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002d90:	bf00      	nop
 8002d92:	370c      	adds	r7, #12
 8002d94:	46bd      	mov	sp, r7
 8002d96:	bc80      	pop	{r7}
 8002d98:	4770      	bx	lr

08002d9a <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002d9a:	b480      	push	{r7}
 8002d9c:	b083      	sub	sp, #12
 8002d9e:	af00      	add	r7, sp, #0
 8002da0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002da2:	bf00      	nop
 8002da4:	370c      	adds	r7, #12
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bc80      	pop	{r7}
 8002daa:	4770      	bx	lr

08002dac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	460b      	mov	r3, r1
 8002db6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002db8:	bf00      	nop
 8002dba:	370c      	adds	r7, #12
 8002dbc:	46bd      	mov	sp, r7
 8002dbe:	bc80      	pop	{r7}
 8002dc0:	4770      	bx	lr

08002dc2 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002dc2:	b480      	push	{r7}
 8002dc4:	b085      	sub	sp, #20
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
 8002dca:	60b9      	str	r1, [r7, #8]
 8002dcc:	4613      	mov	r3, r2
 8002dce:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	68ba      	ldr	r2, [r7, #8]
 8002dd4:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	88fa      	ldrh	r2, [r7, #6]
 8002dda:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	88fa      	ldrh	r2, [r7, #6]
 8002de0:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	2222      	movs	r2, #34	@ 0x22
 8002dec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	691b      	ldr	r3, [r3, #16]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d007      	beq.n	8002e08 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	68da      	ldr	r2, [r3, #12]
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8002e06:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	695a      	ldr	r2, [r3, #20]
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	f042 0201 	orr.w	r2, r2, #1
 8002e16:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	68da      	ldr	r2, [r3, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0220 	orr.w	r2, r2, #32
 8002e26:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002e28:	2300      	movs	r3, #0
}
 8002e2a:	4618      	mov	r0, r3
 8002e2c:	3714      	adds	r7, #20
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bc80      	pop	{r7}
 8002e32:	4770      	bx	lr

08002e34 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002e34:	b480      	push	{r7}
 8002e36:	b095      	sub	sp, #84	@ 0x54
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	330c      	adds	r3, #12
 8002e42:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e44:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002e46:	e853 3f00 	ldrex	r3, [r3]
 8002e4a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002e4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002e4e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002e52:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	330c      	adds	r3, #12
 8002e5a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002e5c:	643a      	str	r2, [r7, #64]	@ 0x40
 8002e5e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e60:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002e62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002e64:	e841 2300 	strex	r3, r2, [r1]
 8002e68:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002e6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d1e5      	bne.n	8002e3c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	3314      	adds	r3, #20
 8002e76:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	e853 3f00 	ldrex	r3, [r3]
 8002e7e:	61fb      	str	r3, [r7, #28]
   return(result);
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f023 0301 	bic.w	r3, r3, #1
 8002e86:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	3314      	adds	r3, #20
 8002e8e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002e90:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002e92:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e94:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002e96:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002e98:	e841 2300 	strex	r3, r2, [r1]
 8002e9c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d1e5      	bne.n	8002e70 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ea8:	2b01      	cmp	r3, #1
 8002eaa:	d119      	bne.n	8002ee0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	330c      	adds	r3, #12
 8002eb2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	e853 3f00 	ldrex	r3, [r3]
 8002eba:	60bb      	str	r3, [r7, #8]
   return(result);
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	f023 0310 	bic.w	r3, r3, #16
 8002ec2:	647b      	str	r3, [r7, #68]	@ 0x44
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	330c      	adds	r3, #12
 8002eca:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002ecc:	61ba      	str	r2, [r7, #24]
 8002ece:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ed0:	6979      	ldr	r1, [r7, #20]
 8002ed2:	69ba      	ldr	r2, [r7, #24]
 8002ed4:	e841 2300 	strex	r3, r2, [r1]
 8002ed8:	613b      	str	r3, [r7, #16]
   return(result);
 8002eda:	693b      	ldr	r3, [r7, #16]
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1e5      	bne.n	8002eac <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2200      	movs	r2, #0
 8002eec:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8002eee:	bf00      	nop
 8002ef0:	3754      	adds	r7, #84	@ 0x54
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f04:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	2200      	movs	r2, #0
 8002f0a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2200      	movs	r2, #0
 8002f10:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8002f12:	68f8      	ldr	r0, [r7, #12]
 8002f14:	f7ff ff41 	bl	8002d9a <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8002f18:	bf00      	nop
 8002f1a:	3710      	adds	r7, #16
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002f20:	b480      	push	{r7}
 8002f22:	b085      	sub	sp, #20
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f2e:	b2db      	uxtb	r3, r3
 8002f30:	2b21      	cmp	r3, #33	@ 0x21
 8002f32:	d13e      	bne.n	8002fb2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	689b      	ldr	r3, [r3, #8]
 8002f38:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002f3c:	d114      	bne.n	8002f68 <UART_Transmit_IT+0x48>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	691b      	ldr	r3, [r3, #16]
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d110      	bne.n	8002f68 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6a1b      	ldr	r3, [r3, #32]
 8002f4a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	461a      	mov	r2, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f5a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	6a1b      	ldr	r3, [r3, #32]
 8002f60:	1c9a      	adds	r2, r3, #2
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	621a      	str	r2, [r3, #32]
 8002f66:	e008      	b.n	8002f7a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	6a1b      	ldr	r3, [r3, #32]
 8002f6c:	1c59      	adds	r1, r3, #1
 8002f6e:	687a      	ldr	r2, [r7, #4]
 8002f70:	6211      	str	r1, [r2, #32]
 8002f72:	781a      	ldrb	r2, [r3, #0]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002f7e:	b29b      	uxth	r3, r3
 8002f80:	3b01      	subs	r3, #1
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	687a      	ldr	r2, [r7, #4]
 8002f86:	4619      	mov	r1, r3
 8002f88:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d10f      	bne.n	8002fae <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	68da      	ldr	r2, [r3, #12]
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002f9c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002fac:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8002fae:	2300      	movs	r3, #0
 8002fb0:	e000      	b.n	8002fb4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002fb2:	2302      	movs	r3, #2
  }
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	bc80      	pop	{r7}
 8002fbc:	4770      	bx	lr

08002fbe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8002fbe:	b580      	push	{r7, lr}
 8002fc0:	b082      	sub	sp, #8
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	68da      	ldr	r2, [r3, #12]
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002fd4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2220      	movs	r2, #32
 8002fda:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f7ff fed2 	bl	8002d88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8002fe4:	2300      	movs	r3, #0
}
 8002fe6:	4618      	mov	r0, r3
 8002fe8:	3708      	adds	r7, #8
 8002fea:	46bd      	mov	sp, r7
 8002fec:	bd80      	pop	{r7, pc}

08002fee <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8002fee:	b580      	push	{r7, lr}
 8002ff0:	b08c      	sub	sp, #48	@ 0x30
 8002ff2:	af00      	add	r7, sp, #0
 8002ff4:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002ffc:	b2db      	uxtb	r3, r3
 8002ffe:	2b22      	cmp	r3, #34	@ 0x22
 8003000:	f040 80ae 	bne.w	8003160 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	689b      	ldr	r3, [r3, #8]
 8003008:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800300c:	d117      	bne.n	800303e <UART_Receive_IT+0x50>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b00      	cmp	r3, #0
 8003014:	d113      	bne.n	800303e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003016:	2300      	movs	r3, #0
 8003018:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800301e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	b29b      	uxth	r3, r3
 8003028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302c:	b29a      	uxth	r2, r3
 800302e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003030:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003036:	1c9a      	adds	r2, r3, #2
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	629a      	str	r2, [r3, #40]	@ 0x28
 800303c:	e026      	b.n	800308c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003042:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003044:	2300      	movs	r3, #0
 8003046:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	689b      	ldr	r3, [r3, #8]
 800304c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003050:	d007      	beq.n	8003062 <UART_Receive_IT+0x74>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d10a      	bne.n	8003070 <UART_Receive_IT+0x82>
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	691b      	ldr	r3, [r3, #16]
 800305e:	2b00      	cmp	r3, #0
 8003060:	d106      	bne.n	8003070 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	b2da      	uxtb	r2, r3
 800306a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800306c:	701a      	strb	r2, [r3, #0]
 800306e:	e008      	b.n	8003082 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	b2db      	uxtb	r3, r3
 8003078:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800307c:	b2da      	uxtb	r2, r3
 800307e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003080:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003086:	1c5a      	adds	r2, r3, #1
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003090:	b29b      	uxth	r3, r3
 8003092:	3b01      	subs	r3, #1
 8003094:	b29b      	uxth	r3, r3
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	4619      	mov	r1, r3
 800309a:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800309c:	2b00      	cmp	r3, #0
 800309e:	d15d      	bne.n	800315c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68da      	ldr	r2, [r3, #12]
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f022 0220 	bic.w	r2, r2, #32
 80030ae:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80030be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	695a      	ldr	r2, [r3, #20]
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	f022 0201 	bic.w	r2, r2, #1
 80030ce:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2220      	movs	r2, #32
 80030d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030e2:	2b01      	cmp	r3, #1
 80030e4:	d135      	bne.n	8003152 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	330c      	adds	r3, #12
 80030f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80030f4:	697b      	ldr	r3, [r7, #20]
 80030f6:	e853 3f00 	ldrex	r3, [r3]
 80030fa:	613b      	str	r3, [r7, #16]
   return(result);
 80030fc:	693b      	ldr	r3, [r7, #16]
 80030fe:	f023 0310 	bic.w	r3, r3, #16
 8003102:	627b      	str	r3, [r7, #36]	@ 0x24
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	330c      	adds	r3, #12
 800310a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800310c:	623a      	str	r2, [r7, #32]
 800310e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003110:	69f9      	ldr	r1, [r7, #28]
 8003112:	6a3a      	ldr	r2, [r7, #32]
 8003114:	e841 2300 	strex	r3, r2, [r1]
 8003118:	61bb      	str	r3, [r7, #24]
   return(result);
 800311a:	69bb      	ldr	r3, [r7, #24]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d1e5      	bne.n	80030ec <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f003 0310 	and.w	r3, r3, #16
 800312a:	2b10      	cmp	r3, #16
 800312c:	d10a      	bne.n	8003144 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800312e:	2300      	movs	r3, #0
 8003130:	60fb      	str	r3, [r7, #12]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	60fb      	str	r3, [r7, #12]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	60fb      	str	r3, [r7, #12]
 8003142:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003148:	4619      	mov	r1, r3
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f7ff fe2e 	bl	8002dac <HAL_UARTEx_RxEventCallback>
 8003150:	e002      	b.n	8003158 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003152:	6878      	ldr	r0, [r7, #4]
 8003154:	f7fd f8d0 	bl	80002f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003158:	2300      	movs	r3, #0
 800315a:	e002      	b.n	8003162 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800315c:	2300      	movs	r3, #0
 800315e:	e000      	b.n	8003162 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003160:	2302      	movs	r3, #2
  }
}
 8003162:	4618      	mov	r0, r3
 8003164:	3730      	adds	r7, #48	@ 0x30
 8003166:	46bd      	mov	sp, r7
 8003168:	bd80      	pop	{r7, pc}
	...

0800316c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b084      	sub	sp, #16
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	691b      	ldr	r3, [r3, #16]
 800317a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	68da      	ldr	r2, [r3, #12]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	430a      	orrs	r2, r1
 8003188:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	689a      	ldr	r2, [r3, #8]
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	691b      	ldr	r3, [r3, #16]
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	695b      	ldr	r3, [r3, #20]
 8003198:	4313      	orrs	r3, r2
 800319a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80031a6:	f023 030c 	bic.w	r3, r3, #12
 80031aa:	687a      	ldr	r2, [r7, #4]
 80031ac:	6812      	ldr	r2, [r2, #0]
 80031ae:	68b9      	ldr	r1, [r7, #8]
 80031b0:	430b      	orrs	r3, r1
 80031b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	695b      	ldr	r3, [r3, #20]
 80031ba:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	699a      	ldr	r2, [r3, #24]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	430a      	orrs	r2, r1
 80031c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a2c      	ldr	r2, [pc, #176]	@ (8003280 <UART_SetConfig+0x114>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d103      	bne.n	80031dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80031d4:	f7fe fc6c 	bl	8001ab0 <HAL_RCC_GetPCLK2Freq>
 80031d8:	60f8      	str	r0, [r7, #12]
 80031da:	e002      	b.n	80031e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80031dc:	f7fe fc54 	bl	8001a88 <HAL_RCC_GetPCLK1Freq>
 80031e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80031e2:	68fa      	ldr	r2, [r7, #12]
 80031e4:	4613      	mov	r3, r2
 80031e6:	009b      	lsls	r3, r3, #2
 80031e8:	4413      	add	r3, r2
 80031ea:	009a      	lsls	r2, r3, #2
 80031ec:	441a      	add	r2, r3
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	009b      	lsls	r3, r3, #2
 80031f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031f8:	4a22      	ldr	r2, [pc, #136]	@ (8003284 <UART_SetConfig+0x118>)
 80031fa:	fba2 2303 	umull	r2, r3, r2, r3
 80031fe:	095b      	lsrs	r3, r3, #5
 8003200:	0119      	lsls	r1, r3, #4
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4613      	mov	r3, r2
 8003206:	009b      	lsls	r3, r3, #2
 8003208:	4413      	add	r3, r2
 800320a:	009a      	lsls	r2, r3, #2
 800320c:	441a      	add	r2, r3
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	009b      	lsls	r3, r3, #2
 8003214:	fbb2 f2f3 	udiv	r2, r2, r3
 8003218:	4b1a      	ldr	r3, [pc, #104]	@ (8003284 <UART_SetConfig+0x118>)
 800321a:	fba3 0302 	umull	r0, r3, r3, r2
 800321e:	095b      	lsrs	r3, r3, #5
 8003220:	2064      	movs	r0, #100	@ 0x64
 8003222:	fb00 f303 	mul.w	r3, r0, r3
 8003226:	1ad3      	subs	r3, r2, r3
 8003228:	011b      	lsls	r3, r3, #4
 800322a:	3332      	adds	r3, #50	@ 0x32
 800322c:	4a15      	ldr	r2, [pc, #84]	@ (8003284 <UART_SetConfig+0x118>)
 800322e:	fba2 2303 	umull	r2, r3, r2, r3
 8003232:	095b      	lsrs	r3, r3, #5
 8003234:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003238:	4419      	add	r1, r3
 800323a:	68fa      	ldr	r2, [r7, #12]
 800323c:	4613      	mov	r3, r2
 800323e:	009b      	lsls	r3, r3, #2
 8003240:	4413      	add	r3, r2
 8003242:	009a      	lsls	r2, r3, #2
 8003244:	441a      	add	r2, r3
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	685b      	ldr	r3, [r3, #4]
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003250:	4b0c      	ldr	r3, [pc, #48]	@ (8003284 <UART_SetConfig+0x118>)
 8003252:	fba3 0302 	umull	r0, r3, r3, r2
 8003256:	095b      	lsrs	r3, r3, #5
 8003258:	2064      	movs	r0, #100	@ 0x64
 800325a:	fb00 f303 	mul.w	r3, r0, r3
 800325e:	1ad3      	subs	r3, r2, r3
 8003260:	011b      	lsls	r3, r3, #4
 8003262:	3332      	adds	r3, #50	@ 0x32
 8003264:	4a07      	ldr	r2, [pc, #28]	@ (8003284 <UART_SetConfig+0x118>)
 8003266:	fba2 2303 	umull	r2, r3, r2, r3
 800326a:	095b      	lsrs	r3, r3, #5
 800326c:	f003 020f 	and.w	r2, r3, #15
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	440a      	add	r2, r1
 8003276:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003278:	bf00      	nop
 800327a:	3710      	adds	r7, #16
 800327c:	46bd      	mov	sp, r7
 800327e:	bd80      	pop	{r7, pc}
 8003280:	40013800 	.word	0x40013800
 8003284:	51eb851f 	.word	0x51eb851f

08003288 <memset>:
 8003288:	4603      	mov	r3, r0
 800328a:	4402      	add	r2, r0
 800328c:	4293      	cmp	r3, r2
 800328e:	d100      	bne.n	8003292 <memset+0xa>
 8003290:	4770      	bx	lr
 8003292:	f803 1b01 	strb.w	r1, [r3], #1
 8003296:	e7f9      	b.n	800328c <memset+0x4>

08003298 <__libc_init_array>:
 8003298:	b570      	push	{r4, r5, r6, lr}
 800329a:	2600      	movs	r6, #0
 800329c:	4d0c      	ldr	r5, [pc, #48]	@ (80032d0 <__libc_init_array+0x38>)
 800329e:	4c0d      	ldr	r4, [pc, #52]	@ (80032d4 <__libc_init_array+0x3c>)
 80032a0:	1b64      	subs	r4, r4, r5
 80032a2:	10a4      	asrs	r4, r4, #2
 80032a4:	42a6      	cmp	r6, r4
 80032a6:	d109      	bne.n	80032bc <__libc_init_array+0x24>
 80032a8:	f000 f81a 	bl	80032e0 <_init>
 80032ac:	2600      	movs	r6, #0
 80032ae:	4d0a      	ldr	r5, [pc, #40]	@ (80032d8 <__libc_init_array+0x40>)
 80032b0:	4c0a      	ldr	r4, [pc, #40]	@ (80032dc <__libc_init_array+0x44>)
 80032b2:	1b64      	subs	r4, r4, r5
 80032b4:	10a4      	asrs	r4, r4, #2
 80032b6:	42a6      	cmp	r6, r4
 80032b8:	d105      	bne.n	80032c6 <__libc_init_array+0x2e>
 80032ba:	bd70      	pop	{r4, r5, r6, pc}
 80032bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80032c0:	4798      	blx	r3
 80032c2:	3601      	adds	r6, #1
 80032c4:	e7ee      	b.n	80032a4 <__libc_init_array+0xc>
 80032c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80032ca:	4798      	blx	r3
 80032cc:	3601      	adds	r6, #1
 80032ce:	e7f2      	b.n	80032b6 <__libc_init_array+0x1e>
 80032d0:	08003324 	.word	0x08003324
 80032d4:	08003324 	.word	0x08003324
 80032d8:	08003324 	.word	0x08003324
 80032dc:	0800332c 	.word	0x0800332c

080032e0 <_init>:
 80032e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032e2:	bf00      	nop
 80032e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032e6:	bc08      	pop	{r3}
 80032e8:	469e      	mov	lr, r3
 80032ea:	4770      	bx	lr

080032ec <_fini>:
 80032ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80032ee:	bf00      	nop
 80032f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80032f2:	bc08      	pop	{r3}
 80032f4:	469e      	mov	lr, r3
 80032f6:	4770      	bx	lr
